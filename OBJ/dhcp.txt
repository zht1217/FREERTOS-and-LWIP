; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\dhcp.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\dhcp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\dhcp.crf ..\LWIP\lwip-1.4.1\src\core\dhcp.c]
                          THUMB

                          AREA ||i.dhcp_arp_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_arp_reply PROC
;;;802     */
;;;803    void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
000000  b570              PUSH     {r4-r6,lr}
;;;804    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;805      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
000006  bf00              NOP      
000008  b94c              CBNZ     r4,|L1.30|
00000a  bf00              NOP      
00000c  a30f              ADR      r3,|L1.76|
00000e  f2403225          MOV      r2,#0x325
000012  a117              ADR      r1,|L1.112|
000014  a01a              ADR      r0,|L1.128|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L1.28|
;;;806      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
;;;807      /* is a DHCP client doing an ARP check? */
;;;808      if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
;;;809        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
;;;810          ip4_addr_get_u32(addr)));
;;;811        /* did a host respond with the address we
;;;812           were offered by the DHCP server? */
;;;813        if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
;;;814          /* we will not accept the offered address */
;;;815          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
;;;816            ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;817          dhcp_decline(netif);
;;;818        }
;;;819      }
;;;820    }
00001c  bd70              POP      {r4-r6,pc}
                  |L1.30|
00001e  bf00              NOP                            ;805
000020  bf00              NOP                            ;806
000022  bf00              NOP                            ;806
000024  6a20              LDR      r0,[r4,#0x20]         ;808
000026  b178              CBZ      r0,|L1.72|
000028  6a20              LDR      r0,[r4,#0x20]         ;808
00002a  7b00              LDRB     r0,[r0,#0xc]          ;808
00002c  2808              CMP      r0,#8                 ;808
00002e  d10b              BNE      |L1.72|
000030  bf00              NOP                            ;809
000032  bf00              NOP                            ;809
000034  6828              LDR      r0,[r5,#0]            ;813
000036  6a21              LDR      r1,[r4,#0x20]         ;813
000038  6a49              LDR      r1,[r1,#0x24]         ;813
00003a  4288              CMP      r0,r1                 ;813
00003c  d104              BNE      |L1.72|
00003e  bf00              NOP                            ;815
000040  bf00              NOP                            ;815
000042  4620              MOV      r0,r4                 ;817
000044  f7fffffe          BL       dhcp_decline
                  |L1.72|
000048  bf00              NOP      
00004a  e7e7              B        |L1.28|
;;;821    
                          ENDP

                  |L1.76|
00004c  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000050  5749505c
000054  6c776970
000058  2d312e34
00005c  2e315c73
000060  72635c63
000064  6f72655c
000068  64686370
00006c  2e6300  
00006f  00                DCB      0
                  |L1.112|
000070  6e657469          DCB      "netif != NULL",0
000074  6620213d
000078  204e554c
00007c  4c00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L1.128|
000080  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000084  7274696f
000088  6e202225
00008c  73222066
000090  61696c65
000094  64206174
000098  206c696e
00009c  65202564
0000a0  20696e20
0000a4  25730d0a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.dhcp_bind||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_bind PROC
;;;926    static void
;;;927    dhcp_bind(struct netif *netif)
000000  b57c              PUSH     {r2-r6,lr}
;;;928    {
000002  4606              MOV      r6,r0
;;;929      u32_t timeout;
;;;930      struct dhcp *dhcp;
;;;931      ip_addr_t sn_mask, gw_addr;
;;;932      LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
000004  bf00              NOP      
000006  b94e              CBNZ     r6,|L2.28|
000008  bf00              NOP      
00000a  a347              ADR      r3,|L2.296|
00000c  f44f7269          MOV      r2,#0x3a4
000010  a14e              ADR      r1,|L2.332|
000012  a055              ADR      r0,|L2.360|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
                  |L2.26|
;;;933      dhcp = netif->dhcp;
;;;934      LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
;;;935      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;936    
;;;937      /* temporary DHCP lease? */
;;;938      if (dhcp->offered_t1_renew != 0xffffffffUL) {
;;;939        /* set renewal period timer */
;;;940        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;941        timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;942        if(timeout > 0xffff) {
;;;943          timeout = 0xffff;
;;;944        }
;;;945        dhcp->t1_timeout = (u16_t)timeout;
;;;946        if (dhcp->t1_timeout == 0) {
;;;947          dhcp->t1_timeout = 1;
;;;948        }
;;;949        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;950      }
;;;951      /* set renewal period timer */
;;;952      if (dhcp->offered_t2_rebind != 0xffffffffUL) {
;;;953        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;954        timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;955        if(timeout > 0xffff) {
;;;956          timeout = 0xffff;
;;;957        }
;;;958        dhcp->t2_timeout = (u16_t)timeout;
;;;959        if (dhcp->t2_timeout == 0) {
;;;960          dhcp->t2_timeout = 1;
;;;961        }
;;;962        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;963      }
;;;964    
;;;965      /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
;;;966      if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
;;;967        dhcp->t1_timeout = 0;
;;;968      }
;;;969    
;;;970      if (dhcp->subnet_mask_given) {
;;;971        /* copy offered network mask */
;;;972        ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
;;;973      } else {
;;;974        /* subnet mask not given, choose a safe subnet mask given the network class */
;;;975        u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
;;;976        if (first_octet <= 127) {
;;;977          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
;;;978        } else if (first_octet >= 192) {
;;;979          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
;;;980        } else {
;;;981          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
;;;982        }
;;;983      }
;;;984    
;;;985      ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
;;;986      /* gateway address not given? */
;;;987      if (ip_addr_isany(&gw_addr)) {
;;;988        /* copy network address */
;;;989        ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
;;;990        /* use first host address on network as gateway */
;;;991        ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
;;;992      }
;;;993    
;;;994    #if LWIP_DHCP_AUTOIP_COOP
;;;995      if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;996        autoip_stop(netif);
;;;997        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;998      }
;;;999    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1000   
;;;1001     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
;;;1002       ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;1003     netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
;;;1004     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
;;;1005       ip4_addr_get_u32(&sn_mask)));
;;;1006     netif_set_netmask(netif, &sn_mask);
;;;1007     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
;;;1008       ip4_addr_get_u32(&gw_addr)));
;;;1009     netif_set_gw(netif, &gw_addr);
;;;1010     /* bring the interface up */
;;;1011     netif_set_up(netif);
;;;1012     /* netif is now bound to DHCP leased address */
;;;1013     dhcp_set_state(dhcp, DHCP_BOUND);
;;;1014   }
00001a  bd7c              POP      {r2-r6,pc}
                  |L2.28|
00001c  bf00              NOP                            ;932
00001e  6a34              LDR      r4,[r6,#0x20]         ;933
000020  bf00              NOP                            ;934
000022  b94c              CBNZ     r4,|L2.56|
000024  bf00              NOP                            ;934
000026  a340              ADR      r3,|L2.296|
000028  f24032a6          MOV      r2,#0x3a6             ;934
00002c  a159              ADR      r1,|L2.404|
00002e  a04e              ADR      r0,|L2.360|
000030  f7fffffe          BL       __2printf
000034  bf00              NOP                            ;934
000036  e7f0              B        |L2.26|
                  |L2.56|
000038  bf00              NOP                            ;934
00003a  bf00              NOP                            ;935
00003c  bf00              NOP                            ;935
00003e  6b60              LDR      r0,[r4,#0x34]         ;938
000040  1c40              ADDS     r0,r0,#1              ;938
000042  b190              CBZ      r0,|L2.106|
000044  bf00              NOP                            ;940
000046  bf00              NOP                            ;940
000048  6b60              LDR      r0,[r4,#0x34]         ;941
00004a  301e              ADDS     r0,r0,#0x1e           ;941
00004c  213c              MOVS     r1,#0x3c              ;941
00004e  fbb0f5f1          UDIV     r5,r0,r1              ;941
000052  f5b53f80          CMP      r5,#0x10000           ;942
000056  d301              BCC      |L2.92|
000058  f64f75ff          MOV      r5,#0xffff            ;943
                  |L2.92|
00005c  83a5              STRH     r5,[r4,#0x1c]         ;945
00005e  8ba0              LDRH     r0,[r4,#0x1c]         ;946
000060  b908              CBNZ     r0,|L2.102|
000062  2001              MOVS     r0,#1                 ;947
000064  83a0              STRH     r0,[r4,#0x1c]         ;947
                  |L2.102|
000066  bf00              NOP                            ;949
000068  bf00              NOP                            ;949
                  |L2.106|
00006a  6ba0              LDR      r0,[r4,#0x38]         ;952
00006c  1c40              ADDS     r0,r0,#1              ;952
00006e  b190              CBZ      r0,|L2.150|
000070  bf00              NOP                            ;953
000072  bf00              NOP                            ;953
000074  6ba0              LDR      r0,[r4,#0x38]         ;954
000076  301e              ADDS     r0,r0,#0x1e           ;954
000078  213c              MOVS     r1,#0x3c              ;954
00007a  fbb0f5f1          UDIV     r5,r0,r1              ;954
00007e  f5b53f80          CMP      r5,#0x10000           ;955
000082  d301              BCC      |L2.136|
000084  f64f75ff          MOV      r5,#0xffff            ;956
                  |L2.136|
000088  83e5              STRH     r5,[r4,#0x1e]         ;958
00008a  8be0              LDRH     r0,[r4,#0x1e]         ;959
00008c  b908              CBNZ     r0,|L2.146|
00008e  2001              MOVS     r0,#1                 ;960
000090  83e0              STRH     r0,[r4,#0x1e]         ;960
                  |L2.146|
000092  bf00              NOP                            ;962
000094  bf00              NOP                            ;962
                  |L2.150|
000096  8ba0              LDRH     r0,[r4,#0x1c]         ;966
000098  8be1              LDRH     r1,[r4,#0x1e]         ;966
00009a  4288              CMP      r0,r1                 ;966
00009c  db04              BLT      |L2.168|
00009e  8be0              LDRH     r0,[r4,#0x1e]         ;966
0000a0  2800              CMP      r0,#0                 ;966
0000a2  dd01              BLE      |L2.168|
0000a4  2000              MOVS     r0,#0                 ;967
0000a6  83a0              STRH     r0,[r4,#0x1c]         ;967
                  |L2.168|
0000a8  7ba0              LDRB     r0,[r4,#0xe]          ;970
0000aa  b110              CBZ      r0,|L2.178|
0000ac  6aa0              LDR      r0,[r4,#0x28]         ;972
0000ae  9001              STR      r0,[sp,#4]            ;972
0000b0  e010              B        |L2.212|
                  |L2.178|
0000b2  f8940024          LDRB     r0,[r4,#0x24]         ;975
0000b6  287f              CMP      r0,#0x7f              ;976
0000b8  dc02              BGT      |L2.192|
0000ba  21ff              MOVS     r1,#0xff              ;977
0000bc  9101              STR      r1,[sp,#4]            ;977
0000be  e008              B        |L2.210|
                  |L2.192|
0000c0  28c0              CMP      r0,#0xc0              ;978
0000c2  db03              BLT      |L2.204|
0000c4  f06f417f          MVN      r1,#0xff000000        ;979
0000c8  9101              STR      r1,[sp,#4]            ;979
0000ca  e002              B        |L2.210|
                  |L2.204|
0000cc  f64f71ff          MOV      r1,#0xffff            ;981
0000d0  9101              STR      r1,[sp,#4]            ;981
                  |L2.210|
0000d2  bf00              NOP                            ;983
                  |L2.212|
0000d4  6ae0              LDR      r0,[r4,#0x2c]         ;985
0000d6  9000              STR      r0,[sp,#0]            ;985
0000d8  4668              MOV      r0,sp                 ;987
0000da  b108              CBZ      r0,|L2.224|
0000dc  9800              LDR      r0,[sp,#0]            ;987
0000de  b938              CBNZ     r0,|L2.240|
                  |L2.224|
0000e0  6a60              LDR      r0,[r4,#0x24]         ;989
0000e2  9901              LDR      r1,[sp,#4]            ;989
0000e4  4008              ANDS     r0,r0,r1              ;989
0000e6  9000              STR      r0,[sp,#0]            ;989
0000e8  9800              LDR      r0,[sp,#0]            ;991
0000ea  f0407080          ORR      r0,r0,#0x1000000      ;991
0000ee  9000              STR      r0,[sp,#0]            ;991
                  |L2.240|
0000f0  bf00              NOP                            ;1001
0000f2  bf00              NOP                            ;1001
0000f4  f1040124          ADD      r1,r4,#0x24           ;1003
0000f8  4630              MOV      r0,r6                 ;1003
0000fa  f7fffffe          BL       netif_set_ipaddr
0000fe  bf00              NOP                            ;1004
000100  bf00              NOP                            ;1004
000102  a901              ADD      r1,sp,#4              ;1006
000104  4630              MOV      r0,r6                 ;1006
000106  f7fffffe          BL       netif_set_netmask
00010a  bf00              NOP                            ;1007
00010c  bf00              NOP                            ;1007
00010e  4669              MOV      r1,sp                 ;1009
000110  4630              MOV      r0,r6                 ;1009
000112  f7fffffe          BL       netif_set_gw
000116  4630              MOV      r0,r6                 ;1011
000118  f7fffffe          BL       netif_set_up
00011c  210a              MOVS     r1,#0xa               ;1013
00011e  4620              MOV      r0,r4                 ;1013
000120  f7fffffe          BL       dhcp_set_state
000124  bf00              NOP      
000126  e778              B        |L2.26|
;;;1015   
                          ENDP

                  |L2.296|
000128  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
00012c  5749505c
000130  6c776970
000134  2d312e34
000138  2e315c73
00013c  72635c63
000140  6f72655c
000144  64686370
000148  2e6300  
00014b  00                DCB      0
                  |L2.332|
00014c  64686370          DCB      "dhcp_bind: netif != NULL",0
000150  5f62696e
000154  643a206e
000158  65746966
00015c  20213d20
000160  4e554c4c
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L2.360|
000168  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
00016c  7274696f
000170  6e202225
000174  73222066
000178  61696c65
00017c  64206174
000180  206c696e
000184  65202564
000188  20696e20
00018c  25730d0a
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0
                  |L2.404|
000194  64686370          DCB      "dhcp_bind: dhcp != NULL",0
000198  5f62696e
00019c  643a2064
0001a0  68637020
0001a4  213d204e
0001a8  554c4c00

                          AREA ||i.dhcp_check||, CODE, READONLY, ALIGN=1

                  dhcp_check PROC
;;;224    static void
;;;225    dhcp_check(struct netif *netif)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;226    {
000004  4606              MOV      r6,r0
;;;227      struct dhcp *dhcp = netif->dhcp;
000006  6a34              LDR      r4,[r6,#0x20]
;;;228      err_t result;
;;;229      u16_t msecs;
;;;230      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
000008  bf00              NOP      
00000a  bf00              NOP      
;;;231        (s16_t)netif->name[1]));
;;;232      dhcp_set_state(dhcp, DHCP_CHECKING);
00000c  2108              MOVS     r1,#8
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       dhcp_set_state
;;;233      /* create an ARP query for the offered IP address, expecting that no host
;;;234         responds, as the IP address should not be in use. */
;;;235      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
000014  2200              MOVS     r2,#0
000016  f1040124          ADD      r1,r4,#0x24
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       etharp_query
000020  4605              MOV      r5,r0
;;;236      if (result != ERR_OK) {
000022  b10d              CBZ      r5,|L3.40|
;;;237        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
000024  bf00              NOP      
000026  bf00              NOP      
                  |L3.40|
;;;238      }
;;;239      dhcp->tries++;
000028  7b60              LDRB     r0,[r4,#0xd]
00002a  1c40              ADDS     r0,r0,#1
00002c  7360              STRB     r0,[r4,#0xd]
;;;240      msecs = 500;
00002e  f44f77fa          MOV      r7,#0x1f4
;;;241      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000032  f20710f3          ADD      r0,r7,#0x1f3
000036  4639              MOV      r1,r7
000038  fb90f0f1          SDIV     r0,r0,r1
00003c  8360              STRH     r0,[r4,#0x1a]
;;;242      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
00003e  bf00              NOP      
000040  bf00              NOP      
;;;243    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;244    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP


                          AREA ||i.dhcp_cleanup||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_cleanup PROC
;;;605     */
;;;606    void dhcp_cleanup(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;607    {
000002  4604              MOV      r4,r0
;;;608      LWIP_ASSERT("netif != NULL", netif != NULL);
000004  bf00              NOP      
000006  b944              CBNZ     r4,|L4.26|
000008  bf00              NOP      
00000a  a308              ADR      r3,|L4.44|
00000c  f44f7218          MOV      r2,#0x260
000010  a10f              ADR      r1,|L4.80|
000012  a013              ADR      r0,|L4.96|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
                  |L4.26|
00001a  bf00              NOP      
;;;609    
;;;610      if (netif->dhcp != NULL) {
00001c  6a20              LDR      r0,[r4,#0x20]
00001e  b120              CBZ      r0,|L4.42|
;;;611        mem_free(netif->dhcp);
000020  6a20              LDR      r0,[r4,#0x20]
000022  f7fffffe          BL       mem_free
;;;612        netif->dhcp = NULL;
000026  2000              MOVS     r0,#0
000028  6220              STR      r0,[r4,#0x20]
                  |L4.42|
;;;613      }
;;;614    }
00002a  bd10              POP      {r4,pc}
;;;615    
                          ENDP

                  |L4.44|
00002c  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000030  5749505c
000034  6c776970
000038  2d312e34
00003c  2e315c73
000040  72635c63
000044  6f72655c
000048  64686370
00004c  2e6300  
00004f  00                DCB      0
                  |L4.80|
000050  6e657469          DCB      "netif != NULL",0
000054  6620213d
000058  204e554c
00005c  4c00    
00005e  00                DCB      0
00005f  00                DCB      0
                  |L4.96|
000060  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000064  7274696f
000068  6e202225
00006c  73222066
000070  61696c65
000074  64206174
000078  206c696e
00007c  65202564
000080  20696e20
000084  25730d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.dhcp_coarse_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_coarse_tmr PROC
;;;336    void
;;;337    dhcp_coarse_tmr()
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339      struct netif *netif = netif_list;
000002  4812              LDR      r0,|L5.76|
000004  6804              LDR      r4,[r0,#0]  ; netif_list
;;;340      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;341      /* iterate through all network interfaces */
;;;342      while (netif != NULL) {
00000a  e01b              B        |L5.68|
                  |L5.12|
;;;343        /* only act on DHCP configured interfaces */
;;;344        if (netif->dhcp != NULL) {
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  b1c0              CBZ      r0,|L5.66|
;;;345          /* timer is active (non zero), and triggers (zeroes) now? */
;;;346          if (netif->dhcp->t2_timeout-- == 1) {
000010  6a20              LDR      r0,[r4,#0x20]
000012  8bc1              LDRH     r1,[r0,#0x1e]
000014  1e48              SUBS     r0,r1,#1
000016  6a22              LDR      r2,[r4,#0x20]
000018  83d0              STRH     r0,[r2,#0x1e]
00001a  2901              CMP      r1,#1
00001c  d105              BNE      |L5.42|
;;;347            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
00001e  bf00              NOP      
000020  bf00              NOP      
;;;348            /* this clients' rebind timeout triggered */
;;;349            dhcp_t2_timeout(netif);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       dhcp_t2_timeout
000028  e00b              B        |L5.66|
                  |L5.42|
;;;350          /* timer is active (non zero), and triggers (zeroes) now */
;;;351          } else if (netif->dhcp->t1_timeout-- == 1) {
00002a  6a20              LDR      r0,[r4,#0x20]
00002c  8b81              LDRH     r1,[r0,#0x1c]
00002e  1e48              SUBS     r0,r1,#1
000030  6a22              LDR      r2,[r4,#0x20]
000032  8390              STRH     r0,[r2,#0x1c]
000034  2901              CMP      r1,#1
000036  d104              BNE      |L5.66|
;;;352            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
000038  bf00              NOP      
00003a  bf00              NOP      
;;;353            /* this clients' renewal timeout triggered */
;;;354            dhcp_t1_timeout(netif);
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dhcp_t1_timeout
                  |L5.66|
;;;355          }
;;;356        }
;;;357        /* proceed to next netif */
;;;358        netif = netif->next;
000042  6824              LDR      r4,[r4,#0]
                  |L5.68|
000044  2c00              CMP      r4,#0                 ;342
000046  d1e1              BNE      |L5.12|
;;;359      }
;;;360    }
000048  bd10              POP      {r4,pc}
;;;361    
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      netif_list

                          AREA ||i.dhcp_create_msg||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_create_msg PROC
;;;1640   static err_t
;;;1641   dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1642   {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;1643     u16_t i;
;;;1644   #ifndef DHCP_GLOBAL_XID
;;;1645     /** default global transaction identifier starting value (easy to match
;;;1646      *  with a packet analyser). We simply increment for each new request.
;;;1647      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1648      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1649   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1650     static u32_t xid;
;;;1651   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1652     static u32_t xid = 0xABCD0000;
;;;1653   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1654   #else
;;;1655     if (!xid_initialised) {
;;;1656       xid = DHCP_GLOBAL_XID;
;;;1657       xid_initialised = !xid_initialised;
;;;1658     }
;;;1659   #endif
;;;1660     LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
00000a  bf00              NOP      
00000c  2e00              CMP      r6,#0
00000e  d10c              BNE      |L6.42|
000010  bf00              NOP      
000012  a369              ADR      r3,|L6.440|
000014  f240627c          MOV      r2,#0x67c
000018  a170              ADR      r1,|L6.476|
00001a  a078              ADR      r0,|L6.508|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
000022  f06f000d          MVN      r0,#0xd
                  |L6.38|
;;;1661     LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
;;;1662     LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
;;;1663     LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
;;;1664     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
;;;1665     if (dhcp->p_out == NULL) {
;;;1666       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1667         ("dhcp_create_msg(): could not allocate pbuf\n"));
;;;1668       return ERR_MEM;
;;;1669     }
;;;1670     LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
;;;1671              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1672   
;;;1673     /* reuse transaction identifier in retransmissions */
;;;1674     if (dhcp->tries == 0) {
;;;1675   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1676       xid = LWIP_RAND();
;;;1677   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1678       xid++;
;;;1679   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1680     }
;;;1681     dhcp->xid = xid;
;;;1682     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
;;;1683                 ("transaction id xid(%"X32_F")\n", xid));
;;;1684   
;;;1685     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1686   
;;;1687     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1688     /* TODO: make link layer independent */
;;;1689     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1690     dhcp->msg_out->hlen = netif->hwaddr_len;
;;;1691     dhcp->msg_out->hops = 0;
;;;1692     dhcp->msg_out->xid = htonl(dhcp->xid);
;;;1693     dhcp->msg_out->secs = 0;
;;;1694     /* we don't need the broadcast flag since we can receive unicast traffic
;;;1695        before being fully configured! */
;;;1696     dhcp->msg_out->flags = 0;
;;;1697     ip_addr_set_zero(&dhcp->msg_out->ciaddr);
;;;1698     /* set ciaddr to netif->ip_addr based on message_type and state */
;;;1699     if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
;;;1700         ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
;;;1701          ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
;;;1702       ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
;;;1703     }
;;;1704     ip_addr_set_zero(&dhcp->msg_out->yiaddr);
;;;1705     ip_addr_set_zero(&dhcp->msg_out->siaddr);
;;;1706     ip_addr_set_zero(&dhcp->msg_out->giaddr);
;;;1707     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1708       /* copy netif hardware address, pad with zeroes */
;;;1709       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1710     }
;;;1711     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1712       dhcp->msg_out->sname[i] = 0;
;;;1713     }
;;;1714     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1715       dhcp->msg_out->file[i] = 0;
;;;1716     }
;;;1717     dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
;;;1718     dhcp->options_out_len = 0;
;;;1719     /* fill options field with an incrementing array (for debugging purposes) */
;;;1720     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1721       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1722     }
;;;1723     /* Add option MESSAGE_TYPE */
;;;1724     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;1725     dhcp_option_byte(dhcp, message_type);
;;;1726     return ERR_OK;
;;;1727   }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L6.42|
00002a  bf00              NOP                            ;1660
00002c  bf00              NOP                            ;1661
00002e  2c00              CMP      r4,#0                 ;1661
000030  d10a              BNE      |L6.72|
000032  bf00              NOP                            ;1661
000034  a360              ADR      r3,|L6.440|
000036  f240627d          MOV      r2,#0x67d             ;1661
00003a  a17b              ADR      r1,|L6.552|
00003c  a06f              ADR      r0,|L6.508|
00003e  f7fffffe          BL       __2printf
000042  bf00              NOP                            ;1661
000044  1fa0              SUBS     r0,r4,#6              ;1661
000046  e7ee              B        |L6.38|
                  |L6.72|
000048  bf00              NOP                            ;1661
00004a  bf00              NOP                            ;1662
00004c  6920              LDR      r0,[r4,#0x10]         ;1662
00004e  2800              CMP      r0,#0                 ;1662
000050  d008              BEQ      |L6.100|
000052  bf00              NOP                            ;1662
000054  a358              ADR      r3,|L6.440|
000056  f240627e          MOV      r2,#0x67e             ;1662
00005a  a17b              ADR      r1,|L6.584|
00005c  a067              ADR      r0,|L6.508|
00005e  f7fffffe          BL       __2printf
000062  bf00              NOP                            ;1662
                  |L6.100|
000064  bf00              NOP                            ;1662
000066  bf00              NOP                            ;1663
000068  6960              LDR      r0,[r4,#0x14]         ;1663
00006a  2800              CMP      r0,#0                 ;1663
00006c  d008              BEQ      |L6.128|
00006e  bf00              NOP                            ;1663
000070  a351              ADR      r3,|L6.440|
000072  f240627f          MOV      r2,#0x67f             ;1663
000076  a17e              ADR      r1,|L6.624|
000078  a060              ADR      r0,|L6.508|
00007a  f7fffffe          BL       __2printf
00007e  bf00              NOP                            ;1663
                  |L6.128|
000080  bf00              NOP                            ;1663
000082  2200              MOVS     r2,#0                 ;1664
000084  f44f719a          MOV      r1,#0x134             ;1664
000088  4610              MOV      r0,r2                 ;1664
00008a  f7fffffe          BL       pbuf_alloc
00008e  6120              STR      r0,[r4,#0x10]         ;1664
000090  6920              LDR      r0,[r4,#0x10]         ;1665
000092  b920              CBNZ     r0,|L6.158|
000094  bf00              NOP                            ;1666
000096  bf00              NOP                            ;1666
000098  f04f30ff          MOV      r0,#0xffffffff        ;1668
00009c  e7c3              B        |L6.38|
                  |L6.158|
00009e  bf00              NOP                            ;1670
0000a0  6920              LDR      r0,[r4,#0x10]         ;1670
0000a2  8940              LDRH     r0,[r0,#0xa]          ;1670
0000a4  f5b07f9a          CMP      r0,#0x134             ;1670
0000a8  d208              BCS      |L6.188|
0000aa  bf00              NOP                            ;1670
0000ac  a342              ADR      r3,|L6.440|
0000ae  f2406286          MOV      r2,#0x686             ;1670
0000b2  a179              ADR      r1,|L6.664|
0000b4  a051              ADR      r0,|L6.508|
0000b6  f7fffffe          BL       __2printf
0000ba  bf00              NOP                            ;1670
                  |L6.188|
0000bc  bf00              NOP                            ;1670
0000be  7b60              LDRB     r0,[r4,#0xd]          ;1674
0000c0  b920              CBNZ     r0,|L6.204|
0000c2  4885              LDR      r0,|L6.728|
0000c4  6800              LDR      r0,[r0,#0]            ;1678  ; xid
0000c6  1c40              ADDS     r0,r0,#1              ;1678
0000c8  4983              LDR      r1,|L6.728|
0000ca  6008              STR      r0,[r1,#0]            ;1678  ; xid
                  |L6.204|
0000cc  4882              LDR      r0,|L6.728|
0000ce  6800              LDR      r0,[r0,#0]            ;1681  ; xid
0000d0  6020              STR      r0,[r4,#0]            ;1681
0000d2  bf00              NOP                            ;1682
0000d4  bf00              NOP                            ;1682
0000d6  6920              LDR      r0,[r4,#0x10]         ;1685
0000d8  6840              LDR      r0,[r0,#4]            ;1685
0000da  6160              STR      r0,[r4,#0x14]         ;1685
0000dc  2001              MOVS     r0,#1                 ;1687
0000de  6961              LDR      r1,[r4,#0x14]         ;1687
0000e0  7008              STRB     r0,[r1,#0]            ;1687
0000e2  6961              LDR      r1,[r4,#0x14]         ;1689
0000e4  7048              STRB     r0,[r1,#1]            ;1689
0000e6  f8960026          LDRB     r0,[r6,#0x26]         ;1690
0000ea  6961              LDR      r1,[r4,#0x14]         ;1690
0000ec  7088              STRB     r0,[r1,#2]            ;1690
0000ee  2000              MOVS     r0,#0                 ;1691
0000f0  6961              LDR      r1,[r4,#0x14]         ;1691
0000f2  70c8              STRB     r0,[r1,#3]            ;1691
0000f4  6820              LDR      r0,[r4,#0]            ;1692
0000f6  f7fffffe          BL       lwip_htonl
0000fa  6961              LDR      r1,[r4,#0x14]         ;1692
0000fc  6048              STR      r0,[r1,#4]            ;1692
0000fe  2000              MOVS     r0,#0                 ;1693
000100  6961              LDR      r1,[r4,#0x14]         ;1693
000102  8108              STRH     r0,[r1,#8]            ;1693
000104  6961              LDR      r1,[r4,#0x14]         ;1696
000106  8148              STRH     r0,[r1,#0xa]          ;1696
000108  6961              LDR      r1,[r4,#0x14]         ;1697
00010a  60c8              STR      r0,[r1,#0xc]          ;1697
00010c  2f08              CMP      r7,#8                 ;1699
00010e  d009              BEQ      |L6.292|
000110  2f04              CMP      r7,#4                 ;1699
000112  d007              BEQ      |L6.292|
000114  2f03              CMP      r7,#3                 ;1700
000116  d108              BNE      |L6.298|
000118  7b20              LDRB     r0,[r4,#0xc]          ;1701
00011a  2805              CMP      r0,#5                 ;1701
00011c  d002              BEQ      |L6.292|
00011e  7b20              LDRB     r0,[r4,#0xc]          ;1701
000120  2804              CMP      r0,#4                 ;1701
000122  d102              BNE      |L6.298|
                  |L6.292|
000124  6870              LDR      r0,[r6,#4]            ;1702
000126  6961              LDR      r1,[r4,#0x14]         ;1702
000128  60c8              STR      r0,[r1,#0xc]          ;1702
                  |L6.298|
00012a  2000              MOVS     r0,#0                 ;1704
00012c  6961              LDR      r1,[r4,#0x14]         ;1704
00012e  6108              STR      r0,[r1,#0x10]         ;1704
000130  6961              LDR      r1,[r4,#0x14]         ;1705
000132  6148              STR      r0,[r1,#0x14]         ;1705
000134  6961              LDR      r1,[r4,#0x14]         ;1706
000136  6188              STR      r0,[r1,#0x18]         ;1706
000138  2500              MOVS     r5,#0                 ;1707
00013a  e00d              B        |L6.344|
                  |L6.316|
00013c  f8960026          LDRB     r0,[r6,#0x26]         ;1709
000140  42a8              CMP      r0,r5                 ;1709
000142  dd03              BLE      |L6.332|
000144  f1060027          ADD      r0,r6,#0x27           ;1709
000148  5d40              LDRB     r0,[r0,r5]            ;1709
00014a  e000              B        |L6.334|
                  |L6.332|
00014c  2000              MOVS     r0,#0                 ;1709
                  |L6.334|
00014e  6961              LDR      r1,[r4,#0x14]         ;1709
000150  311c              ADDS     r1,r1,#0x1c           ;1709
000152  5548              STRB     r0,[r1,r5]            ;1709
000154  1c68              ADDS     r0,r5,#1              ;1707
000156  b285              UXTH     r5,r0                 ;1707
                  |L6.344|
000158  2d10              CMP      r5,#0x10              ;1707
00015a  d3ef              BCC      |L6.316|
00015c  2500              MOVS     r5,#0                 ;1711
00015e  e005              B        |L6.364|
                  |L6.352|
000160  2100              MOVS     r1,#0                 ;1712
000162  6960              LDR      r0,[r4,#0x14]         ;1712
000164  302c              ADDS     r0,r0,#0x2c           ;1712
000166  5541              STRB     r1,[r0,r5]            ;1712
000168  1c68              ADDS     r0,r5,#1              ;1711
00016a  b285              UXTH     r5,r0                 ;1711
                  |L6.364|
00016c  2d40              CMP      r5,#0x40              ;1711
00016e  d3f7              BCC      |L6.352|
000170  2500              MOVS     r5,#0                 ;1714
000172  e005              B        |L6.384|
                  |L6.372|
000174  2100              MOVS     r1,#0                 ;1715
000176  6960              LDR      r0,[r4,#0x14]         ;1715
000178  306c              ADDS     r0,r0,#0x6c           ;1715
00017a  5541              STRB     r1,[r0,r5]            ;1715
00017c  1c68              ADDS     r0,r5,#1              ;1714
00017e  b285              UXTH     r5,r0                 ;1714
                  |L6.384|
000180  2d80              CMP      r5,#0x80              ;1714
000182  d3f7              BCC      |L6.372|
000184  4855              LDR      r0,|L6.732|
000186  6961              LDR      r1,[r4,#0x14]         ;1717
000188  f8c100ec          STR      r0,[r1,#0xec]         ;1717
00018c  2000              MOVS     r0,#0                 ;1718
00018e  8320              STRH     r0,[r4,#0x18]         ;1718
000190  2500              MOVS     r5,#0                 ;1720
000192  e004              B        |L6.414|
                  |L6.404|
000194  6960              LDR      r0,[r4,#0x14]         ;1721
000196  30f0              ADDS     r0,r0,#0xf0           ;1721
000198  5545              STRB     r5,[r0,r5]            ;1721
00019a  1c68              ADDS     r0,r5,#1              ;1720
00019c  b285              UXTH     r5,r0                 ;1720
                  |L6.414|
00019e  2d44              CMP      r5,#0x44              ;1720
0001a0  d3f8              BCC      |L6.404|
0001a2  2201              MOVS     r2,#1                 ;1724
0001a4  2135              MOVS     r1,#0x35              ;1724
0001a6  4620              MOV      r0,r4                 ;1724
0001a8  f7fffffe          BL       dhcp_option
0001ac  4639              MOV      r1,r7                 ;1725
0001ae  4620              MOV      r0,r4                 ;1725
0001b0  f7fffffe          BL       dhcp_option_byte
0001b4  2000              MOVS     r0,#0                 ;1726
0001b6  e736              B        |L6.38|
;;;1728   
                          ENDP

                  |L6.440|
0001b8  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
0001bc  5749505c
0001c0  6c776970
0001c4  2d312e34
0001c8  2e315c73
0001cc  72635c63
0001d0  6f72655c
0001d4  64686370
0001d8  2e6300  
0001db  00                DCB      0
                  |L6.476|
0001dc  64686370          DCB      "dhcp_create_msg: netif != NULL",0
0001e0  5f637265
0001e4  6174655f
0001e8  6d73673a
0001ec  206e6574
0001f0  69662021
0001f4  3d204e55
0001f8  4c4c00  
0001fb  00                DCB      0
                  |L6.508|
0001fc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000200  7274696f
000204  6e202225
000208  73222066
00020c  61696c65
000210  64206174
000214  206c696e
000218  65202564
00021c  20696e20
000220  25730d0a
000224  00      
000225  00                DCB      0
000226  00                DCB      0
000227  00                DCB      0
                  |L6.552|
000228  64686370          DCB      "dhcp_create_msg: dhcp != NULL",0
00022c  5f637265
000230  6174655f
000234  6d73673a
000238  20646863
00023c  7020213d
000240  204e554c
000244  4c00    
000246  00                DCB      0
000247  00                DCB      0
                  |L6.584|
000248  64686370          DCB      "dhcp_create_msg: dhcp->p_out == NULL",0
00024c  5f637265
000250  6174655f
000254  6d73673a
000258  20646863
00025c  702d3e70
000260  5f6f7574
000264  203d3d20
000268  4e554c4c
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L6.624|
000270  64686370          DCB      "dhcp_create_msg: dhcp->msg_out == NULL",0
000274  5f637265
000278  6174655f
00027c  6d73673a
000280  20646863
000284  702d3e6d
000288  73675f6f
00028c  7574203d
000290  3d204e55
000294  4c4c00  
000297  00                DCB      0
                  |L6.664|
000298  64686370          DCB      "dhcp_create_msg: check that first pbuf can hold struct "
00029c  5f637265
0002a0  6174655f
0002a4  6d73673a
0002a8  20636865
0002ac  636b2074
0002b0  68617420
0002b4  66697273
0002b8  74207062
0002bc  75662063
0002c0  616e2068
0002c4  6f6c6420
0002c8  73747275
0002cc  637420  
0002cf  64686370          DCB      "dhcp_msg",0
0002d3  5f6d7367
0002d7  00      
                  |L6.728|
                          DCD      xid
                  |L6.732|
                          DCD      0x63538263

                          AREA ||i.dhcp_decline||, CODE, READONLY, ALIGN=2

                  dhcp_decline PROC
;;;831    static err_t
;;;832    dhcp_decline(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;833    {
000004  4605              MOV      r5,r0
;;;834      struct dhcp *dhcp = netif->dhcp;
000006  6a2c              LDR      r4,[r5,#0x20]
;;;835      err_t result = ERR_OK;
000008  2600              MOVS     r6,#0
;;;836      u16_t msecs;
;;;837      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
00000a  bf00              NOP      
00000c  bf00              NOP      
;;;838      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
00000e  210c              MOVS     r1,#0xc
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       dhcp_set_state
;;;839      /* create and initialize the DHCP message header */
;;;840      result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
000016  2204              MOVS     r2,#4
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       dhcp_create_msg
000020  4606              MOV      r6,r0
;;;841      if (result == ERR_OK) {
000022  bb0e              CBNZ     r6,|L7.104|
;;;842        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000024  2204              MOVS     r2,#4
000026  2132              MOVS     r1,#0x32
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option
;;;843        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
00002e  6a60              LDR      r0,[r4,#0x24]
000030  f7fffffe          BL       lwip_ntohl
000034  4680              MOV      r8,r0
000036  4641              MOV      r1,r8
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       dhcp_option_long
;;;844    
;;;845        dhcp_option_trailer(dhcp);
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       dhcp_option_trailer
;;;846        /* resize pbuf to reflect true size of options */
;;;847        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000044  8b22              LDRH     r2,[r4,#0x18]
000046  32f0              ADDS     r2,r2,#0xf0
000048  b291              UXTH     r1,r2
00004a  6920              LDR      r0,[r4,#0x10]
00004c  f7fffffe          BL       pbuf_realloc
;;;848    
;;;849        /* per section 4.4.4, broadcast DECLINE messages */
;;;850        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000050  9500              STR      r5,[sp,#0]
000052  2343              MOVS     r3,#0x43
000054  4a0e              LDR      r2,|L7.144|
000056  6921              LDR      r1,[r4,#0x10]
000058  6860              LDR      r0,[r4,#4]
00005a  f7fffffe          BL       udp_sendto_if
;;;851        dhcp_delete_msg(dhcp);
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       dhcp_delete_msg
;;;852        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
000064  bf00              NOP      
000066  e001              B        |L7.108|
                  |L7.104|
;;;853      } else {
;;;854        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
000068  bf00              NOP      
00006a  bf00              NOP      
                  |L7.108|
;;;855          ("dhcp_decline: could not allocate DHCP request\n"));
;;;856      }
;;;857      dhcp->tries++;
00006c  7b60              LDRB     r0,[r4,#0xd]
00006e  1c40              ADDS     r0,r0,#1
000070  7360              STRB     r0,[r4,#0xd]
;;;858      msecs = 10*1000;
000072  f2427710          MOV      r7,#0x2710
;;;859      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000076  f20710f3          ADD      r0,r7,#0x1f3
00007a  f44f71fa          MOV      r1,#0x1f4
00007e  fb90f0f1          SDIV     r0,r0,r1
000082  8360              STRH     r0,[r4,#0x1a]
;;;860      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
000084  bf00              NOP      
000086  bf00              NOP      
;;;861      return result;
000088  4630              MOV      r0,r6
;;;862    }
00008a  e8bd83f8          POP      {r3-r9,pc}
;;;863    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

00008e  0000              DCW      0x0000
                  |L7.144|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_delete_msg||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_delete_msg PROC
;;;1734   static void
;;;1735   dhcp_delete_msg(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1736   {
000002  4604              MOV      r4,r0
;;;1737     LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
000004  bf00              NOP      
000006  2c00              CMP      r4,#0
000008  d109              BNE      |L8.30|
00000a  bf00              NOP      
00000c  a317              ADR      r3,|L8.108|
00000e  f24062c9          MOV      r2,#0x6c9
000012  a11f              ADR      r1,|L8.144|
000014  a026              ADR      r0,|L8.176|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L8.28|
;;;1738     LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
;;;1739     LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
;;;1740     if (dhcp->p_out != NULL) {
;;;1741       pbuf_free(dhcp->p_out);
;;;1742     }
;;;1743     dhcp->p_out = NULL;
;;;1744     dhcp->msg_out = NULL;
;;;1745   }
00001c  bd10              POP      {r4,pc}
                  |L8.30|
00001e  bf00              NOP                            ;1737
000020  bf00              NOP                            ;1738
000022  6920              LDR      r0,[r4,#0x10]         ;1738
000024  2800              CMP      r0,#0                 ;1738
000026  d108              BNE      |L8.58|
000028  bf00              NOP                            ;1738
00002a  a310              ADR      r3,|L8.108|
00002c  f24062ca          MOV      r2,#0x6ca             ;1738
000030  a12a              ADR      r1,|L8.220|
000032  a01f              ADR      r0,|L8.176|
000034  f7fffffe          BL       __2printf
000038  bf00              NOP                            ;1738
                  |L8.58|
00003a  bf00              NOP                            ;1738
00003c  bf00              NOP                            ;1739
00003e  6960              LDR      r0,[r4,#0x14]         ;1739
000040  2800              CMP      r0,#0                 ;1739
000042  d108              BNE      |L8.86|
000044  bf00              NOP                            ;1739
000046  a309              ADR      r3,|L8.108|
000048  f24062cb          MOV      r2,#0x6cb             ;1739
00004c  a12d              ADR      r1,|L8.260|
00004e  a018              ADR      r0,|L8.176|
000050  f7fffffe          BL       __2printf
000054  bf00              NOP                            ;1739
                  |L8.86|
000056  bf00              NOP                            ;1739
000058  6920              LDR      r0,[r4,#0x10]         ;1740
00005a  b110              CBZ      r0,|L8.98|
00005c  6920              LDR      r0,[r4,#0x10]         ;1741
00005e  f7fffffe          BL       pbuf_free
                  |L8.98|
000062  2000              MOVS     r0,#0                 ;1743
000064  6120              STR      r0,[r4,#0x10]         ;1743
000066  6160              STR      r0,[r4,#0x14]         ;1744
000068  bf00              NOP      
00006a  e7d7              B        |L8.28|
;;;1746   
                          ENDP

                  |L8.108|
00006c  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000070  5749505c
000074  6c776970
000078  2d312e34
00007c  2e315c73
000080  72635c63
000084  6f72655c
000088  64686370
00008c  2e6300  
00008f  00                DCB      0
                  |L8.144|
000090  64686370          DCB      "dhcp_delete_msg: dhcp != NULL",0
000094  5f64656c
000098  6574655f
00009c  6d73673a
0000a0  20646863
0000a4  7020213d
0000a8  204e554c
0000ac  4c00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L8.176|
0000b0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000b4  7274696f
0000b8  6e202225
0000bc  73222066
0000c0  61696c65
0000c4  64206174
0000c8  206c696e
0000cc  65202564
0000d0  20696e20
0000d4  25730d0a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L8.220|
0000dc  64686370          DCB      "dhcp_delete_msg: dhcp->p_out != NULL",0
0000e0  5f64656c
0000e4  6574655f
0000e8  6d73673a
0000ec  20646863
0000f0  702d3e70
0000f4  5f6f7574
0000f8  20213d20
0000fc  4e554c4c
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L8.260|
000104  64686370          DCB      "dhcp_delete_msg: dhcp->msg_out != NULL",0
000108  5f64656c
00010c  6574655f
000110  6d73673a
000114  20646863
000118  702d3e6d
00011c  73675f6f
000120  75742021
000124  3d204e55
000128  4c4c00  
00012b  00                DCB      0

                          AREA ||i.dhcp_discover||, CODE, READONLY, ALIGN=2

                  dhcp_discover PROC
;;;871    static err_t
;;;872    dhcp_discover(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;873    {
000002  4605              MOV      r5,r0
;;;874      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;875      err_t result = ERR_OK;
000006  2600              MOVS     r6,#0
;;;876      u16_t msecs;
;;;877      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
000008  bf00              NOP      
00000a  bf00              NOP      
;;;878      ip_addr_set_any(&dhcp->offered_ip_addr);
00000c  2000              MOVS     r0,#0
00000e  6260              STR      r0,[r4,#0x24]
;;;879      dhcp_set_state(dhcp, DHCP_SELECTING);
000010  2106              MOVS     r1,#6
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       dhcp_set_state
;;;880      /* create and initialize the DHCP message header */
;;;881      result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
000018  2201              MOVS     r2,#1
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       dhcp_create_msg
000022  4606              MOV      r6,r0
;;;882      if (result == ERR_OK) {
000024  2e00              CMP      r6,#0
000026  d13a              BNE      |L9.158|
;;;883        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
000028  bf00              NOP      
00002a  bf00              NOP      
;;;884    
;;;885        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00002c  2202              MOVS     r2,#2
00002e  2139              MOVS     r1,#0x39
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option
;;;886        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000036  8ca9              LDRH     r1,[r5,#0x24]
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       dhcp_option_short
;;;887    
;;;888        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
00003e  2204              MOVS     r2,#4
000040  2137              MOVS     r1,#0x37
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dhcp_option
;;;889        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
000048  2101              MOVS     r1,#1
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       dhcp_option_byte
;;;890        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000050  2103              MOVS     r1,#3
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_option_byte
;;;891        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000058  211c              MOVS     r1,#0x1c
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       dhcp_option_byte
;;;892        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000060  2106              MOVS     r1,#6
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       dhcp_option_byte
;;;893    
;;;894        dhcp_option_trailer(dhcp);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       dhcp_option_trailer
;;;895    
;;;896        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
00006e  bf00              NOP      
000070  bf00              NOP      
;;;897        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000072  8b22              LDRH     r2,[r4,#0x18]
000074  32f0              ADDS     r2,r2,#0xf0
000076  b291              UXTH     r1,r2
000078  6920              LDR      r0,[r4,#0x10]
00007a  f7fffffe          BL       pbuf_realloc
;;;898    
;;;899        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
00007e  bf00              NOP      
000080  bf00              NOP      
;;;900        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000082  9500              STR      r5,[sp,#0]
000084  2343              MOVS     r3,#0x43
000086  4a16              LDR      r2,|L9.224|
000088  6921              LDR      r1,[r4,#0x10]
00008a  6860              LDR      r0,[r4,#4]
00008c  f7fffffe          BL       udp_sendto_if
;;;901        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
000090  bf00              NOP      
000092  bf00              NOP      
;;;902        dhcp_delete_msg(dhcp);
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       dhcp_delete_msg
;;;903        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
00009a  bf00              NOP      
00009c  e001              B        |L9.162|
                  |L9.158|
;;;904      } else {
;;;905        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
00009e  bf00              NOP      
0000a0  bf00              NOP      
                  |L9.162|
;;;906      }
;;;907      dhcp->tries++;
0000a2  7b60              LDRB     r0,[r4,#0xd]
0000a4  1c40              ADDS     r0,r0,#1
0000a6  7360              STRB     r0,[r4,#0xd]
;;;908    #if LWIP_DHCP_AUTOIP_COOP
;;;909      if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;910        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;911        autoip_start(netif);
;;;912      }
;;;913    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;914      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000a8  7b60              LDRB     r0,[r4,#0xd]
0000aa  2806              CMP      r0,#6
0000ac  da03              BGE      |L9.182|
0000ae  7b61              LDRB     r1,[r4,#0xd]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  e000              B        |L9.184|
                  |L9.182|
0000b6  203c              MOVS     r0,#0x3c
                  |L9.184|
0000b8  eb000140          ADD      r1,r0,r0,LSL #1
0000bc  ebc110c0          RSB      r0,r1,r0,LSL #7
0000c0  f64f71ff          MOV      r1,#0xffff
0000c4  ea0107c0          AND      r7,r1,r0,LSL #3
;;;915      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000c8  f20710f3          ADD      r0,r7,#0x1f3
0000cc  f44f71fa          MOV      r1,#0x1f4
0000d0  fb90f0f1          SDIV     r0,r0,r1
0000d4  8360              STRH     r0,[r4,#0x1a]
;;;916      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
0000d6  bf00              NOP      
0000d8  bf00              NOP      
;;;917      return result;
0000da  4630              MOV      r0,r6
;;;918    }
0000dc  bdf8              POP      {r3-r7,pc}
;;;919    
                          ENDP

0000de  0000              DCW      0x0000
                  |L9.224|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_fine_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_fine_tmr PROC
;;;368    void
;;;369    dhcp_fine_tmr()
000000  b510              PUSH     {r4,lr}
;;;370    {
;;;371      struct netif *netif = netif_list;
000002  4810              LDR      r0,|L10.68|
000004  6804              LDR      r4,[r0,#0]  ; netif_list
;;;372      /* loop through netif's */
;;;373      while (netif != NULL) {
000006  e01a              B        |L10.62|
                  |L10.8|
;;;374        /* only act on DHCP configured interfaces */
;;;375        if (netif->dhcp != NULL) {
000008  6a20              LDR      r0,[r4,#0x20]
00000a  b1b8              CBZ      r0,|L10.60|
;;;376          /* timer is active (non zero), and is about to trigger now */      
;;;377          if (netif->dhcp->request_timeout > 1) {
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  8b40              LDRH     r0,[r0,#0x1a]
000010  2801              CMP      r0,#1
000012  dd05              BLE      |L10.32|
;;;378            netif->dhcp->request_timeout--;
000014  6a20              LDR      r0,[r4,#0x20]
000016  8b40              LDRH     r0,[r0,#0x1a]
000018  1e40              SUBS     r0,r0,#1
00001a  6a21              LDR      r1,[r4,#0x20]
00001c  8348              STRH     r0,[r1,#0x1a]
00001e  e00d              B        |L10.60|
                  |L10.32|
;;;379          }
;;;380          else if (netif->dhcp->request_timeout == 1) {
000020  6a20              LDR      r0,[r4,#0x20]
000022  8b40              LDRH     r0,[r0,#0x1a]
000024  2801              CMP      r0,#1
000026  d109              BNE      |L10.60|
;;;381            netif->dhcp->request_timeout--;
000028  6a20              LDR      r0,[r4,#0x20]
00002a  8b40              LDRH     r0,[r0,#0x1a]
00002c  1e40              SUBS     r0,r0,#1
00002e  6a21              LDR      r1,[r4,#0x20]
000030  8348              STRH     r0,[r1,#0x1a]
;;;382            /* { netif->dhcp->request_timeout == 0 } */
;;;383            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
000032  bf00              NOP      
000034  bf00              NOP      
;;;384            /* this client's request timeout triggered */
;;;385            dhcp_timeout(netif);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       dhcp_timeout
                  |L10.60|
;;;386          }
;;;387        }
;;;388        /* proceed to next network interface */
;;;389        netif = netif->next;
00003c  6824              LDR      r4,[r4,#0]
                  |L10.62|
00003e  2c00              CMP      r4,#0                 ;373
000040  d1e2              BNE      |L10.8|
;;;390      }
;;;391    }
000042  bd10              POP      {r4,pc}
;;;392    
                          ENDP

                  |L10.68|
                          DCD      netif_list

                          AREA ||i.dhcp_handle_ack||, CODE, READONLY, ALIGN=2

                  dhcp_handle_ack PROC
;;;507    static void
;;;508    dhcp_handle_ack(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;509    {
000002  4605              MOV      r5,r0
;;;510      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;511    #if LWIP_DNS
;;;512      u8_t n;
;;;513    #endif /* LWIP_DNS */
;;;514    
;;;515      /* clear options we might not get from the ACK */
;;;516      ip_addr_set_zero(&dhcp->offered_sn_mask);
000006  2000              MOVS     r0,#0
000008  62a0              STR      r0,[r4,#0x28]
;;;517      ip_addr_set_zero(&dhcp->offered_gw_addr);
00000a  62e0              STR      r0,[r4,#0x2c]
;;;518    #if LWIP_DHCP_BOOTP_FILE
;;;519      ip_addr_set_zero(&dhcp->offered_si_addr);
;;;520    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;521    
;;;522      /* lease time given? */
;;;523      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
00000c  4818              LDR      r0,|L11.112|
00000e  78c0              LDRB     r0,[r0,#3]  ; dhcp_rx_options_given
000010  b110              CBZ      r0,|L11.24|
;;;524        /* remember offered lease time */
;;;525        dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
000012  4818              LDR      r0,|L11.116|
000014  68c0              LDR      r0,[r0,#0xc]  ; dhcp_rx_options_val
000016  6320              STR      r0,[r4,#0x30]
                  |L11.24|
;;;526      }
;;;527      /* renewal period given? */
;;;528      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
000018  4815              LDR      r0,|L11.112|
00001a  7900              LDRB     r0,[r0,#4]  ; dhcp_rx_options_given
00001c  b118              CBZ      r0,|L11.38|
;;;529        /* remember given renewal period */
;;;530        dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
00001e  4815              LDR      r0,|L11.116|
000020  6900              LDR      r0,[r0,#0x10]  ; dhcp_rx_options_val
000022  6360              STR      r0,[r4,#0x34]
000024  e002              B        |L11.44|
                  |L11.38|
;;;531      } else {
;;;532        /* calculate safe periods for renewal */
;;;533        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
000026  6b20              LDR      r0,[r4,#0x30]
000028  0840              LSRS     r0,r0,#1
00002a  6360              STR      r0,[r4,#0x34]
                  |L11.44|
;;;534      }
;;;535    
;;;536      /* renewal period given? */
;;;537      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
00002c  4810              LDR      r0,|L11.112|
00002e  7940              LDRB     r0,[r0,#5]  ; dhcp_rx_options_given
000030  b118              CBZ      r0,|L11.58|
;;;538        /* remember given rebind period */
;;;539        dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
000032  4810              LDR      r0,|L11.116|
000034  6940              LDR      r0,[r0,#0x14]  ; dhcp_rx_options_val
000036  63a0              STR      r0,[r4,#0x38]
000038  e001              B        |L11.62|
                  |L11.58|
;;;540      } else {
;;;541        /* calculate safe periods for rebinding */
;;;542        dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
00003a  6b20              LDR      r0,[r4,#0x30]
00003c  63a0              STR      r0,[r4,#0x38]
                  |L11.62|
;;;543      }
;;;544    
;;;545      /* (y)our internet address */
;;;546      ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
00003e  68a0              LDR      r0,[r4,#8]
000040  6900              LDR      r0,[r0,#0x10]
000042  6260              STR      r0,[r4,#0x24]
;;;547    
;;;548    #if LWIP_DHCP_BOOTP_FILE
;;;549      /* copy boot server address,
;;;550         boot file name copied in dhcp_parse_reply if not overloaded */
;;;551      ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
;;;552    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;553    
;;;554      /* subnet mask given? */
;;;555      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
000044  480a              LDR      r0,|L11.112|
000046  7980              LDRB     r0,[r0,#6]  ; dhcp_rx_options_given
000048  b138              CBZ      r0,|L11.90|
;;;556        /* remember given subnet mask */
;;;557        ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
00004a  490a              LDR      r1,|L11.116|
00004c  6988              LDR      r0,[r1,#0x18]  ; dhcp_rx_options_val
00004e  f7fffffe          BL       lwip_htonl
000052  62a0              STR      r0,[r4,#0x28]
;;;558        dhcp->subnet_mask_given = 1;
000054  2001              MOVS     r0,#1
000056  73a0              STRB     r0,[r4,#0xe]
000058  e001              B        |L11.94|
                  |L11.90|
;;;559      } else {
;;;560        dhcp->subnet_mask_given = 0;
00005a  2000              MOVS     r0,#0
00005c  73a0              STRB     r0,[r4,#0xe]
                  |L11.94|
;;;561      }
;;;562    
;;;563      /* gateway router */
;;;564      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
00005e  4804              LDR      r0,|L11.112|
000060  79c0              LDRB     r0,[r0,#7]  ; dhcp_rx_options_given
000062  b120              CBZ      r0,|L11.110|
;;;565        ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
000064  4903              LDR      r1,|L11.116|
000066  69c8              LDR      r0,[r1,#0x1c]  ; dhcp_rx_options_val
000068  f7fffffe          BL       lwip_htonl
00006c  62e0              STR      r0,[r4,#0x2c]
                  |L11.110|
;;;566      }
;;;567      
;;;568    #if LWIP_DNS
;;;569      /* DNS servers */
;;;570      n = 0;
;;;571      while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
;;;572        ip_addr_t dns_addr;
;;;573        ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
;;;574        dns_setserver(n, &dns_addr);
;;;575        n++;
;;;576      }
;;;577    #endif /* LWIP_DNS */
;;;578    }
00006e  bd70              POP      {r4-r6,pc}
;;;579    
                          ENDP

                  |L11.112|
                          DCD      dhcp_rx_options_given
                  |L11.116|
                          DCD      dhcp_rx_options_val

                          AREA ||i.dhcp_handle_nak||, CODE, READONLY, ALIGN=2

                  dhcp_handle_nak PROC
;;;196    static void
;;;197    dhcp_handle_nak(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
000002  4604              MOV      r4,r0
;;;199      struct dhcp *dhcp = netif->dhcp;
000004  6a25              LDR      r5,[r4,#0x20]
;;;200      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
000006  bf00              NOP      
000008  bf00              NOP      
;;;201        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;202      /* Set the interface down since the address must no longer be used, as per RFC2131 */
;;;203      netif_set_down(netif);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       netif_set_down
;;;204      /* remove IP address from interface */
;;;205      netif_set_ipaddr(netif, IP_ADDR_ANY);
000010  4909              LDR      r1,|L12.56|
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       netif_set_ipaddr
;;;206      netif_set_gw(netif, IP_ADDR_ANY);
000018  4907              LDR      r1,|L12.56|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       netif_set_gw
;;;207      netif_set_netmask(netif, IP_ADDR_ANY); 
000020  4905              LDR      r1,|L12.56|
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       netif_set_netmask
;;;208      /* Change to a defined state */
;;;209      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
000028  210c              MOVS     r1,#0xc
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       dhcp_set_state
;;;210      /* We can immediately restart discovery */
;;;211      dhcp_discover(netif);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_discover
;;;212    }
000036  bd70              POP      {r4-r6,pc}
;;;213    
                          ENDP

                  |L12.56|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_handle_offer||, CODE, READONLY, ALIGN=2

                  dhcp_handle_offer PROC
;;;251    static void
;;;252    dhcp_handle_offer(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
000002  4605              MOV      r5,r0
;;;254      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;255      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
000006  bf00              NOP      
000008  bf00              NOP      
;;;256        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;257      /* obtain the server address */
;;;258      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
00000a  480b              LDR      r0,|L13.56|
00000c  7880              LDRB     r0,[r0,#2]  ; dhcp_rx_options_given
00000e  b178              CBZ      r0,|L13.48|
;;;259        ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
000010  490a              LDR      r1,|L13.60|
000012  6888              LDR      r0,[r1,#8]  ; dhcp_rx_options_val
000014  f7fffffe          BL       lwip_htonl
000018  6220              STR      r0,[r4,#0x20]
;;;260        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;261          ip4_addr_get_u32(&dhcp->server_ip_addr)));
;;;262        /* remember offered address */
;;;263        ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
00001e  68a0              LDR      r0,[r4,#8]
000020  6900              LDR      r0,[r0,#0x10]
000022  6260              STR      r0,[r4,#0x24]
;;;264        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
000024  bf00              NOP      
000026  bf00              NOP      
;;;265          ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;266    
;;;267        dhcp_select(netif);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       dhcp_select
00002e  e001              B        |L13.52|
                  |L13.48|
;;;268      } else {
;;;269        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
000030  bf00              NOP      
000032  bf00              NOP      
                  |L13.52|
;;;270          ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
;;;271      }
;;;272    }
000034  bd70              POP      {r4-r6,pc}
;;;273    
                          ENDP

000036  0000              DCW      0x0000
                  |L13.56|
                          DCD      dhcp_rx_options_given
                  |L13.60|
                          DCD      dhcp_rx_options_val

                          AREA ||i.dhcp_inform||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_inform PROC
;;;711    void
;;;712    dhcp_inform(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;713    {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
;;;714      struct dhcp dhcp;
;;;715      err_t result = ERR_OK;
000006  2600              MOVS     r6,#0
;;;716      struct udp_pcb *pcb;
;;;717    
;;;718      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
000008  bf00              NOP      
00000a  b954              CBNZ     r4,|L14.34|
00000c  bf00              NOP      
00000e  a330              ADR      r3,|L14.208|
000010  f24022ce          MOV      r2,#0x2ce
000014  a137              ADR      r1,|L14.244|
000016  a03b              ADR      r0,|L14.260|
000018  f7fffffe          BL       __2printf
00001c  bf00              NOP      
                  |L14.30|
;;;719    
;;;720      memset(&dhcp, 0, sizeof(struct dhcp));
;;;721      dhcp_set_state(&dhcp, DHCP_INFORM);
;;;722    
;;;723      if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
;;;724        /* re-use existing pcb */
;;;725        pcb = netif->dhcp->pcb;
;;;726      } else {
;;;727        pcb = udp_new();
;;;728        if (pcb == NULL) {
;;;729          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
;;;730          return;
;;;731        }
;;;732        dhcp.pcb = pcb;
;;;733        ip_set_option(dhcp.pcb, SOF_BROADCAST);
;;;734        udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;735        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
;;;736      }
;;;737      /* create and initialize the DHCP message header */
;;;738      result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
;;;739      if (result == ERR_OK) {
;;;740        dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;741        dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
;;;742    
;;;743        dhcp_option_trailer(&dhcp);
;;;744    
;;;745        pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
;;;746    
;;;747        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;748        udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;749        dhcp_delete_msg(&dhcp);
;;;750      } else {
;;;751        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
;;;752      }
;;;753    
;;;754      if (dhcp.pcb != NULL) {
;;;755        /* otherwise, the existing pcb was used */
;;;756        udp_remove(dhcp.pcb);
;;;757      }
;;;758    }
00001e  b010              ADD      sp,sp,#0x40
000020  bd70              POP      {r4-r6,pc}
                  |L14.34|
000022  bf00              NOP                            ;718
000024  213c              MOVS     r1,#0x3c              ;720
000026  a801              ADD      r0,sp,#4              ;720
000028  f7fffffe          BL       __aeabi_memclr4
00002c  2108              MOVS     r1,#8                 ;721
00002e  a801              ADD      r0,sp,#4              ;721
000030  f7fffffe          BL       dhcp_set_state
000034  6a20              LDR      r0,[r4,#0x20]         ;723
000036  b128              CBZ      r0,|L14.68|
000038  6a20              LDR      r0,[r4,#0x20]         ;723
00003a  6840              LDR      r0,[r0,#4]            ;723
00003c  b110              CBZ      r0,|L14.68|
00003e  6a20              LDR      r0,[r4,#0x20]         ;725
000040  6845              LDR      r5,[r0,#4]            ;725
000042  e014              B        |L14.110|
                  |L14.68|
000044  f7fffffe          BL       udp_new
000048  4605              MOV      r5,r0                 ;727
00004a  b915              CBNZ     r5,|L14.82|
00004c  bf00              NOP                            ;729
00004e  bf00              NOP                            ;729
000050  e7e5              B        |L14.30|
                  |L14.82|
000052  9502              STR      r5,[sp,#8]            ;732
000054  9802              LDR      r0,[sp,#8]            ;733
000056  7a00              LDRB     r0,[r0,#8]            ;733
000058  f0400020          ORR      r0,r0,#0x20           ;733
00005c  9902              LDR      r1,[sp,#8]            ;733
00005e  7208              STRB     r0,[r1,#8]            ;733
000060  2244              MOVS     r2,#0x44              ;734
000062  4933              LDR      r1,|L14.304|
000064  9802              LDR      r0,[sp,#8]            ;734
000066  f7fffffe          BL       udp_bind
00006a  bf00              NOP                            ;735
00006c  bf00              NOP                            ;735
                  |L14.110|
00006e  2208              MOVS     r2,#8                 ;738
000070  a901              ADD      r1,sp,#4              ;738
000072  4620              MOV      r0,r4                 ;738
000074  f7fffffe          BL       dhcp_create_msg
000078  4606              MOV      r6,r0                 ;738
00007a  b9fe              CBNZ     r6,|L14.188|
00007c  2202              MOVS     r2,#2                 ;740
00007e  2139              MOVS     r1,#0x39              ;740
000080  a801              ADD      r0,sp,#4              ;740
000082  f7fffffe          BL       dhcp_option
000086  8ca1              LDRH     r1,[r4,#0x24]         ;741
000088  a801              ADD      r0,sp,#4              ;741
00008a  f7fffffe          BL       dhcp_option_short
00008e  a801              ADD      r0,sp,#4              ;743
000090  f7fffffe          BL       dhcp_option_trailer
000094  f8bd201c          LDRH     r2,[sp,#0x1c]         ;745
000098  32f0              ADDS     r2,r2,#0xf0           ;745
00009a  b291              UXTH     r1,r2                 ;745
00009c  9805              LDR      r0,[sp,#0x14]         ;745
00009e  f7fffffe          BL       pbuf_realloc
0000a2  bf00              NOP                            ;747
0000a4  bf00              NOP                            ;747
0000a6  9400              STR      r4,[sp,#0]            ;748
0000a8  2343              MOVS     r3,#0x43              ;748
0000aa  4a22              LDR      r2,|L14.308|
0000ac  4628              MOV      r0,r5                 ;748
0000ae  9905              LDR      r1,[sp,#0x14]         ;748
0000b0  f7fffffe          BL       udp_sendto_if
0000b4  a801              ADD      r0,sp,#4              ;749
0000b6  f7fffffe          BL       dhcp_delete_msg
0000ba  e001              B        |L14.192|
                  |L14.188|
0000bc  bf00              NOP                            ;751
0000be  bf00              NOP                            ;751
                  |L14.192|
0000c0  9802              LDR      r0,[sp,#8]            ;754
0000c2  b110              CBZ      r0,|L14.202|
0000c4  9802              LDR      r0,[sp,#8]            ;756
0000c6  f7fffffe          BL       udp_remove
                  |L14.202|
0000ca  bf00              NOP      
0000cc  e7a7              B        |L14.30|
;;;759    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L14.208|
0000d0  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
0000d4  5749505c
0000d8  6c776970
0000dc  2d312e34
0000e0  2e315c73
0000e4  72635c63
0000e8  6f72655c
0000ec  64686370
0000f0  2e6300  
0000f3  00                DCB      0
                  |L14.244|
0000f4  6e657469          DCB      "netif != NULL",0
0000f8  6620213d
0000fc  204e554c
000100  4c00    
000102  00                DCB      0
000103  00                DCB      0
                  |L14.260|
000104  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000108  7274696f
00010c  6e202225
000110  73222066
000114  61696c65
000118  64206174
00011c  206c696e
000120  65202564
000124  20696e20
000128  25730d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L14.304|
                          DCD      ip_addr_any
                  |L14.308|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_network_changed||, CODE, READONLY, ALIGN=1

                  dhcp_network_changed PROC
;;;765    void
;;;766    dhcp_network_changed(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;767    {
000002  4605              MOV      r5,r0
;;;768      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;769      if (!dhcp)
000006  b904              CBNZ     r4,|L15.10|
                  |L15.8|
;;;770        return;
;;;771      switch (dhcp->state) {
;;;772      case DHCP_REBINDING:
;;;773      case DHCP_RENEWING:
;;;774      case DHCP_BOUND:
;;;775      case DHCP_REBOOTING:
;;;776        netif_set_down(netif);
;;;777        dhcp->tries = 0;
;;;778        dhcp_reboot(netif);
;;;779        break;
;;;780      case DHCP_OFF:
;;;781        /* stay off */
;;;782        break;
;;;783      default:
;;;784        dhcp->tries = 0;
;;;785    #if LWIP_DHCP_AUTOIP_COOP
;;;786        if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;787          autoip_stop(netif);
;;;788          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;789        }
;;;790    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;791        dhcp_discover(netif);
;;;792        break;
;;;793      }
;;;794    }
000008  bd70              POP      {r4-r6,pc}
                  |L15.10|
00000a  7b20              LDRB     r0,[r4,#0xc]          ;771
00000c  2804              CMP      r0,#4                 ;771
00000e  d009              BEQ      |L15.36|
000010  dc03              BGT      |L15.26|
000012  b198              CBZ      r0,|L15.60|
000014  2803              CMP      r0,#3                 ;771
000016  d112              BNE      |L15.62|
000018  e007              B        |L15.42|
                  |L15.26|
00001a  2805              CMP      r0,#5                 ;771
00001c  d003              BEQ      |L15.38|
00001e  280a              CMP      r0,#0xa               ;771
000020  d10d              BNE      |L15.62|
000022  e001              B        |L15.40|
                  |L15.36|
000024  bf00              NOP                            ;773
                  |L15.38|
000026  bf00              NOP                            ;774
                  |L15.40|
000028  bf00              NOP                            ;775
                  |L15.42|
00002a  4628              MOV      r0,r5                 ;776
00002c  f7fffffe          BL       netif_set_down
000030  2000              MOVS     r0,#0                 ;777
000032  7360              STRB     r0,[r4,#0xd]          ;777
000034  4628              MOV      r0,r5                 ;778
000036  f7fffffe          BL       dhcp_reboot
00003a  e006              B        |L15.74|
                  |L15.60|
00003c  e005              B        |L15.74|
                  |L15.62|
00003e  2000              MOVS     r0,#0                 ;784
000040  7360              STRB     r0,[r4,#0xd]          ;784
000042  4628              MOV      r0,r5                 ;791
000044  f7fffffe          BL       dhcp_discover
000048  bf00              NOP                            ;792
                  |L15.74|
00004a  bf00              NOP                            ;779
00004c  bf00              NOP      
00004e  e7db              B        |L15.8|
;;;795    
                          ENDP


                          AREA ||i.dhcp_option||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option PROC
;;;1267   static void
;;;1268   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
000000  b570              PUSH     {r4-r6,lr}
;;;1269   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1270     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
000008  bf00              NOP      
00000a  8b20              LDRH     r0,[r4,#0x18]
00000c  1c80              ADDS     r0,r0,#2
00000e  4428              ADD      r0,r0,r5
000010  2844              CMP      r0,#0x44
000012  d908              BLS      |L16.38|
000014  bf00              NOP      
000016  a30b              ADR      r3,|L16.68|
000018  f24042f6          MOV      r2,#0x4f6
00001c  4912              LDR      r1,|L16.104|
00001e  a013              ADR      r0,|L16.108|
000020  f7fffffe          BL       __2printf
000024  bf00              NOP      
                  |L16.38|
000026  bf00              NOP      
;;;1271     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
000028  8b21              LDRH     r1,[r4,#0x18]
00002a  1c48              ADDS     r0,r1,#1
00002c  8320              STRH     r0,[r4,#0x18]
00002e  6960              LDR      r0,[r4,#0x14]
000030  30f0              ADDS     r0,r0,#0xf0
000032  5446              STRB     r6,[r0,r1]
;;;1272     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
000034  8b21              LDRH     r1,[r4,#0x18]
000036  1c48              ADDS     r0,r1,#1
000038  8320              STRH     r0,[r4,#0x18]
00003a  6960              LDR      r0,[r4,#0x14]
00003c  30f0              ADDS     r0,r0,#0xf0
00003e  5445              STRB     r5,[r0,r1]
;;;1273   }
000040  bd70              POP      {r4-r6,pc}
;;;1274   /*
                          ENDP

000042  0000              DCW      0x0000
                  |L16.68|
000044  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000048  5749505c
00004c  6c776970
000050  2d312e34
000054  2e315c73
000058  72635c63
00005c  6f72655c
000060  64686370
000064  2e6300  
000067  00                DCB      0
                  |L16.104|
                          DCD      ||.conststring||
                  |L16.108|
00006c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000070  7274696f
000074  6e202225
000078  73222066
00007c  61696c65
000080  64206174
000084  206c696e
000088  65202564
00008c  20696e20
000090  25730d0a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.dhcp_option_byte||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_byte PROC
;;;1278   static void
;;;1279   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1280   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1281     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
000006  bf00              NOP      
000008  8b20              LDRH     r0,[r4,#0x18]
00000a  2844              CMP      r0,#0x44
00000c  d308              BCC      |L17.32|
00000e  bf00              NOP      
000010  a307              ADR      r3,|L17.48|
000012  f2405201          MOV      r2,#0x501
000016  a10f              ADR      r1,|L17.84|
000018  a01d              ADR      r0,|L17.144|
00001a  f7fffffe          BL       __2printf
00001e  bf00              NOP      
                  |L17.32|
000020  bf00              NOP      
;;;1282     dhcp->msg_out->options[dhcp->options_out_len++] = value;
000022  8b21              LDRH     r1,[r4,#0x18]
000024  1c48              ADDS     r0,r1,#1
000026  8320              STRH     r0,[r4,#0x18]
000028  6960              LDR      r0,[r4,#0x14]
00002a  30f0              ADDS     r0,r0,#0xf0
00002c  5445              STRB     r5,[r0,r1]
;;;1283   }
00002e  bd70              POP      {r4-r6,pc}
;;;1284   
                          ENDP

                  |L17.48|
000030  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000034  5749505c
000038  6c776970
00003c  2d312e34
000040  2e315c73
000044  72635c63
000048  6f72655c
00004c  64686370
000050  2e6300  
000053  00                DCB      0
                  |L17.84|
000054  64686370          DCB      "dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_"
000058  5f6f7074
00005c  696f6e5f
000060  62797465
000064  3a206468
000068  63702d3e
00006c  6f707469
000070  6f6e735f
000074  6f75745f
000078  6c656e20
00007c  3c204448
000080  43505f4f
000084  5054494f
000088  4e535f  
00008b  4c454e00          DCB      "LEN",0
00008f  00                DCB      0
                  |L17.144|
000090  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000094  7274696f
000098  6e202225
00009c  73222066
0000a0  61696c65
0000a4  64206174
0000a8  206c696e
0000ac  65202564
0000b0  20696e20
0000b4  25730d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||i.dhcp_option_long||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_long PROC
;;;1293   static void
;;;1294   dhcp_option_long(struct dhcp *dhcp, u32_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1295   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1296     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
000006  bf00              NOP      
000008  8b20              LDRH     r0,[r4,#0x18]
00000a  1d00              ADDS     r0,r0,#4
00000c  2844              CMP      r0,#0x44
00000e  d908              BLS      |L18.34|
000010  bf00              NOP      
000012  a313              ADR      r3,|L18.96|
000014  f44f62a2          MOV      r2,#0x510
000018  a11a              ADR      r1,|L18.132|
00001a  a02a              ADR      r0,|L18.196|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
                  |L18.34|
000022  bf00              NOP      
;;;1297     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
000024  0e29              LSRS     r1,r5,#24
000026  8b22              LDRH     r2,[r4,#0x18]
000028  1c50              ADDS     r0,r2,#1
00002a  8320              STRH     r0,[r4,#0x18]
00002c  6960              LDR      r0,[r4,#0x14]
00002e  30f0              ADDS     r0,r0,#0xf0
000030  5481              STRB     r1,[r0,r2]
;;;1298     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
000032  f3c54107          UBFX     r1,r5,#16,#8
000036  8b22              LDRH     r2,[r4,#0x18]
000038  1c50              ADDS     r0,r2,#1
00003a  8320              STRH     r0,[r4,#0x18]
00003c  6960              LDR      r0,[r4,#0x14]
00003e  30f0              ADDS     r0,r0,#0xf0
000040  5481              STRB     r1,[r0,r2]
;;;1299     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000042  f3c52107          UBFX     r1,r5,#8,#8
000046  8b22              LDRH     r2,[r4,#0x18]
000048  1c50              ADDS     r0,r2,#1
00004a  8320              STRH     r0,[r4,#0x18]
00004c  6960              LDR      r0,[r4,#0x14]
00004e  30f0              ADDS     r0,r0,#0xf0
000050  5481              STRB     r1,[r0,r2]
;;;1300     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
000052  8b22              LDRH     r2,[r4,#0x18]
000054  1c50              ADDS     r0,r2,#1
000056  8320              STRH     r0,[r4,#0x18]
000058  6960              LDR      r0,[r4,#0x14]
00005a  30f0              ADDS     r0,r0,#0xf0
00005c  5485              STRB     r5,[r0,r2]
;;;1301   }
00005e  bd70              POP      {r4-r6,pc}
;;;1302   
                          ENDP

                  |L18.96|
000060  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000064  5749505c
000068  6c776970
00006c  2d312e34
000070  2e315c73
000074  72635c63
000078  6f72655c
00007c  64686370
000080  2e6300  
000083  00                DCB      0
                  |L18.132|
000084  64686370          DCB      "dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPT"
000088  5f6f7074
00008c  696f6e5f
000090  6c6f6e67
000094  3a206468
000098  63702d3e
00009c  6f707469
0000a0  6f6e735f
0000a4  6f75745f
0000a8  6c656e20
0000ac  2b203420
0000b0  3c3d2044
0000b4  4843505f
0000b8  4f5054  
0000bb  494f4e53          DCB      "IONS_LEN",0
0000bf  5f4c454e
0000c3  00      
                  |L18.196|
0000c4  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000c8  7274696f
0000cc  6e202225
0000d0  73222066
0000d4  61696c65
0000d8  64206174
0000dc  206c696e
0000e0  65202564
0000e4  20696e20
0000e8  25730d0a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.dhcp_option_short||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_short PROC
;;;1285   static void
;;;1286   dhcp_option_short(struct dhcp *dhcp, u16_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;1287   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1288     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
000006  bf00              NOP      
000008  8b20              LDRH     r0,[r4,#0x18]
00000a  1c80              ADDS     r0,r0,#2
00000c  2844              CMP      r0,#0x44
00000e  d908              BLS      |L19.34|
000010  bf00              NOP      
000012  a30b              ADR      r3,|L19.64|
000014  f44f62a1          MOV      r2,#0x508
000018  4912              LDR      r1,|L19.100|
00001a  a013              ADR      r0,|L19.104|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
                  |L19.34|
000022  bf00              NOP      
;;;1289     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
000024  0a29              LSRS     r1,r5,#8
000026  8b22              LDRH     r2,[r4,#0x18]
000028  1c50              ADDS     r0,r2,#1
00002a  8320              STRH     r0,[r4,#0x18]
00002c  6960              LDR      r0,[r4,#0x14]
00002e  30f0              ADDS     r0,r0,#0xf0
000030  5481              STRB     r1,[r0,r2]
;;;1290     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
000032  8b22              LDRH     r2,[r4,#0x18]
000034  1c50              ADDS     r0,r2,#1
000036  8320              STRH     r0,[r4,#0x18]
000038  6960              LDR      r0,[r4,#0x14]
00003a  30f0              ADDS     r0,r0,#0xf0
00003c  5485              STRB     r5,[r0,r2]
;;;1291   }
00003e  bd70              POP      {r4-r6,pc}
;;;1292   
                          ENDP

                  |L19.64|
000040  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000044  5749505c
000048  6c776970
00004c  2d312e34
000050  2e315c73
000054  72635c63
000058  6f72655c
00005c  64686370
000060  2e6300  
000063  00                DCB      0
                  |L19.100|
                          DCD      ||.conststring||+0x48
                  |L19.104|
000068  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
00006c  7274696f
000070  6e202225
000074  73222066
000078  61696c65
00007c  64206174
000080  206c696e
000084  65202564
000088  20696e20
00008c  25730d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.dhcp_option_trailer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_option_trailer PROC
;;;1755   static void
;;;1756   dhcp_option_trailer(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1757   {
000002  4604              MOV      r4,r0
;;;1758     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
000004  bf00              NOP      
000006  2c00              CMP      r4,#0
000008  d109              BNE      |L20.30|
00000a  bf00              NOP      
00000c  a320              ADR      r3,|L20.144|
00000e  f24062de          MOV      r2,#0x6de
000012  a128              ADR      r1,|L20.180|
000014  a030              ADR      r0,|L20.216|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L20.28|
;;;1759     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
;;;1760     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
;;;1761     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
;;;1762     /* packet is too small, or not 4 byte aligned? */
;;;1763     while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
;;;1764            (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
;;;1765       /* add a fill/padding byte */
;;;1766       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
;;;1767     }
;;;1768   }
00001c  bd10              POP      {r4,pc}
                  |L20.30|
00001e  bf00              NOP                            ;1758
000020  bf00              NOP                            ;1759
000022  6960              LDR      r0,[r4,#0x14]         ;1759
000024  2800              CMP      r0,#0                 ;1759
000026  d108              BNE      |L20.58|
000028  bf00              NOP                            ;1759
00002a  a319              ADR      r3,|L20.144|
00002c  f24062df          MOV      r2,#0x6df             ;1759
000030  a134              ADR      r1,|L20.260|
000032  a029              ADR      r0,|L20.216|
000034  f7fffffe          BL       __2printf
000038  bf00              NOP                            ;1759
                  |L20.58|
00003a  bf00              NOP                            ;1759
00003c  bf00              NOP                            ;1760
00003e  8b20              LDRH     r0,[r4,#0x18]         ;1760
000040  2844              CMP      r0,#0x44              ;1760
000042  d308              BCC      |L20.86|
000044  bf00              NOP                            ;1760
000046  a312              ADR      r3,|L20.144|
000048  f44f62dc          MOV      r2,#0x6e0             ;1760
00004c  a138              ADR      r1,|L20.304|
00004e  a022              ADR      r0,|L20.216|
000050  f7fffffe          BL       __2printf
000054  bf00              NOP                            ;1760
                  |L20.86|
000056  bf00              NOP                            ;1760
000058  21ff              MOVS     r1,#0xff              ;1761
00005a  8b22              LDRH     r2,[r4,#0x18]         ;1761
00005c  1c50              ADDS     r0,r2,#1              ;1761
00005e  8320              STRH     r0,[r4,#0x18]         ;1761
000060  6960              LDR      r0,[r4,#0x14]         ;1761
000062  30f0              ADDS     r0,r0,#0xf0           ;1761
000064  5481              STRB     r1,[r0,r2]            ;1761
000066  e006              B        |L20.118|
                  |L20.104|
000068  2100              MOVS     r1,#0                 ;1766
00006a  8b22              LDRH     r2,[r4,#0x18]         ;1766
00006c  1c50              ADDS     r0,r2,#1              ;1766
00006e  8320              STRH     r0,[r4,#0x18]         ;1766
000070  6960              LDR      r0,[r4,#0x14]         ;1766
000072  30f0              ADDS     r0,r0,#0xf0           ;1766
000074  5481              STRB     r1,[r0,r2]            ;1766
                  |L20.118|
000076  8b20              LDRH     r0,[r4,#0x18]         ;1763
000078  2844              CMP      r0,#0x44              ;1763
00007a  d303              BCC      |L20.132|
00007c  7e20              LDRB     r0,[r4,#0x18]         ;1763
00007e  f0000003          AND      r0,r0,#3              ;1763
000082  b110              CBZ      r0,|L20.138|
                  |L20.132|
000084  8b20              LDRH     r0,[r4,#0x18]         ;1764
000086  2844              CMP      r0,#0x44              ;1764
000088  d3ee              BCC      |L20.104|
                  |L20.138|
00008a  bf00              NOP      
00008c  e7c6              B        |L20.28|
;;;1769   
                          ENDP

00008e  0000              DCW      0x0000
                  |L20.144|
000090  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000094  5749505c
000098  6c776970
00009c  2d312e34
0000a0  2e315c73
0000a4  72635c63
0000a8  6f72655c
0000ac  64686370
0000b0  2e6300  
0000b3  00                DCB      0
                  |L20.180|
0000b4  64686370          DCB      "dhcp_option_trailer: dhcp != NULL",0
0000b8  5f6f7074
0000bc  696f6e5f
0000c0  74726169
0000c4  6c65723a
0000c8  20646863
0000cc  7020213d
0000d0  204e554c
0000d4  4c00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L20.216|
0000d8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000dc  7274696f
0000e0  6e202225
0000e4  73222066
0000e8  61696c65
0000ec  64206174
0000f0  206c696e
0000f4  65202564
0000f8  20696e20
0000fc  25730d0a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L20.260|
000104  64686370          DCB      "dhcp_option_trailer: dhcp->msg_out != NULL\n",0
000108  5f6f7074
00010c  696f6e5f
000110  74726169
000114  6c65723a
000118  20646863
00011c  702d3e6d
000120  73675f6f
000124  75742021
000128  3d204e55
00012c  4c4c0a00
                  |L20.304|
000130  64686370          DCB      "dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIO"
000134  5f6f7074
000138  696f6e5f
00013c  74726169
000140  6c65723a
000144  20646863
000148  702d3e6f
00014c  7074696f
000150  6e735f6f
000154  75745f6c
000158  656e203c
00015c  20444843
000160  505f4f50
000164  54494f  
000167  4e535f4c          DCB      "NS_LEN\n",0
00016b  454e0a00
00016f  00                DCB      0

                          AREA ||i.dhcp_parse_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_parse_reply PROC
;;;1336   static err_t
;;;1337   dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1338   {
000004  b089              SUB      sp,sp,#0x24
000006  4689              MOV      r9,r1
;;;1339     u8_t *options;
;;;1340     u16_t offset;
;;;1341     u16_t offset_max;
;;;1342     u16_t options_idx;
;;;1343     u16_t options_idx_max;
;;;1344     struct pbuf *q;
;;;1345     int parse_file_as_options = 0;
000008  2000              MOVS     r0,#0
00000a  9006              STR      r0,[sp,#0x18]
;;;1346     int parse_sname_as_options = 0;
00000c  9005              STR      r0,[sp,#0x14]
;;;1347   
;;;1348     /* clear received options */
;;;1349     dhcp_clear_all_options(dhcp);
00000e  210a              MOVS     r1,#0xa
000010  48f8              LDR      r0,|L21.1012|
000012  f7fffffe          BL       __aeabi_memclr4
;;;1350     /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
;;;1351     if (p->len < DHCP_SNAME_OFS) {
000016  f8b9000a          LDRH     r0,[r9,#0xa]
00001a  282c              CMP      r0,#0x2c
00001c  da04              BGE      |L21.40|
;;;1352       return ERR_BUF;
00001e  f06f0001          MVN      r0,#1
                  |L21.34|
;;;1353     }
;;;1354     dhcp->msg_in = (struct dhcp_msg *)p->payload;
;;;1355   #if LWIP_DHCP_BOOTP_FILE
;;;1356     /* clear boot file name */
;;;1357     dhcp->boot_file_name[0] = 0;
;;;1358   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1359   
;;;1360     /* parse options */
;;;1361   
;;;1362     /* start with options field */
;;;1363     options_idx = DHCP_OPTIONS_OFS;
;;;1364     /* parse options to the end of the received packet */
;;;1365     options_idx_max = p->tot_len;
;;;1366   again:
;;;1367     q = p;
;;;1368     while((q != NULL) && (options_idx >= q->len)) {
;;;1369       options_idx -= q->len;
;;;1370       options_idx_max -= q->len;
;;;1371       q = q->next;
;;;1372     }
;;;1373     if (q == NULL) {
;;;1374       return ERR_BUF;
;;;1375     }
;;;1376     offset = options_idx;
;;;1377     offset_max = options_idx_max;
;;;1378     options = (u8_t*)q->payload;
;;;1379     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1380     while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
;;;1381       u8_t op = options[offset];
;;;1382       u8_t len;
;;;1383       u8_t decode_len = 0;
;;;1384       int decode_idx = -1;
;;;1385       u16_t val_offset = offset + 2;
;;;1386       /* len byte might be in the next pbuf */
;;;1387       if (offset + 1 < q->len) {
;;;1388         len = options[offset + 1];
;;;1389       } else {
;;;1390         len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
;;;1391       }
;;;1392       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1393       decode_len = len;
;;;1394       switch(op) {
;;;1395         /* case(DHCP_OPTION_END): handled above */
;;;1396         case(DHCP_OPTION_PAD):
;;;1397           /* special option: no len encoded */
;;;1398           decode_len = len = 0;
;;;1399           /* will be increased below */
;;;1400           offset--;
;;;1401           break;
;;;1402         case(DHCP_OPTION_SUBNET_MASK):
;;;1403           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1404           decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
;;;1405           break;
;;;1406         case(DHCP_OPTION_ROUTER):
;;;1407           decode_len = 4; /* only copy the first given router */
;;;1408           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1409           decode_idx = DHCP_OPTION_IDX_ROUTER;
;;;1410           break;
;;;1411         case(DHCP_OPTION_DNS_SERVER):
;;;1412           /* special case: there might be more than one server */
;;;1413           LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1414           /* limit number of DNS servers */
;;;1415           decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
;;;1416           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1417           decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
;;;1418           break;
;;;1419         case(DHCP_OPTION_LEASE_TIME):
;;;1420           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1421           decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
;;;1422           break;
;;;1423         case(DHCP_OPTION_OVERLOAD):
;;;1424           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1425           decode_idx = DHCP_OPTION_IDX_OVERLOAD;
;;;1426           break;
;;;1427         case(DHCP_OPTION_MESSAGE_TYPE):
;;;1428           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1429           decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
;;;1430           break;
;;;1431         case(DHCP_OPTION_SERVER_ID):
;;;1432           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1433           decode_idx = DHCP_OPTION_IDX_SERVER_ID;
;;;1434           break;
;;;1435         case(DHCP_OPTION_T1):
;;;1436           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1437           decode_idx = DHCP_OPTION_IDX_T1;
;;;1438           break;
;;;1439         case(DHCP_OPTION_T2):
;;;1440           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1441           decode_idx = DHCP_OPTION_IDX_T2;
;;;1442           break;
;;;1443         default:
;;;1444           decode_len = 0;
;;;1445           LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
;;;1446           break;
;;;1447       }
;;;1448       offset += len + 2;
;;;1449       if (decode_len > 0) {
;;;1450         u32_t value = 0;
;;;1451         u16_t copy_len;
;;;1452   decode_next:
;;;1453         LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
;;;1454         if (!dhcp_option_given(dhcp, decode_idx)) {
;;;1455           copy_len = LWIP_MIN(decode_len, 4);
;;;1456           pbuf_copy_partial(q, &value, copy_len, val_offset);
;;;1457           if (decode_len > 4) {
;;;1458             /* decode more than one u32_t */
;;;1459             LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
;;;1460             dhcp_got_option(dhcp, decode_idx);
;;;1461             dhcp_set_option_value(dhcp, decode_idx, htonl(value));
;;;1462             decode_len -= 4;
;;;1463             val_offset += 4;
;;;1464             decode_idx++;
;;;1465             goto decode_next;
;;;1466           } else if (decode_len == 4) {
;;;1467             value = ntohl(value);
;;;1468           } else {
;;;1469             LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
;;;1470             value = ((u8_t*)&value)[0];
;;;1471           }
;;;1472           dhcp_got_option(dhcp, decode_idx);
;;;1473           dhcp_set_option_value(dhcp, decode_idx, value);
;;;1474         }
;;;1475       }
;;;1476       if (offset >= q->len) {
;;;1477         offset -= q->len;
;;;1478         offset_max -= q->len;
;;;1479         if ((offset < offset_max) && offset_max) {
;;;1480           q = q->next;
;;;1481           LWIP_ASSERT("next pbuf was null", q);
;;;1482           options = (u8_t*)q->payload;
;;;1483         } else {
;;;1484           // We've run out of bytes, probably no end marker. Don't proceed.
;;;1485           break;
;;;1486         }
;;;1487       }
;;;1488     }
;;;1489     /* is this an overloaded message? */
;;;1490     if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
;;;1491       u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1492       dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1493       if (overload == DHCP_OVERLOAD_FILE) {
;;;1494         parse_file_as_options = 1;
;;;1495         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
;;;1496       } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1497         parse_sname_as_options = 1;
;;;1498         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
;;;1499       } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
;;;1500         parse_sname_as_options = 1;
;;;1501         parse_file_as_options = 1;
;;;1502         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
;;;1503       } else {
;;;1504         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
;;;1505       }
;;;1506   #if LWIP_DHCP_BOOTP_FILE
;;;1507       if (!parse_file_as_options) {
;;;1508         /* only do this for ACK messages */
;;;1509         if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
;;;1510           (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
;;;1511         /* copy bootp file name, don't care for sname (server hostname) */
;;;1512         pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
;;;1513         /* make sure the string is really NULL-terminated */
;;;1514         dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
;;;1515       }
;;;1516   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1517     }
;;;1518     if (parse_file_as_options) {
;;;1519       /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
;;;1520       parse_file_as_options = 0;
;;;1521       options_idx = DHCP_FILE_OFS;
;;;1522       options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
;;;1523       goto again;
;;;1524     } else if (parse_sname_as_options) {
;;;1525       parse_sname_as_options = 0;
;;;1526       options_idx = DHCP_SNAME_OFS;
;;;1527       options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
;;;1528       goto again;
;;;1529     }
;;;1530     return ERR_OK;
;;;1531   }
000022  b00b              ADD      sp,sp,#0x2c
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L21.40|
000028  f8d91004          LDR      r1,[r9,#4]            ;1354
00002c  9809              LDR      r0,[sp,#0x24]         ;1354
00002e  6081              STR      r1,[r0,#8]            ;1354
000030  f04f0bf0          MOV      r11,#0xf0             ;1363
000034  f8b90008          LDRH     r0,[r9,#8]            ;1365
000038  9007              STR      r0,[sp,#0x1c]         ;1365
00003a  bf00              NOP                            ;1366
                  |L21.60|
00003c  464c              MOV      r4,r9                 ;1367
00003e  e00a              B        |L21.86|
                  |L21.64|
000040  8960              LDRH     r0,[r4,#0xa]          ;1369
000042  ebab0000          SUB      r0,r11,r0             ;1369
000046  fa1ffb80          UXTH     r11,r0                ;1369
00004a  8961              LDRH     r1,[r4,#0xa]          ;1370
00004c  9807              LDR      r0,[sp,#0x1c]         ;1370
00004e  1a40              SUBS     r0,r0,r1              ;1370
000050  b280              UXTH     r0,r0                 ;1370
000052  9007              STR      r0,[sp,#0x1c]         ;1370
000054  6824              LDR      r4,[r4,#0]            ;1371
                  |L21.86|
000056  b114              CBZ      r4,|L21.94|
000058  8960              LDRH     r0,[r4,#0xa]          ;1368
00005a  4558              CMP      r0,r11                ;1368
00005c  ddf0              BLE      |L21.64|
                  |L21.94|
00005e  b914              CBNZ     r4,|L21.102|
000060  f06f0001          MVN      r0,#1                 ;1374
000064  e7dd              B        |L21.34|
                  |L21.102|
000066  465f              MOV      r7,r11                ;1376
000068  f8dda01c          LDR      r10,[sp,#0x1c]        ;1377
00006c  6860              LDR      r0,[r4,#4]            ;1378
00006e  9008              STR      r0,[sp,#0x20]         ;1378
000070  e1a2              B        |L21.952|
                  |L21.114|
000072  9808              LDR      r0,[sp,#0x20]         ;1381
000074  5dc0              LDRB     r0,[r0,r7]            ;1381
000076  9004              STR      r0,[sp,#0x10]         ;1381
000078  2600              MOVS     r6,#0                 ;1383
00007a  f04f38ff          MOV      r8,#0xffffffff        ;1384
00007e  1cb8              ADDS     r0,r7,#2              ;1385
000080  b280              UXTH     r0,r0                 ;1385
000082  9003              STR      r0,[sp,#0xc]          ;1385
000084  8961              LDRH     r1,[r4,#0xa]          ;1387
000086  1c78              ADDS     r0,r7,#1              ;1387
000088  4281              CMP      r1,r0                 ;1387
00008a  dd03              BLE      |L21.148|
00008c  1c79              ADDS     r1,r7,#1              ;1388
00008e  9808              LDR      r0,[sp,#0x20]         ;1388
000090  5c45              LDRB     r5,[r0,r1]            ;1388
000092  e007              B        |L21.164|
                  |L21.148|
000094  6820              LDR      r0,[r4,#0]            ;1390
000096  b118              CBZ      r0,|L21.160|
000098  6820              LDR      r0,[r4,#0]            ;1390
00009a  6840              LDR      r0,[r0,#4]            ;1390
00009c  7800              LDRB     r0,[r0,#0]            ;1390
00009e  e000              B        |L21.162|
                  |L21.160|
0000a0  2000              MOVS     r0,#0                 ;1390
                  |L21.162|
0000a2  4605              MOV      r5,r0                 ;1390
                  |L21.164|
0000a4  462e              MOV      r6,r5                 ;1393
0000a6  9804              LDR      r0,[sp,#0x10]         ;1394
0000a8  2834              CMP      r0,#0x34              ;1394
0000aa  d070              BEQ      |L21.398|
0000ac  dc0b              BGT      |L21.198|
0000ae  2803              CMP      r0,#3                 ;1394
0000b0  d02b              BEQ      |L21.266|
0000b2  dc03              BGT      |L21.188|
0000b4  b180              CBZ      r0,|L21.216|
0000b6  2801              CMP      r0,#1                 ;1394
                  |L21.184|
0000b8  d16a              BNE      |L21.400|
0000ba  e013              B        |L21.228|
                  |L21.188|
0000bc  2806              CMP      r0,#6                 ;1394
0000be  d038              BEQ      |L21.306|
0000c0  2833              CMP      r0,#0x33              ;1394
0000c2  d1f9              BNE      |L21.184|
0000c4  e065              B        |L21.402|
                  |L21.198|
0000c6  2835              CMP      r0,#0x35              ;1394
0000c8  d072              BEQ      |L21.432|
0000ca  2836              CMP      r0,#0x36              ;1394
0000cc  d071              BEQ      |L21.434|
0000ce  283a              CMP      r0,#0x3a              ;1394
0000d0  d070              BEQ      |L21.436|
0000d2  283b              CMP      r0,#0x3b              ;1394
0000d4  d1f0              BNE      |L21.184|
0000d6  e0be              B        |L21.598|
                  |L21.216|
0000d8  2000              MOVS     r0,#0                 ;1398
0000da  4605              MOV      r5,r0                 ;1398
0000dc  4606              MOV      r6,r0                 ;1398
0000de  1e78              SUBS     r0,r7,#1              ;1400
0000e0  b287              UXTH     r7,r0                 ;1400
0000e2  e0cf              B        |L21.644|
                  |L21.228|
0000e4  bf00              NOP                            ;1403
0000e6  2d04              CMP      r5,#4                 ;1403
0000e8  d00b              BEQ      |L21.258|
0000ea  bf00              NOP                            ;1403
0000ec  a3c2              ADR      r3,|L21.1016|
0000ee  f240527b          MOV      r2,#0x57b             ;1403
0000f2  a1ca              ADR      r1,|L21.1052|
0000f4  a0cc              ADR      r0,|L21.1064|
0000f6  f7fffffe          BL       __2printf
0000fa  bf00              NOP                            ;1403
0000fc  f06f0005          MVN      r0,#5                 ;1403
000100  e78f              B        |L21.34|
                  |L21.258|
000102  bf00              NOP                            ;1403
000104  f04f0806          MOV      r8,#6                 ;1404
000108  e0bc              B        |L21.644|
                  |L21.266|
00010a  2604              MOVS     r6,#4                 ;1407
00010c  bf00              NOP                            ;1408
00010e  42b5              CMP      r5,r6                 ;1408
000110  da0b              BGE      |L21.298|
000112  bf00              NOP                            ;1408
000114  a3b8              ADR      r3,|L21.1016|
000116  f44f62b0          MOV      r2,#0x580             ;1408
00011a  a1ce              ADR      r1,|L21.1108|
00011c  a0c2              ADR      r0,|L21.1064|
00011e  f7fffffe          BL       __2printf
000122  bf00              NOP                            ;1408
000124  f06f0005          MVN      r0,#5                 ;1408
000128  e77b              B        |L21.34|
                  |L21.298|
00012a  bf00              NOP                            ;1408
00012c  f04f0807          MOV      r8,#7                 ;1409
000130  e0a8              B        |L21.644|
                  |L21.306|
000132  bf00              NOP                            ;1413
000134  17e9              ASRS     r1,r5,#31             ;1413
000136  eb057191          ADD      r1,r5,r1,LSR #30      ;1413
00013a  1089              ASRS     r1,r1,#2              ;1413
00013c  eba50181          SUB      r1,r5,r1,LSL #2       ;1413
000140  b159              CBZ      r1,|L21.346|
000142  bf00              NOP                            ;1413
000144  a3ac              ADR      r3,|L21.1016|
000146  f2405285          MOV      r2,#0x585             ;1413
00014a  a1c7              ADR      r1,|L21.1128|
00014c  a0b6              ADR      r0,|L21.1064|
00014e  f7fffffe          BL       __2printf
000152  bf00              NOP                            ;1413
000154  f06f0005          MVN      r0,#5                 ;1413
000158  e763              B        |L21.34|
                  |L21.346|
00015a  bf00              NOP                            ;1413
00015c  2d08              CMP      r5,#8                 ;1415
00015e  da01              BGE      |L21.356|
000160  4628              MOV      r0,r5                 ;1415
000162  e000              B        |L21.358|
                  |L21.356|
000164  2008              MOVS     r0,#8                 ;1415
                  |L21.358|
000166  4606              MOV      r6,r0                 ;1415
000168  bf00              NOP                            ;1416
00016a  42b5              CMP      r5,r6                 ;1416
00016c  da0b              BGE      |L21.390|
00016e  bf00              NOP                            ;1416
000170  a3a1              ADR      r3,|L21.1016|
000172  f44f62b1          MOV      r2,#0x588             ;1416
000176  a1b7              ADR      r1,|L21.1108|
000178  a0ab              ADR      r0,|L21.1064|
00017a  f7fffffe          BL       __2printf
00017e  bf00              NOP                            ;1416
000180  f06f0005          MVN      r0,#5                 ;1416
000184  e74d              B        |L21.34|
                  |L21.390|
000186  bf00              NOP                            ;1416
000188  f04f0808          MOV      r8,#8                 ;1417
00018c  e07a              B        |L21.644|
                  |L21.398|
00018e  e016              B        |L21.446|
                  |L21.400|
000190  e074              B        |L21.636|
                  |L21.402|
000192  bf00              NOP                            ;1420
000194  2d04              CMP      r5,#4                 ;1420
000196  d00e              BEQ      |L21.438|
000198  bf00              NOP                            ;1420
00019a  a397              ADR      r3,|L21.1016|
00019c  f240528c          MOV      r2,#0x58c             ;1420
0001a0  a19e              ADR      r1,|L21.1052|
0001a2  a0a1              ADR      r0,|L21.1064|
0001a4  f7fffffe          BL       __2printf
0001a8  bf00              NOP                            ;1420
0001aa  f06f0005          MVN      r0,#5                 ;1420
0001ae  e738              B        |L21.34|
                  |L21.432|
0001b0  e018              B        |L21.484|
                  |L21.434|
0001b2  e02a              B        |L21.522|
                  |L21.436|
0001b4  e03c              B        |L21.560|
                  |L21.438|
0001b6  bf00              NOP                            ;1420
0001b8  f04f0803          MOV      r8,#3                 ;1421
0001bc  e062              B        |L21.644|
                  |L21.446|
0001be  bf00              NOP                            ;1424
0001c0  2d01              CMP      r5,#1                 ;1424
0001c2  d00b              BEQ      |L21.476|
0001c4  bf00              NOP                            ;1424
0001c6  a38c              ADR      r3,|L21.1016|
0001c8  f44f62b2          MOV      r2,#0x590             ;1424
0001cc  a1aa              ADR      r1,|L21.1144|
0001ce  a096              ADR      r0,|L21.1064|
0001d0  f7fffffe          BL       __2printf
0001d4  bf00              NOP                            ;1424
0001d6  f06f0005          MVN      r0,#5                 ;1424
0001da  e722              B        |L21.34|
                  |L21.476|
0001dc  bf00              NOP                            ;1424
0001de  f04f0800          MOV      r8,#0                 ;1425
0001e2  e04f              B        |L21.644|
                  |L21.484|
0001e4  bf00              NOP                            ;1428
0001e6  2d01              CMP      r5,#1                 ;1428
0001e8  d00b              BEQ      |L21.514|
0001ea  bf00              NOP                            ;1428
0001ec  a382              ADR      r3,|L21.1016|
0001ee  f2405294          MOV      r2,#0x594             ;1428
0001f2  a1a1              ADR      r1,|L21.1144|
0001f4  a08c              ADR      r0,|L21.1064|
0001f6  f7fffffe          BL       __2printf
0001fa  bf00              NOP                            ;1428
0001fc  f06f0005          MVN      r0,#5                 ;1428
000200  e70f              B        |L21.34|
                  |L21.514|
000202  bf00              NOP                            ;1428
000204  f04f0801          MOV      r8,#1                 ;1429
000208  e03c              B        |L21.644|
                  |L21.522|
00020a  bf00              NOP                            ;1432
00020c  2d04              CMP      r5,#4                 ;1432
00020e  d00b              BEQ      |L21.552|
000210  bf00              NOP                            ;1432
000212  a379              ADR      r3,|L21.1016|
000214  f44f62b3          MOV      r2,#0x598             ;1432
000218  a180              ADR      r1,|L21.1052|
00021a  a083              ADR      r0,|L21.1064|
00021c  f7fffffe          BL       __2printf
000220  bf00              NOP                            ;1432
000222  f06f0005          MVN      r0,#5                 ;1432
000226  e6fc              B        |L21.34|
                  |L21.552|
000228  bf00              NOP                            ;1432
00022a  f04f0802          MOV      r8,#2                 ;1433
00022e  e029              B        |L21.644|
                  |L21.560|
000230  bf00              NOP                            ;1436
000232  2d04              CMP      r5,#4                 ;1436
000234  d00b              BEQ      |L21.590|
000236  bf00              NOP                            ;1436
000238  a36f              ADR      r3,|L21.1016|
00023a  f240529c          MOV      r2,#0x59c             ;1436
00023e  a177              ADR      r1,|L21.1052|
000240  a079              ADR      r0,|L21.1064|
000242  f7fffffe          BL       __2printf
000246  bf00              NOP                            ;1436
000248  f06f0005          MVN      r0,#5                 ;1436
00024c  e6e9              B        |L21.34|
                  |L21.590|
00024e  bf00              NOP                            ;1436
000250  f04f0804          MOV      r8,#4                 ;1437
000254  e016              B        |L21.644|
                  |L21.598|
000256  bf00              NOP                            ;1440
000258  2d04              CMP      r5,#4                 ;1440
00025a  d00b              BEQ      |L21.628|
00025c  bf00              NOP                            ;1440
00025e  a366              ADR      r3,|L21.1016|
000260  f44f62b4          MOV      r2,#0x5a0             ;1440
000264  a16d              ADR      r1,|L21.1052|
000266  a070              ADR      r0,|L21.1064|
000268  f7fffffe          BL       __2printf
00026c  bf00              NOP                            ;1440
00026e  f06f0005          MVN      r0,#5                 ;1440
000272  e6d6              B        |L21.34|
                  |L21.628|
000274  bf00              NOP                            ;1440
000276  f04f0805          MOV      r8,#5                 ;1441
00027a  e003              B        |L21.644|
                  |L21.636|
00027c  2600              MOVS     r6,#0                 ;1444
00027e  bf00              NOP                            ;1445
000280  bf00              NOP                            ;1445
000282  bf00              NOP                            ;1446
                  |L21.644|
000284  bf00              NOP                            ;1401
000286  1ca8              ADDS     r0,r5,#2              ;1448
000288  4438              ADD      r0,r0,r7              ;1448
00028a  b287              UXTH     r7,r0                 ;1448
00028c  2e00              CMP      r6,#0                 ;1449
00028e  dd71              BLE      |L21.884|
000290  2000              MOVS     r0,#0                 ;1450
000292  9002              STR      r0,[sp,#8]            ;1450
000294  bf00              NOP                            ;1452
                  |L21.662|
000296  bf00              NOP                            ;1453
000298  f1b80f00          CMP      r8,#0                 ;1453
00029c  db02              BLT      |L21.676|
00029e  f1b80f0a          CMP      r8,#0xa               ;1453
0002a2  db08              BLT      |L21.694|
                  |L21.676|
0002a4  bf00              NOP                            ;1453
0002a6  a354              ADR      r3,|L21.1016|
0002a8  f24052ad          MOV      r2,#0x5ad             ;1453
0002ac  a175              ADR      r1,|L21.1156|
0002ae  a05e              ADR      r0,|L21.1064|
0002b0  f7fffffe          BL       __2printf
0002b4  bf00              NOP                            ;1453
                  |L21.694|
0002b6  bf00              NOP                            ;1453
0002b8  484e              LDR      r0,|L21.1012|
0002ba  f8100008          LDRB     r0,[r0,r8]            ;1454
0002be  2800              CMP      r0,#0                 ;1454
0002c0  d157              BNE      |L21.882|
0002c2  2e04              CMP      r6,#4                 ;1455
0002c4  da01              BGE      |L21.714|
0002c6  4630              MOV      r0,r6                 ;1455
0002c8  e000              B        |L21.716|
                  |L21.714|
0002ca  2004              MOVS     r0,#4                 ;1455
                  |L21.716|
0002cc  9001              STR      r0,[sp,#4]            ;1455
0002ce  a902              ADD      r1,sp,#8              ;1456
0002d0  4620              MOV      r0,r4                 ;1456
0002d2  9b03              LDR      r3,[sp,#0xc]          ;1456
0002d4  9a01              LDR      r2,[sp,#4]            ;1456
0002d6  f7fffffe          BL       pbuf_copy_partial
0002da  2e04              CMP      r6,#4                 ;1457
0002dc  dd27              BLE      |L21.814|
0002de  bf00              NOP                            ;1459
0002e0  17f1              ASRS     r1,r6,#31             ;1459
0002e2  eb067191          ADD      r1,r6,r1,LSR #30      ;1459
0002e6  1089              ASRS     r1,r1,#2              ;1459
0002e8  eba60181          SUB      r1,r6,r1,LSL #2       ;1459
0002ec  b159              CBZ      r1,|L21.774|
0002ee  bf00              NOP                            ;1459
0002f0  a341              ADR      r3,|L21.1016|
0002f2  f24052b3          MOV      r2,#0x5b3             ;1459
0002f6  a168              ADR      r1,|L21.1176|
0002f8  a04b              ADR      r0,|L21.1064|
0002fa  f7fffffe          BL       __2printf
0002fe  bf00              NOP                            ;1459
000300  f06f0005          MVN      r0,#5                 ;1459
000304  e68d              B        |L21.34|
                  |L21.774|
000306  bf00              NOP                            ;1459
000308  2001              MOVS     r0,#1                 ;1460
00030a  493a              LDR      r1,|L21.1012|
00030c  f8010008          STRB     r0,[r1,r8]            ;1460
000310  9802              LDR      r0,[sp,#8]            ;1461
000312  f7fffffe          BL       lwip_htonl
000316  4965              LDR      r1,|L21.1196|
000318  f8410028          STR      r0,[r1,r8,LSL #2]     ;1461
00031c  1f30              SUBS     r0,r6,#4              ;1462
00031e  b2c6              UXTB     r6,r0                 ;1462
000320  9803              LDR      r0,[sp,#0xc]          ;1463
000322  1d00              ADDS     r0,r0,#4              ;1463
000324  b280              UXTH     r0,r0                 ;1463
000326  9003              STR      r0,[sp,#0xc]          ;1463
000328  f1080801          ADD      r8,r8,#1              ;1464
00032c  e7b3              B        |L21.662|
                  |L21.814|
00032e  2e04              CMP      r6,#4                 ;1466
000330  d104              BNE      |L21.828|
000332  9802              LDR      r0,[sp,#8]            ;1467
000334  f7fffffe          BL       lwip_ntohl
000338  9002              STR      r0,[sp,#8]            ;1467
00033a  e012              B        |L21.866|
                  |L21.828|
00033c  bf00              NOP                            ;1469
00033e  2e01              CMP      r6,#1                 ;1469
000340  d00b              BEQ      |L21.858|
000342  bf00              NOP                            ;1469
000344  a32c              ADR      r3,|L21.1016|
000346  f24052bd          MOV      r2,#0x5bd             ;1469
00034a  a159              ADR      r1,|L21.1200|
00034c  a036              ADR      r0,|L21.1064|
00034e  f7fffffe          BL       __2printf
000352  bf00              NOP                            ;1469
000354  f06f0005          MVN      r0,#5                 ;1469
000358  e663              B        |L21.34|
                  |L21.858|
00035a  bf00              NOP                            ;1469
00035c  f89d0008          LDRB     r0,[sp,#8]            ;1470
000360  9002              STR      r0,[sp,#8]            ;1470
                  |L21.866|
000362  2001              MOVS     r0,#1                 ;1472
000364  4923              LDR      r1,|L21.1012|
000366  f8010008          STRB     r0,[r1,r8]            ;1472
00036a  4950              LDR      r1,|L21.1196|
00036c  9802              LDR      r0,[sp,#8]            ;1473
00036e  f8410028          STR      r0,[r1,r8,LSL #2]     ;1473
                  |L21.882|
000372  bf00              NOP                            ;1475
                  |L21.884|
000374  8960              LDRH     r0,[r4,#0xa]          ;1476
000376  42b8              CMP      r0,r7                 ;1476
000378  dc1d              BGT      |L21.950|
00037a  8960              LDRH     r0,[r4,#0xa]          ;1477
00037c  1a38              SUBS     r0,r7,r0              ;1477
00037e  b287              UXTH     r7,r0                 ;1477
000380  8960              LDRH     r0,[r4,#0xa]          ;1478
000382  ebaa0000          SUB      r0,r10,r0             ;1478
000386  fa1ffa80          UXTH     r10,r0                ;1478
00038a  4557              CMP      r7,r10                ;1479
00038c  da12              BGE      |L21.948|
00038e  f1ba0f00          CMP      r10,#0                ;1479
000392  d00f              BEQ      |L21.948|
000394  6824              LDR      r4,[r4,#0]            ;1480
000396  bf00              NOP                            ;1481
000398  b944              CBNZ     r4,|L21.940|
00039a  bf00              NOP                            ;1481
00039c  a316              ADR      r3,|L21.1016|
00039e  f24052c9          MOV      r2,#0x5c9             ;1481
0003a2  a148              ADR      r1,|L21.1220|
0003a4  a020              ADR      r0,|L21.1064|
0003a6  f7fffffe          BL       __2printf
0003aa  bf00              NOP                            ;1481
                  |L21.940|
0003ac  bf00              NOP                            ;1481
0003ae  6860              LDR      r0,[r4,#4]            ;1482
0003b0  9008              STR      r0,[sp,#0x20]         ;1482
0003b2  e000              B        |L21.950|
                  |L21.948|
0003b4  e008              B        |L21.968|
                  |L21.950|
0003b6  bf00              NOP                            ;1488
                  |L21.952|
0003b8  b134              CBZ      r4,|L21.968|
0003ba  9808              LDR      r0,[sp,#0x20]         ;1380
0003bc  5dc0              LDRB     r0,[r0,r7]            ;1380
0003be  28ff              CMP      r0,#0xff              ;1380
0003c0  d002              BEQ      |L21.968|
0003c2  4557              CMP      r7,r10                ;1380
0003c4  f6ffae55          BLT      |L21.114|
                  |L21.968|
0003c8  bf00              NOP                            ;1485
0003ca  480a              LDR      r0,|L21.1012|
0003cc  7800              LDRB     r0,[r0,#0]            ;1490  ; dhcp_rx_options_given
0003ce  b180              CBZ      r0,|L21.1010|
0003d0  4936              LDR      r1,|L21.1196|
0003d2  6808              LDR      r0,[r1,#0]            ;1491  ; dhcp_rx_options_val
0003d4  2100              MOVS     r1,#0                 ;1492
0003d6  4a07              LDR      r2,|L21.1012|
0003d8  7011              STRB     r1,[r2,#0]            ;1492
0003da  2801              CMP      r0,#1                 ;1493
0003dc  d103              BNE      |L21.998|
0003de  2101              MOVS     r1,#1                 ;1494
0003e0  9106              STR      r1,[sp,#0x18]         ;1494
0003e2  bf00              NOP                            ;1495
0003e4  e082              B        |L21.1260|
                  |L21.998|
0003e6  2802              CMP      r0,#2                 ;1496
0003e8  d177              BNE      |L21.1242|
0003ea  2101              MOVS     r1,#1                 ;1497
0003ec  9105              STR      r1,[sp,#0x14]         ;1497
0003ee  bf00              NOP                            ;1498
0003f0  e07c              B        |L21.1260|
                  |L21.1010|
0003f2  e07c              B        |L21.1262|
                  |L21.1012|
                          DCD      dhcp_rx_options_given
                  |L21.1016|
0003f8  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
0003fc  5749505c
000400  6c776970
000404  2d312e34
000408  2e315c73
00040c  72635c63
000410  6f72655c
000414  64686370
000418  2e6300  
00041b  00                DCB      0
                  |L21.1052|
00041c  6c656e20          DCB      "len == 4",0
000420  3d3d2034
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L21.1064|
000428  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
00042c  7274696f
000430  6e202225
000434  73222066
000438  61696c65
00043c  64206174
000440  206c696e
000444  65202564
000448  20696e20
00044c  25730d0a
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L21.1108|
000454  6c656e20          DCB      "len >= decode_len",0
000458  3e3d2064
00045c  65636f64
000460  655f6c65
000464  6e00    
000466  00                DCB      0
000467  00                DCB      0
                  |L21.1128|
000468  6c656e20          DCB      "len % 4 == 0",0
00046c  25203420
000470  3d3d2030
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L21.1144|
000478  6c656e20          DCB      "len == 1",0
00047c  3d3d2031
000480  00      
000481  00                DCB      0
000482  00                DCB      0
000483  00                DCB      0
                  |L21.1156|
000484  63686563          DCB      "check decode_idx",0
000488  6b206465
00048c  636f6465
000490  5f696478
000494  00      
000495  00                DCB      0
000496  00                DCB      0
000497  00                DCB      0
                  |L21.1176|
000498  6465636f          DCB      "decode_len % 4 == 0",0
00049c  64655f6c
0004a0  656e2025
0004a4  2034203d
0004a8  3d203000
                  |L21.1196|
                          DCD      dhcp_rx_options_val
                  |L21.1200|
0004b0  696e7661          DCB      "invalid decode_len",0
0004b4  6c696420
0004b8  6465636f
0004bc  64655f6c
0004c0  656e00  
0004c3  00                DCB      0
                  |L21.1220|
0004c4  6e657874          DCB      "next pbuf was null",0
0004c8  20706275
0004cc  66207761
0004d0  73206e75
0004d4  6c6c00  
0004d7  00                DCB      0
0004d8  e7ff              B        |L21.1242|
                  |L21.1242|
0004da  2803              CMP      r0,#3                 ;1499
0004dc  d104              BNE      |L21.1256|
0004de  2101              MOVS     r1,#1                 ;1500
0004e0  9105              STR      r1,[sp,#0x14]         ;1500
0004e2  9106              STR      r1,[sp,#0x18]         ;1501
0004e4  bf00              NOP                            ;1502
0004e6  e001              B        |L21.1260|
                  |L21.1256|
0004e8  bf00              NOP                            ;1504
0004ea  bf00              NOP                            ;1504
                  |L21.1260|
0004ec  bf00              NOP                            ;1517
                  |L21.1262|
0004ee  9806              LDR      r0,[sp,#0x18]         ;1518
0004f0  b130              CBZ      r0,|L21.1280|
0004f2  2000              MOVS     r0,#0                 ;1520
0004f4  9006              STR      r0,[sp,#0x18]         ;1520
0004f6  f04f0b6c          MOV      r11,#0x6c             ;1521
0004fa  20ec              MOVS     r0,#0xec              ;1522
0004fc  9007              STR      r0,[sp,#0x1c]         ;1522
0004fe  e59d              B        |L21.60|
                  |L21.1280|
000500  9805              LDR      r0,[sp,#0x14]         ;1524
000502  b130              CBZ      r0,|L21.1298|
000504  2000              MOVS     r0,#0                 ;1525
000506  9005              STR      r0,[sp,#0x14]         ;1525
000508  f04f0b2c          MOV      r11,#0x2c             ;1526
00050c  206c              MOVS     r0,#0x6c              ;1527
00050e  9007              STR      r0,[sp,#0x1c]         ;1527
000510  e594              B        |L21.60|
                  |L21.1298|
000512  2000              MOVS     r0,#0                 ;1530
000514  e585              B        |L21.34|
;;;1532   
                          ENDP


                          AREA ||i.dhcp_rebind||, CODE, READONLY, ALIGN=2

                  dhcp_rebind PROC
;;;1075   static err_t
;;;1076   dhcp_rebind(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1077   {
000002  4605              MOV      r5,r0
;;;1078     struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;1079     err_t result;
;;;1080     u16_t msecs;
;;;1081     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;1082     dhcp_set_state(dhcp, DHCP_REBINDING);
00000a  2104              MOVS     r1,#4
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;1083   
;;;1084     /* create and initialize the DHCP message header */
;;;1085     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000012  2203              MOVS     r2,#3
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       dhcp_create_msg
00001c  4606              MOV      r6,r0
;;;1086     if (result == ERR_OK) {
00001e  b9ee              CBNZ     r6,|L22.92|
;;;1087       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000020  2202              MOVS     r2,#2
000022  2139              MOVS     r1,#0x39
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dhcp_option
;;;1088       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002a  8ca9              LDRH     r1,[r5,#0x24]
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dhcp_option_short
;;;1089   
;;;1090   #if LWIP_NETIF_HOSTNAME
;;;1091       dhcp_option_hostname(dhcp, netif);
;;;1092   #endif /* LWIP_NETIF_HOSTNAME */
;;;1093   
;;;1094   #if 0
;;;1095       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1096       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1097   
;;;1098       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1099       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1100   #endif
;;;1101   
;;;1102       dhcp_option_trailer(dhcp);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dhcp_option_trailer
;;;1103   
;;;1104       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000038  8b22              LDRH     r2,[r4,#0x18]
00003a  32f0              ADDS     r2,r2,#0xf0
00003c  b291              UXTH     r1,r2
00003e  6920              LDR      r0,[r4,#0x10]
000040  f7fffffe          BL       pbuf_realloc
;;;1105   
;;;1106       /* broadcast to server */
;;;1107       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000044  9500              STR      r5,[sp,#0]
000046  2343              MOVS     r3,#0x43
000048  4a12              LDR      r2,|L22.148|
00004a  6921              LDR      r1,[r4,#0x10]
00004c  6860              LDR      r0,[r4,#4]
00004e  f7fffffe          BL       udp_sendto_if
;;;1108       dhcp_delete_msg(dhcp);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_delete_msg
;;;1109       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
000058  bf00              NOP      
00005a  e001              B        |L22.96|
                  |L22.92|
;;;1110     } else {
;;;1111       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
00005c  bf00              NOP      
00005e  bf00              NOP      
                  |L22.96|
;;;1112     }
;;;1113     dhcp->tries++;
000060  7b60              LDRB     r0,[r4,#0xd]
000062  1c40              ADDS     r0,r0,#1
000064  7360              STRB     r0,[r4,#0xd]
;;;1114     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000066  7b60              LDRB     r0,[r4,#0xd]
000068  280a              CMP      r0,#0xa
00006a  da04              BGE      |L22.118|
00006c  7b60              LDRB     r0,[r4,#0xd]
00006e  f44f717a          MOV      r1,#0x3e8
000072  4348              MULS     r0,r1,r0
000074  e001              B        |L22.122|
                  |L22.118|
000076  f2427010          MOV      r0,#0x2710
                  |L22.122|
00007a  b287              UXTH     r7,r0
;;;1115     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00007c  f20710f3          ADD      r0,r7,#0x1f3
000080  f44f71fa          MOV      r1,#0x1f4
000084  fb90f0f1          SDIV     r0,r0,r1
000088  8360              STRH     r0,[r4,#0x1a]
;;;1116     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
00008a  bf00              NOP      
00008c  bf00              NOP      
;;;1117     return result;
00008e  4630              MOV      r0,r6
;;;1118   }
000090  bdf8              POP      {r3-r7,pc}
;;;1119   
                          ENDP

000092  0000              DCW      0x0000
                  |L22.148|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_reboot||, CODE, READONLY, ALIGN=2

                  dhcp_reboot PROC
;;;1125   static err_t
;;;1126   dhcp_reboot(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1127   {
000004  4605              MOV      r5,r0
;;;1128     struct dhcp *dhcp = netif->dhcp;
000006  6a2c              LDR      r4,[r5,#0x20]
;;;1129     err_t result;
;;;1130     u16_t msecs;
;;;1131     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
000008  bf00              NOP      
00000a  bf00              NOP      
;;;1132     dhcp_set_state(dhcp, DHCP_REBOOTING);
00000c  2103              MOVS     r1,#3
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       dhcp_set_state
;;;1133   
;;;1134     /* create and initialize the DHCP message header */
;;;1135     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000014  2203              MOVS     r2,#3
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       dhcp_create_msg
00001e  4606              MOV      r6,r0
;;;1136     if (result == ERR_OK) {
000020  bb5e              CBNZ     r6,|L23.122|
;;;1137       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000022  2202              MOVS     r2,#2
000024  2139              MOVS     r1,#0x39
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dhcp_option
;;;1138       dhcp_option_short(dhcp, 576);
00002c  f44f7110          MOV      r1,#0x240
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option_short
;;;1139   
;;;1140       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000036  2204              MOVS     r2,#4
000038  2132              MOVS     r1,#0x32
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dhcp_option
;;;1141       dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000040  6a60              LDR      r0,[r4,#0x24]
000042  f7fffffe          BL       lwip_ntohl
000046  4680              MOV      r8,r0
000048  4641              MOV      r1,r8
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       dhcp_option_long
;;;1142   
;;;1143       dhcp_option_trailer(dhcp);
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       dhcp_option_trailer
;;;1144   
;;;1145       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000056  8b22              LDRH     r2,[r4,#0x18]
000058  32f0              ADDS     r2,r2,#0xf0
00005a  b291              UXTH     r1,r2
00005c  6920              LDR      r0,[r4,#0x10]
00005e  f7fffffe          BL       pbuf_realloc
;;;1146   
;;;1147       /* broadcast to server */
;;;1148       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000062  9500              STR      r5,[sp,#0]
000064  2343              MOVS     r3,#0x43
000066  4a13              LDR      r2,|L23.180|
000068  6921              LDR      r1,[r4,#0x10]
00006a  6860              LDR      r0,[r4,#4]
00006c  f7fffffe          BL       udp_sendto_if
;;;1149       dhcp_delete_msg(dhcp);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       dhcp_delete_msg
;;;1150       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
000076  bf00              NOP      
000078  e001              B        |L23.126|
                  |L23.122|
;;;1151     } else {
;;;1152       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
00007a  bf00              NOP      
00007c  bf00              NOP      
                  |L23.126|
;;;1153     }
;;;1154     dhcp->tries++;
00007e  7b60              LDRB     r0,[r4,#0xd]
000080  1c40              ADDS     r0,r0,#1
000082  7360              STRB     r0,[r4,#0xd]
;;;1155     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000084  7b60              LDRB     r0,[r4,#0xd]
000086  280a              CMP      r0,#0xa
000088  da04              BGE      |L23.148|
00008a  7b60              LDRB     r0,[r4,#0xd]
00008c  f44f717a          MOV      r1,#0x3e8
000090  4348              MULS     r0,r1,r0
000092  e001              B        |L23.152|
                  |L23.148|
000094  f2427010          MOV      r0,#0x2710
                  |L23.152|
000098  b287              UXTH     r7,r0
;;;1156     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00009a  f20710f3          ADD      r0,r7,#0x1f3
00009e  f44f71fa          MOV      r1,#0x1f4
0000a2  fb90f0f1          SDIV     r0,r0,r1
0000a6  8360              STRH     r0,[r4,#0x1a]
;;;1157     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
0000a8  bf00              NOP      
0000aa  bf00              NOP      
;;;1158     return result;
0000ac  4630              MOV      r0,r6
;;;1159   }
0000ae  e8bd83f8          POP      {r3-r9,pc}
;;;1160   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L23.180|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_recv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_recv PROC
;;;1536   static void
;;;1537   dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1538   {
000004  4681              MOV      r9,r0
000006  4615              MOV      r5,r2
000008  f8ddb028          LDR      r11,[sp,#0x28]
;;;1539     struct netif *netif = (struct netif *)arg;
00000c  464f              MOV      r7,r9
;;;1540     struct dhcp *dhcp = netif->dhcp;
00000e  6a3c              LDR      r4,[r7,#0x20]
;;;1541     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
000010  f8d5a004          LDR      r10,[r5,#4]
;;;1542     u8_t msg_type;
;;;1543     u8_t i;
;;;1544     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
000014  bf00              NOP      
000016  bf00              NOP      
;;;1545       ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
;;;1546     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
000018  bf00              NOP      
00001a  bf00              NOP      
;;;1547     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;1548     /* prevent warnings about unused arguments */
;;;1549     LWIP_UNUSED_ARG(pcb);
;;;1550     LWIP_UNUSED_ARG(addr);
;;;1551     LWIP_UNUSED_ARG(port);
;;;1552   
;;;1553     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
000020  bf00              NOP      
000022  68a0              LDR      r0,[r4,#8]
000024  b140              CBZ      r0,|L24.56|
000026  bf00              NOP      
000028  a345              ADR      r3,|L24.320|
00002a  f2406211          MOV      r2,#0x611
00002e  a14d              ADR      r1,|L24.356|
000030  a051              ADR      r0,|L24.376|
000032  f7fffffe          BL       __2printf
000036  bf00              NOP      
                  |L24.56|
000038  bf00              NOP      
;;;1554   
;;;1555     if (p->len < DHCP_MIN_REPLY_LEN) {
00003a  8968              LDRH     r0,[r5,#0xa]
00003c  282c              CMP      r0,#0x2c
00003e  da02              BGE      |L24.70|
;;;1556       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
000040  bf00              NOP      
000042  bf00              NOP      
;;;1557       goto free_pbuf_and_return;
000044  e075              B        |L24.306|
                  |L24.70|
;;;1558     }
;;;1559   
;;;1560     if (reply_msg->op != DHCP_BOOTREPLY) {
000046  f89a0000          LDRB     r0,[r10,#0]
00004a  2802              CMP      r0,#2
00004c  d002              BEQ      |L24.84|
;;;1561       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
00004e  bf00              NOP      
000050  bf00              NOP      
;;;1562       goto free_pbuf_and_return;
000052  e06e              B        |L24.306|
                  |L24.84|
;;;1563     }
;;;1564     /* iterate through hardware address and match against DHCP message */
;;;1565     for (i = 0; i < netif->hwaddr_len; i++) {
000054  2600              MOVS     r6,#0
000056  e00c              B        |L24.114|
                  |L24.88|
;;;1566       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
000058  f1070027          ADD      r0,r7,#0x27
00005c  5d81              LDRB     r1,[r0,r6]
00005e  f10a001c          ADD      r0,r10,#0x1c
000062  5d80              LDRB     r0,[r0,r6]
000064  4281              CMP      r1,r0
000066  d002              BEQ      |L24.110|
;;;1567         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
000068  bf00              NOP      
00006a  bf00              NOP      
;;;1568           ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
;;;1569           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1570         goto free_pbuf_and_return;
00006c  e061              B        |L24.306|
                  |L24.110|
00006e  1c70              ADDS     r0,r6,#1              ;1565
000070  b2c6              UXTB     r6,r0                 ;1565
                  |L24.114|
000072  f8970026          LDRB     r0,[r7,#0x26]         ;1565
000076  42b0              CMP      r0,r6                 ;1565
000078  dcee              BGT      |L24.88|
;;;1571       }
;;;1572     }
;;;1573     /* match transaction ID against what we expected */
;;;1574     if (ntohl(reply_msg->xid) != dhcp->xid) {
00007a  f8da0004          LDR      r0,[r10,#4]
00007e  f7fffffe          BL       lwip_ntohl
000082  6821              LDR      r1,[r4,#0]
000084  4288              CMP      r0,r1
000086  d002              BEQ      |L24.142|
;;;1575       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
000088  bf00              NOP      
00008a  bf00              NOP      
;;;1576         ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
;;;1577       goto free_pbuf_and_return;
00008c  e051              B        |L24.306|
                  |L24.142|
;;;1578     }
;;;1579     /* option fields could be unfold? */
;;;1580     if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
00008e  4629              MOV      r1,r5
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       dhcp_parse_reply
000096  b110              CBZ      r0,|L24.158|
;;;1581       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
000098  bf00              NOP      
00009a  bf00              NOP      
;;;1582         ("problem unfolding DHCP message - too short on memory?\n"));
;;;1583       goto free_pbuf_and_return;
00009c  e049              B        |L24.306|
                  |L24.158|
;;;1584     }
;;;1585   
;;;1586     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
00009e  bf00              NOP      
0000a0  bf00              NOP      
;;;1587     /* obtain pointer to DHCP message type */
;;;1588     if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
0000a2  4840              LDR      r0,|L24.420|
0000a4  7840              LDRB     r0,[r0,#1]  ; dhcp_rx_options_given
0000a6  b910              CBNZ     r0,|L24.174|
;;;1589       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
0000a8  bf00              NOP      
0000aa  bf00              NOP      
;;;1590       goto free_pbuf_and_return;
0000ac  e041              B        |L24.306|
                  |L24.174|
;;;1591     }
;;;1592   
;;;1593     /* read DHCP message type */
;;;1594     msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
0000ae  483e              LDR      r0,|L24.424|
0000b0  f8908004          LDRB     r8,[r0,#4]  ; dhcp_rx_options_val
;;;1595     /* message type is DHCP ACK? */
;;;1596     if (msg_type == DHCP_ACK) {
0000b4  f1b80f05          CMP      r8,#5
0000b8  d118              BNE      |L24.236|
;;;1597       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
0000ba  bf00              NOP      
0000bc  bf00              NOP      
;;;1598       /* in requesting state? */
;;;1599       if (dhcp->state == DHCP_REQUESTING) {
0000be  7b20              LDRB     r0,[r4,#0xc]
0000c0  2801              CMP      r0,#1
0000c2  d106              BNE      |L24.210|
;;;1600         dhcp_handle_ack(netif);
0000c4  4638              MOV      r0,r7
0000c6  f7fffffe          BL       dhcp_handle_ack
;;;1601   #if DHCP_DOES_ARP_CHECK
;;;1602         /* check if the acknowledged lease address is already in use */
;;;1603         dhcp_check(netif);
0000ca  4638              MOV      r0,r7
0000cc  f7fffffe          BL       dhcp_check
0000d0  e02e              B        |L24.304|
                  |L24.210|
;;;1604   #else
;;;1605         /* bind interface to the acknowledged lease address */
;;;1606         dhcp_bind(netif);
;;;1607   #endif
;;;1608       }
;;;1609       /* already bound to the given lease address? */
;;;1610       else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
0000d2  7b20              LDRB     r0,[r4,#0xc]
0000d4  2803              CMP      r0,#3
0000d6  d005              BEQ      |L24.228|
0000d8  7b20              LDRB     r0,[r4,#0xc]
0000da  2804              CMP      r0,#4
0000dc  d002              BEQ      |L24.228|
0000de  7b20              LDRB     r0,[r4,#0xc]
0000e0  2805              CMP      r0,#5
0000e2  d125              BNE      |L24.304|
                  |L24.228|
;;;1611         dhcp_bind(netif);
0000e4  4638              MOV      r0,r7
0000e6  f7fffffe          BL       dhcp_bind
0000ea  e021              B        |L24.304|
                  |L24.236|
;;;1612       }
;;;1613     }
;;;1614     /* received a DHCP_NAK in appropriate state? */
;;;1615     else if ((msg_type == DHCP_NAK) &&
0000ec  f1b80f06          CMP      r8,#6
0000f0  d111              BNE      |L24.278|
;;;1616       ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
0000f2  7b20              LDRB     r0,[r4,#0xc]
0000f4  2803              CMP      r0,#3
0000f6  d008              BEQ      |L24.266|
0000f8  7b20              LDRB     r0,[r4,#0xc]
0000fa  2801              CMP      r0,#1
0000fc  d005              BEQ      |L24.266|
;;;1617        (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
0000fe  7b20              LDRB     r0,[r4,#0xc]
000100  2804              CMP      r0,#4
000102  d002              BEQ      |L24.266|
000104  7b20              LDRB     r0,[r4,#0xc]
000106  2805              CMP      r0,#5
000108  d105              BNE      |L24.278|
                  |L24.266|
;;;1618       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
00010a  bf00              NOP      
00010c  bf00              NOP      
;;;1619       dhcp_handle_nak(netif);
00010e  4638              MOV      r0,r7
000110  f7fffffe          BL       dhcp_handle_nak
000114  e00c              B        |L24.304|
                  |L24.278|
;;;1620     }
;;;1621     /* received a DHCP_OFFER in DHCP_SELECTING state? */
;;;1622     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
000116  f1b80f02          CMP      r8,#2
00011a  d109              BNE      |L24.304|
00011c  7b20              LDRB     r0,[r4,#0xc]
00011e  2806              CMP      r0,#6
000120  d106              BNE      |L24.304|
;;;1623       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
000122  bf00              NOP      
000124  bf00              NOP      
;;;1624       dhcp->request_timeout = 0;
000126  2000              MOVS     r0,#0
000128  8360              STRH     r0,[r4,#0x1a]
;;;1625       /* remember offered lease */
;;;1626       dhcp_handle_offer(netif);
00012a  4638              MOV      r0,r7
00012c  f7fffffe          BL       dhcp_handle_offer
                  |L24.304|
;;;1627     }
;;;1628   free_pbuf_and_return:
000130  bf00              NOP      
                  |L24.306|
;;;1629     dhcp->msg_in = NULL;
000132  2000              MOVS     r0,#0
000134  60a0              STR      r0,[r4,#8]
;;;1630     pbuf_free(p);
000136  4628              MOV      r0,r5
000138  f7fffffe          BL       pbuf_free
;;;1631   }
00013c  e8bd9ff0          POP      {r4-r12,pc}
;;;1632   
                          ENDP

                  |L24.320|
000140  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000144  5749505c
000148  6c776970
00014c  2d312e34
000150  2e315c73
000154  72635c63
000158  6f72655c
00015c  64686370
000160  2e6300  
000163  00                DCB      0
                  |L24.356|
000164  7265706c          DCB      "reply wasn't freed",0
000168  79207761
00016c  736e2774
000170  20667265
000174  656400  
000177  00                DCB      0
                  |L24.376|
000178  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
00017c  7274696f
000180  6e202225
000184  73222066
000188  61696c65
00018c  64206174
000190  206c696e
000194  65202564
000198  20696e20
00019c  25730d0a
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L24.420|
                          DCD      dhcp_rx_options_given
                  |L24.424|
                          DCD      dhcp_rx_options_val

                          AREA ||i.dhcp_release||, CODE, READONLY, ALIGN=2

                  dhcp_release PROC
;;;1167   err_t
;;;1168   dhcp_release(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1169   {
000002  4605              MOV      r5,r0
;;;1170     struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;1171     err_t result;
;;;1172     u16_t msecs;
;;;1173     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;1174   
;;;1175     /* idle DHCP client */
;;;1176     dhcp_set_state(dhcp, DHCP_OFF);
00000a  2100              MOVS     r1,#0
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;1177     /* clean old DHCP offer */
;;;1178     ip_addr_set_zero(&dhcp->server_ip_addr);
000012  2000              MOVS     r0,#0
000014  6220              STR      r0,[r4,#0x20]
;;;1179     ip_addr_set_zero(&dhcp->offered_ip_addr);
000016  6260              STR      r0,[r4,#0x24]
;;;1180     ip_addr_set_zero(&dhcp->offered_sn_mask);
000018  62a0              STR      r0,[r4,#0x28]
;;;1181     ip_addr_set_zero(&dhcp->offered_gw_addr);
00001a  62e0              STR      r0,[r4,#0x2c]
;;;1182   #if LWIP_DHCP_BOOTP_FILE
;;;1183     ip_addr_set_zero(&dhcp->offered_si_addr);
;;;1184   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1185     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
00001c  63a0              STR      r0,[r4,#0x38]
00001e  6360              STR      r0,[r4,#0x34]
000020  6320              STR      r0,[r4,#0x30]
;;;1186     
;;;1187     /* create and initialize the DHCP message header */
;;;1188     result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
000022  2207              MOVS     r2,#7
000024  4621              MOV      r1,r4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       dhcp_create_msg
00002c  4606              MOV      r6,r0
;;;1189     if (result == ERR_OK) {
00002e  b9ae              CBNZ     r6,|L25.92|
;;;1190       dhcp_option_trailer(dhcp);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option_trailer
;;;1191   
;;;1192       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000036  8b22              LDRH     r2,[r4,#0x18]
000038  32f0              ADDS     r2,r2,#0xf0
00003a  b291              UXTH     r1,r2
00003c  6920              LDR      r0,[r4,#0x10]
00003e  f7fffffe          BL       pbuf_realloc
;;;1193   
;;;1194       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000042  9500              STR      r5,[sp,#0]
000044  2343              MOVS     r3,#0x43
000046  f1040220          ADD      r2,r4,#0x20
00004a  6921              LDR      r1,[r4,#0x10]
00004c  6860              LDR      r0,[r4,#4]
00004e  f7fffffe          BL       udp_sendto_if
;;;1195       dhcp_delete_msg(dhcp);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dhcp_delete_msg
;;;1196       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
000058  bf00              NOP      
00005a  e001              B        |L25.96|
                  |L25.92|
;;;1197     } else {
;;;1198       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
00005c  bf00              NOP      
00005e  bf00              NOP      
                  |L25.96|
;;;1199     }
;;;1200     dhcp->tries++;
000060  7b60              LDRB     r0,[r4,#0xd]
000062  1c40              ADDS     r0,r0,#1
000064  7360              STRB     r0,[r4,#0xd]
;;;1201     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000066  7b60              LDRB     r0,[r4,#0xd]
000068  280a              CMP      r0,#0xa
00006a  da04              BGE      |L25.118|
00006c  7b60              LDRB     r0,[r4,#0xd]
00006e  f44f717a          MOV      r1,#0x3e8
000072  4348              MULS     r0,r1,r0
000074  e001              B        |L25.122|
                  |L25.118|
000076  f2427010          MOV      r0,#0x2710
                  |L25.122|
00007a  b287              UXTH     r7,r0
;;;1202     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00007c  f20710f3          ADD      r0,r7,#0x1f3
000080  f44f71fa          MOV      r1,#0x1f4
000084  fb90f0f1          SDIV     r0,r0,r1
000088  8360              STRH     r0,[r4,#0x1a]
;;;1203     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
00008a  bf00              NOP      
00008c  bf00              NOP      
;;;1204     /* bring the interface down */
;;;1205     netif_set_down(netif);
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       netif_set_down
;;;1206     /* remove IP address from interface */
;;;1207     netif_set_ipaddr(netif, IP_ADDR_ANY);
000094  4906              LDR      r1,|L25.176|
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       netif_set_ipaddr
;;;1208     netif_set_gw(netif, IP_ADDR_ANY);
00009c  4904              LDR      r1,|L25.176|
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       netif_set_gw
;;;1209     netif_set_netmask(netif, IP_ADDR_ANY);
0000a4  4902              LDR      r1,|L25.176|
0000a6  4628              MOV      r0,r5
0000a8  f7fffffe          BL       netif_set_netmask
;;;1210     
;;;1211     return result;
0000ac  4630              MOV      r0,r6
;;;1212   }
0000ae  bdf8              POP      {r3-r7,pc}
;;;1213   
                          ENDP

                  |L25.176|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_renew||, CODE, READONLY, ALIGN=1

                  dhcp_renew PROC
;;;1021   err_t
;;;1022   dhcp_renew(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1023   {
000002  4605              MOV      r5,r0
;;;1024     struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;1025     err_t result;
;;;1026     u16_t msecs;
;;;1027     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;1028     dhcp_set_state(dhcp, DHCP_RENEWING);
00000a  2105              MOVS     r1,#5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;1029   
;;;1030     /* create and initialize the DHCP message header */
;;;1031     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000012  2203              MOVS     r2,#3
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       dhcp_create_msg
00001c  4606              MOV      r6,r0
;;;1032     if (result == ERR_OK) {
00001e  b9f6              CBNZ     r6,|L26.94|
;;;1033       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000020  2202              MOVS     r2,#2
000022  2139              MOVS     r1,#0x39
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dhcp_option
;;;1034       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002a  8ca9              LDRH     r1,[r5,#0x24]
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dhcp_option_short
;;;1035   
;;;1036   #if 0
;;;1037       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1038       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1039   #endif
;;;1040   
;;;1041   #if 0
;;;1042       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1043       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1044   #endif
;;;1045   
;;;1046   #if LWIP_NETIF_HOSTNAME
;;;1047       dhcp_option_hostname(dhcp, netif);
;;;1048   #endif /* LWIP_NETIF_HOSTNAME */
;;;1049   
;;;1050       /* append DHCP message trailer */
;;;1051       dhcp_option_trailer(dhcp);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dhcp_option_trailer
;;;1052   
;;;1053       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000038  8b22              LDRH     r2,[r4,#0x18]
00003a  32f0              ADDS     r2,r2,#0xf0
00003c  b291              UXTH     r1,r2
00003e  6920              LDR      r0,[r4,#0x10]
000040  f7fffffe          BL       pbuf_realloc
;;;1054   
;;;1055       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000044  9500              STR      r5,[sp,#0]
000046  2343              MOVS     r3,#0x43
000048  f1040220          ADD      r2,r4,#0x20
00004c  6921              LDR      r1,[r4,#0x10]
00004e  6860              LDR      r0,[r4,#4]
000050  f7fffffe          BL       udp_sendto_if
;;;1056       dhcp_delete_msg(dhcp);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       dhcp_delete_msg
;;;1057   
;;;1058       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
00005a  bf00              NOP      
00005c  e001              B        |L26.98|
                  |L26.94|
;;;1059     } else {
;;;1060       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
00005e  bf00              NOP      
000060  bf00              NOP      
                  |L26.98|
;;;1061     }
;;;1062     dhcp->tries++;
000062  7b60              LDRB     r0,[r4,#0xd]
000064  1c40              ADDS     r0,r0,#1
000066  7360              STRB     r0,[r4,#0xd]
;;;1063     /* back-off on retries, but to a maximum of 20 seconds */
;;;1064     msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
000068  7b60              LDRB     r0,[r4,#0xd]
00006a  280a              CMP      r0,#0xa
00006c  da04              BGE      |L26.120|
00006e  7b60              LDRB     r0,[r4,#0xd]
000070  f44f61fa          MOV      r1,#0x7d0
000074  4348              MULS     r0,r1,r0
000076  e001              B        |L26.124|
                  |L26.120|
000078  f6446020          MOV      r0,#0x4e20
                  |L26.124|
00007c  b287              UXTH     r7,r0
;;;1065     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00007e  f20710f3          ADD      r0,r7,#0x1f3
000082  f44f71fa          MOV      r1,#0x1f4
000086  fb90f0f1          SDIV     r0,r0,r1
00008a  8360              STRH     r0,[r4,#0x1a]
;;;1066     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
00008c  bf00              NOP      
00008e  bf00              NOP      
;;;1067     return result;
000090  4630              MOV      r0,r6
;;;1068   }
000092  bdf8              POP      {r3-r7,pc}
;;;1069   
                          ENDP


                          AREA ||i.dhcp_select||, CODE, READONLY, ALIGN=2

                  dhcp_select PROC
;;;282    static err_t
;;;283    dhcp_select(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;284    {
000004  4605              MOV      r5,r0
;;;285      struct dhcp *dhcp = netif->dhcp;
000006  6a2c              LDR      r4,[r5,#0x20]
;;;286      err_t result;
;;;287      u16_t msecs;
;;;288    
;;;289      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
000008  bf00              NOP      
00000a  bf00              NOP      
;;;290      dhcp_set_state(dhcp, DHCP_REQUESTING);
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       dhcp_set_state
;;;291    
;;;292      /* create and initialize the DHCP message header */
;;;293      result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000014  2203              MOVS     r2,#3
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       dhcp_create_msg
00001e  4606              MOV      r6,r0
;;;294      if (result == ERR_OK) {
000020  2e00              CMP      r6,#0
000022  d14c              BNE      |L27.190|
;;;295        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000024  2202              MOVS     r2,#2
000026  2139              MOVS     r1,#0x39
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option
;;;296        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00002e  8ca9              LDRH     r1,[r5,#0x24]
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_option_short
;;;297    
;;;298        /* MUST request the offered IP address */
;;;299        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000036  2204              MOVS     r2,#4
000038  2132              MOVS     r1,#0x32
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dhcp_option
;;;300        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000040  6a60              LDR      r0,[r4,#0x24]
000042  f7fffffe          BL       lwip_ntohl
000046  4680              MOV      r8,r0
000048  4641              MOV      r1,r8
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       dhcp_option_long
;;;301    
;;;302        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
000050  2204              MOVS     r2,#4
000052  2136              MOVS     r1,#0x36
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       dhcp_option
;;;303        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
00005a  6a20              LDR      r0,[r4,#0x20]
00005c  f7fffffe          BL       lwip_ntohl
000060  4680              MOV      r8,r0
000062  4641              MOV      r1,r8
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       dhcp_option_long
;;;304    
;;;305        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
00006a  2204              MOVS     r2,#4
00006c  2137              MOVS     r1,#0x37
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       dhcp_option
;;;306        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
000074  2101              MOVS     r1,#1
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       dhcp_option_byte
;;;307        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
00007c  2103              MOVS     r1,#3
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       dhcp_option_byte
;;;308        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000084  211c              MOVS     r1,#0x1c
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       dhcp_option_byte
;;;309        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
00008c  2106              MOVS     r1,#6
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       dhcp_option_byte
;;;310    
;;;311    #if LWIP_NETIF_HOSTNAME
;;;312        dhcp_option_hostname(dhcp, netif);
;;;313    #endif /* LWIP_NETIF_HOSTNAME */
;;;314    
;;;315        dhcp_option_trailer(dhcp);
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       dhcp_option_trailer
;;;316        /* shrink the pbuf to the actual content length */
;;;317        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00009a  8b22              LDRH     r2,[r4,#0x18]
00009c  32f0              ADDS     r2,r2,#0xf0
00009e  b291              UXTH     r1,r2
0000a0  6920              LDR      r0,[r4,#0x10]
0000a2  f7fffffe          BL       pbuf_realloc
;;;318    
;;;319        /* send broadcast to any DHCP server */
;;;320        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
0000a6  9500              STR      r5,[sp,#0]
0000a8  2343              MOVS     r3,#0x43
0000aa  4a15              LDR      r2,|L27.256|
0000ac  6921              LDR      r1,[r4,#0x10]
0000ae  6860              LDR      r0,[r4,#4]
0000b0  f7fffffe          BL       udp_sendto_if
;;;321        dhcp_delete_msg(dhcp);
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       dhcp_delete_msg
;;;322        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
0000ba  bf00              NOP      
0000bc  e001              B        |L27.194|
                  |L27.190|
;;;323      } else {
;;;324        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
0000be  bf00              NOP      
0000c0  bf00              NOP      
                  |L27.194|
;;;325      }
;;;326      dhcp->tries++;
0000c2  7b60              LDRB     r0,[r4,#0xd]
0000c4  1c40              ADDS     r0,r0,#1
0000c6  7360              STRB     r0,[r4,#0xd]
;;;327      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000c8  7b60              LDRB     r0,[r4,#0xd]
0000ca  2806              CMP      r0,#6
0000cc  da03              BGE      |L27.214|
0000ce  7b61              LDRB     r1,[r4,#0xd]
0000d0  2001              MOVS     r0,#1
0000d2  4088              LSLS     r0,r0,r1
0000d4  e000              B        |L27.216|
                  |L27.214|
0000d6  203c              MOVS     r0,#0x3c
                  |L27.216|
0000d8  eb000140          ADD      r1,r0,r0,LSL #1
0000dc  ebc110c0          RSB      r0,r1,r0,LSL #7
0000e0  f64f71ff          MOV      r1,#0xffff
0000e4  ea0107c0          AND      r7,r1,r0,LSL #3
;;;328      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000e8  f20710f3          ADD      r0,r7,#0x1f3
0000ec  f44f71fa          MOV      r1,#0x1f4
0000f0  fb90f0f1          SDIV     r0,r0,r1
0000f4  8360              STRH     r0,[r4,#0x1a]
;;;329      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
0000f6  bf00              NOP      
0000f8  bf00              NOP      
;;;330      return result;
0000fa  4630              MOV      r0,r6
;;;331    }
0000fc  e8bd83f8          POP      {r3-r9,pc}
;;;332    
                          ENDP

                  |L27.256|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_set_state||, CODE, READONLY, ALIGN=1

                  dhcp_set_state PROC
;;;1252   static void
;;;1253   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
000000  7b02              LDRB     r2,[r0,#0xc]
;;;1254   {
;;;1255     if (new_state != dhcp->state) {
000002  428a              CMP      r2,r1
000004  d003              BEQ      |L28.14|
;;;1256       dhcp->state = new_state;
000006  7301              STRB     r1,[r0,#0xc]
;;;1257       dhcp->tries = 0;
000008  2200              MOVS     r2,#0
00000a  7342              STRB     r2,[r0,#0xd]
;;;1258       dhcp->request_timeout = 0;
00000c  8342              STRH     r2,[r0,#0x1a]
                  |L28.14|
;;;1259     }
;;;1260   }
00000e  4770              BX       lr
;;;1261   
                          ENDP


                          AREA ||i.dhcp_set_struct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_set_struct PROC
;;;586    void
;;;587    dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
000000  b570              PUSH     {r4-r6,lr}
;;;588    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;589      LWIP_ASSERT("netif != NULL", netif != NULL);
000006  bf00              NOP      
000008  b944              CBNZ     r4,|L29.28|
00000a  bf00              NOP      
00000c  a314              ADR      r3,|L29.96|
00000e  f240224d          MOV      r2,#0x24d
000012  a11c              ADR      r1,|L29.132|
000014  a01f              ADR      r0,|L29.148|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L29.28|
00001c  bf00              NOP      
;;;590      LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
00001e  bf00              NOP      
000020  b945              CBNZ     r5,|L29.52|
000022  bf00              NOP      
000024  a30e              ADR      r3,|L29.96|
000026  f240224e          MOV      r2,#0x24e
00002a  a125              ADR      r1,|L29.192|
00002c  a019              ADR      r0,|L29.148|
00002e  f7fffffe          BL       __2printf
000032  bf00              NOP      
                  |L29.52|
000034  bf00              NOP      
;;;591      LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
000036  bf00              NOP      
000038  6a20              LDR      r0,[r4,#0x20]
00003a  2800              CMP      r0,#0
00003c  d008              BEQ      |L29.80|
00003e  bf00              NOP      
000040  a307              ADR      r3,|L29.96|
000042  f240224f          MOV      r2,#0x24f
000046  a122              ADR      r1,|L29.208|
000048  a012              ADR      r0,|L29.148|
00004a  f7fffffe          BL       __2printf
00004e  bf00              NOP      
                  |L29.80|
000050  bf00              NOP      
;;;592    
;;;593      /* clear data structure */
;;;594      memset(dhcp, 0, sizeof(struct dhcp));
000052  213c              MOVS     r1,#0x3c
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       __aeabi_memclr4
;;;595      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;596      netif->dhcp = dhcp;
00005a  6225              STR      r5,[r4,#0x20]
;;;597    }
00005c  bd70              POP      {r4-r6,pc}
;;;598    
                          ENDP

00005e  0000              DCW      0x0000
                  |L29.96|
000060  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000064  5749505c
000068  6c776970
00006c  2d312e34
000070  2e315c73
000074  72635c63
000078  6f72655c
00007c  64686370
000080  2e6300  
000083  00                DCB      0
                  |L29.132|
000084  6e657469          DCB      "netif != NULL",0
000088  6620213d
00008c  204e554c
000090  4c00    
000092  00                DCB      0
000093  00                DCB      0
                  |L29.148|
000094  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000098  7274696f
00009c  6e202225
0000a0  73222066
0000a4  61696c65
0000a8  64206174
0000ac  206c696e
0000b0  65202564
0000b4  20696e20
0000b8  25730d0a
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L29.192|
0000c0  64686370          DCB      "dhcp != NULL",0
0000c4  20213d20
0000c8  4e554c4c
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L29.208|
0000d0  6e657469          DCB      "netif already has a struct dhcp set",0
0000d4  6620616c
0000d8  72656164
0000dc  79206861
0000e0  73206120
0000e4  73747275
0000e8  63742064
0000ec  68637020
0000f0  73657400

                          AREA ||i.dhcp_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_start PROC
;;;628    err_t
;;;629    dhcp_start(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;630    {
000002  4605              MOV      r5,r0
;;;631      struct dhcp *dhcp;
;;;632      err_t result = ERR_OK;
000004  2600              MOVS     r6,#0
;;;633    
;;;634      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
000006  bf00              NOP      
000008  b95d              CBNZ     r5,|L30.34|
00000a  bf00              NOP      
00000c  a347              ADR      r3,|L30.300|
00000e  f240227a          MOV      r2,#0x27a
000012  a14f              ADR      r1,|L30.336|
000014  a052              ADR      r0,|L30.352|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
00001c  f06f000d          MVN      r0,#0xd
                  |L30.32|
;;;635      dhcp = netif->dhcp;
;;;636      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;637      /* Remove the flag that says this netif is handled by DHCP,
;;;638         it is set when we succeeded starting. */
;;;639      netif->flags &= ~NETIF_FLAG_DHCP;
;;;640    
;;;641      /* check hwtype of the netif */
;;;642      if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
;;;643        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
;;;644        return ERR_ARG;
;;;645      }
;;;646    
;;;647      /* check MTU of the netif */
;;;648      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
;;;649        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;650        return ERR_MEM;
;;;651      }
;;;652    
;;;653      /* no DHCP client attached yet? */
;;;654      if (dhcp == NULL) {
;;;655        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
;;;656        dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
;;;657        if (dhcp == NULL) {
;;;658          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;659          return ERR_MEM;
;;;660        }
;;;661        /* store this dhcp client in the netif */
;;;662        netif->dhcp = dhcp;
;;;663        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;664      /* already has DHCP client attached */
;;;665      } else {
;;;666        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
;;;667        if (dhcp->pcb != NULL) {
;;;668          udp_remove(dhcp->pcb);
;;;669        }
;;;670        LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
;;;671        LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
;;;672      }
;;;673        
;;;674      /* clear data structure */
;;;675      memset(dhcp, 0, sizeof(struct dhcp));
;;;676      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;677      /* allocate UDP PCB */
;;;678      dhcp->pcb = udp_new();
;;;679      if (dhcp->pcb == NULL) {
;;;680        LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
;;;681        return ERR_MEM;
;;;682      }
;;;683      ip_set_option(dhcp->pcb, SOF_BROADCAST);
;;;684      /* set up local and remote port for the pcb */
;;;685      udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;686      udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
;;;687      /* set up the recv callback and argument */
;;;688      udp_recv(dhcp->pcb, dhcp_recv, netif);
;;;689      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;690      /* (re)start the DHCP negotiation */
;;;691      result = dhcp_discover(netif);
;;;692      if (result != ERR_OK) {
;;;693        /* free resources allocated above */
;;;694        dhcp_stop(netif);
;;;695        return ERR_MEM;
;;;696      }
;;;697      /* Set the flag that says this netif is handled by DHCP. */
;;;698      netif->flags |= NETIF_FLAG_DHCP;
;;;699      return result;
;;;700    }
000020  bd70              POP      {r4-r6,pc}
                  |L30.34|
000022  bf00              NOP                            ;634
000024  6a2c              LDR      r4,[r5,#0x20]         ;635
000026  bf00              NOP                            ;636
000028  bf00              NOP                            ;636
00002a  f8150f2d          LDRB     r0,[r5,#0x2d]!        ;639
00002e  f0200008          BIC      r0,r0,#8              ;639
000032  7028              STRB     r0,[r5,#0]            ;639
000034  f815092d          LDRB     r0,[r5],#-0x2d        ;642
000038  f0000020          AND      r0,r0,#0x20           ;642
00003c  b920              CBNZ     r0,|L30.72|
00003e  bf00              NOP                            ;643
000040  bf00              NOP                            ;643
000042  f06f000d          MVN      r0,#0xd               ;644
000046  e7eb              B        |L30.32|
                  |L30.72|
000048  8ca8              LDRH     r0,[r5,#0x24]         ;648
00004a  f5b07f10          CMP      r0,#0x240             ;648
00004e  da04              BGE      |L30.90|
000050  bf00              NOP                            ;649
000052  bf00              NOP                            ;649
000054  f04f30ff          MOV      r0,#0xffffffff        ;650
000058  e7e2              B        |L30.32|
                  |L30.90|
00005a  b974              CBNZ     r4,|L30.122|
00005c  bf00              NOP                            ;655
00005e  bf00              NOP                            ;655
000060  203c              MOVS     r0,#0x3c              ;656
000062  f7fffffe          BL       mem_malloc
000066  4604              MOV      r4,r0                 ;656
000068  b924              CBNZ     r4,|L30.116|
00006a  bf00              NOP                            ;658
00006c  bf00              NOP                            ;658
00006e  f04f30ff          MOV      r0,#0xffffffff        ;659
000072  e7d5              B        |L30.32|
                  |L30.116|
000074  622c              STR      r4,[r5,#0x20]         ;662
000076  bf00              NOP                            ;663
000078  e020              B        |L30.188|
                  |L30.122|
00007a  bf00              NOP                            ;666
00007c  bf00              NOP                            ;666
00007e  6860              LDR      r0,[r4,#4]            ;667
000080  b110              CBZ      r0,|L30.136|
000082  6860              LDR      r0,[r4,#4]            ;668
000084  f7fffffe          BL       udp_remove
                  |L30.136|
000088  bf00              NOP                            ;670
00008a  6920              LDR      r0,[r4,#0x10]         ;670
00008c  b140              CBZ      r0,|L30.160|
00008e  bf00              NOP                            ;670
000090  a326              ADR      r3,|L30.300|
000092  f240229e          MOV      r2,#0x29e             ;670
000096  a13d              ADR      r1,|L30.396|
000098  a031              ADR      r0,|L30.352|
00009a  f7fffffe          BL       __2printf
00009e  bf00              NOP                            ;670
                  |L30.160|
0000a0  bf00              NOP                            ;670
0000a2  bf00              NOP                            ;671
0000a4  68a0              LDR      r0,[r4,#8]            ;671
0000a6  b140              CBZ      r0,|L30.186|
0000a8  bf00              NOP                            ;671
0000aa  a320              ADR      r3,|L30.300|
0000ac  f240229f          MOV      r2,#0x29f             ;671
0000b0  a13c              ADR      r1,|L30.420|
0000b2  a02b              ADR      r0,|L30.352|
0000b4  f7fffffe          BL       __2printf
0000b8  bf00              NOP                            ;671
                  |L30.186|
0000ba  bf00              NOP                            ;671
                  |L30.188|
0000bc  213c              MOVS     r1,#0x3c              ;675
0000be  4620              MOV      r0,r4                 ;675
0000c0  f7fffffe          BL       __aeabi_memclr4
0000c4  f7fffffe          BL       udp_new
0000c8  6060              STR      r0,[r4,#4]            ;678
0000ca  6860              LDR      r0,[r4,#4]            ;679
0000cc  b920              CBNZ     r0,|L30.216|
0000ce  bf00              NOP                            ;680
0000d0  bf00              NOP                            ;680
0000d2  f04f30ff          MOV      r0,#0xffffffff        ;681
0000d6  e7a3              B        |L30.32|
                  |L30.216|
0000d8  6860              LDR      r0,[r4,#4]            ;683
0000da  7a00              LDRB     r0,[r0,#8]            ;683
0000dc  f0400020          ORR      r0,r0,#0x20           ;683
0000e0  6861              LDR      r1,[r4,#4]            ;683
0000e2  7208              STRB     r0,[r1,#8]            ;683
0000e4  2244              MOVS     r2,#0x44              ;685
0000e6  4934              LDR      r1,|L30.440|
0000e8  6860              LDR      r0,[r4,#4]            ;685
0000ea  f7fffffe          BL       udp_bind
0000ee  2243              MOVS     r2,#0x43              ;686
0000f0  4931              LDR      r1,|L30.440|
0000f2  6860              LDR      r0,[r4,#4]            ;686
0000f4  f7fffffe          BL       udp_connect
0000f8  462a              MOV      r2,r5                 ;688
0000fa  4930              LDR      r1,|L30.444|
0000fc  6860              LDR      r0,[r4,#4]            ;688
0000fe  f7fffffe          BL       udp_recv
000102  bf00              NOP                            ;689
000104  bf00              NOP                            ;689
000106  4628              MOV      r0,r5                 ;691
000108  f7fffffe          BL       dhcp_discover
00010c  4606              MOV      r6,r0                 ;691
00010e  b12e              CBZ      r6,|L30.284|
000110  4628              MOV      r0,r5                 ;694
000112  f7fffffe          BL       dhcp_stop
000116  f04f30ff          MOV      r0,#0xffffffff        ;695
00011a  e781              B        |L30.32|
                  |L30.284|
00011c  f895002d          LDRB     r0,[r5,#0x2d]         ;698
000120  f0400008          ORR      r0,r0,#8              ;698
000124  f885002d          STRB     r0,[r5,#0x2d]         ;698
000128  4630              MOV      r0,r6                 ;699
00012a  e779              B        |L30.32|
;;;701    
                          ENDP

                  |L30.300|
00012c  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
000130  5749505c
000134  6c776970
000138  2d312e34
00013c  2e315c73
000140  72635c63
000144  6f72655c
000148  64686370
00014c  2e6300  
00014f  00                DCB      0
                  |L30.336|
000150  6e657469          DCB      "netif != NULL",0
000154  6620213d
000158  204e554c
00015c  4c00    
00015e  00                DCB      0
00015f  00                DCB      0
                  |L30.352|
000160  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000164  7274696f
000168  6e202225
00016c  73222066
000170  61696c65
000174  64206174
000178  206c696e
00017c  65202564
000180  20696e20
000184  25730d0a
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L30.396|
00018c  70627566          DCB      "pbuf p_out wasn't freed",0
000190  20705f6f
000194  75742077
000198  61736e27
00019c  74206672
0001a0  65656400
                  |L30.420|
0001a4  7265706c          DCB      "reply wasn't freed",0
0001a8  79207761
0001ac  736e2774
0001b0  20667265
0001b4  656400  
0001b7  00                DCB      0
                  |L30.440|
                          DCD      ip_addr_any
                  |L30.444|
                          DCD      dhcp_recv

                          AREA ||i.dhcp_stop||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_stop PROC
;;;1219   void
;;;1220   dhcp_stop(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;1221   {
000002  4605              MOV      r5,r0
;;;1222     struct dhcp *dhcp;
;;;1223     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
000004  bf00              NOP      
000006  b94d              CBNZ     r5,|L31.28|
000008  bf00              NOP      
00000a  a317              ADR      r3,|L31.104|
00000c  f24042c7          MOV      r2,#0x4c7
000010  a11e              ADR      r1,|L31.140|
000012  a025              ADR      r0,|L31.168|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
                  |L31.26|
;;;1224     dhcp = netif->dhcp;
;;;1225     /* Remove the flag that says this netif is handled by DHCP. */
;;;1226     netif->flags &= ~NETIF_FLAG_DHCP;
;;;1227   
;;;1228     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
;;;1229     /* netif is DHCP configured? */
;;;1230     if (dhcp != NULL) {
;;;1231   #if LWIP_DHCP_AUTOIP_COOP
;;;1232       if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1233         autoip_stop(netif);
;;;1234         dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1235       }
;;;1236   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1237   
;;;1238       if (dhcp->pcb != NULL) {
;;;1239         udp_remove(dhcp->pcb);
;;;1240         dhcp->pcb = NULL;
;;;1241       }
;;;1242       LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
;;;1243       dhcp_set_state(dhcp, DHCP_OFF);
;;;1244     }
;;;1245   }
00001a  bd70              POP      {r4-r6,pc}
                  |L31.28|
00001c  bf00              NOP                            ;1223
00001e  6a2c              LDR      r4,[r5,#0x20]         ;1224
000020  f895002d          LDRB     r0,[r5,#0x2d]         ;1226
000024  f0200008          BIC      r0,r0,#8              ;1226
000028  f885002d          STRB     r0,[r5,#0x2d]         ;1226
00002c  bf00              NOP                            ;1228
00002e  bf00              NOP                            ;1228
000030  2c00              CMP      r4,#0                 ;1230
000032  d017              BEQ      |L31.100|
000034  6860              LDR      r0,[r4,#4]            ;1238
000036  b120              CBZ      r0,|L31.66|
000038  6860              LDR      r0,[r4,#4]            ;1239
00003a  f7fffffe          BL       udp_remove
00003e  2000              MOVS     r0,#0                 ;1240
000040  6060              STR      r0,[r4,#4]            ;1240
                  |L31.66|
000042  bf00              NOP                            ;1242
000044  68a0              LDR      r0,[r4,#8]            ;1242
000046  b140              CBZ      r0,|L31.90|
000048  bf00              NOP                            ;1242
00004a  a307              ADR      r3,|L31.104|
00004c  f24042da          MOV      r2,#0x4da             ;1242
000050  a120              ADR      r1,|L31.212|
000052  a015              ADR      r0,|L31.168|
000054  f7fffffe          BL       __2printf
000058  bf00              NOP                            ;1242
                  |L31.90|
00005a  bf00              NOP                            ;1242
00005c  2100              MOVS     r1,#0                 ;1243
00005e  4620              MOV      r0,r4                 ;1243
000060  f7fffffe          BL       dhcp_set_state
                  |L31.100|
000064  bf00              NOP      
000066  e7d8              B        |L31.26|
;;;1246   
                          ENDP

                  |L31.104|
000068  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\dhcp.c",0
00006c  5749505c
000070  6c776970
000074  2d312e34
000078  2e315c73
00007c  72635c63
000080  6f72655c
000084  64686370
000088  2e6300  
00008b  00                DCB      0
                  |L31.140|
00008c  64686370          DCB      "dhcp_stop: netif != NULL",0
000090  5f73746f
000094  703a206e
000098  65746966
00009c  20213d20
0000a0  4e554c4c
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L31.168|
0000a8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000ac  7274696f
0000b0  6e202225
0000b4  73222066
0000b8  61696c65
0000bc  64206174
0000c0  206c696e
0000c4  65202564
0000c8  20696e20
0000cc  25730d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L31.212|
0000d4  7265706c          DCB      "reply wasn't freed",0
0000d8  79207761
0000dc  736e2774
0000e0  20667265
0000e4  656400  
0000e7  00                DCB      0

                          AREA ||i.dhcp_t1_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_t1_timeout PROC
;;;464    static void
;;;465    dhcp_t1_timeout(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;466    {
000002  4605              MOV      r5,r0
;;;467      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;468      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;469      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
00000a  7b20              LDRB     r0,[r4,#0xc]
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L32.28|
000010  7b20              LDRB     r0,[r4,#0xc]
000012  280a              CMP      r0,#0xa
000014  d002              BEQ      |L32.28|
;;;470          (dhcp->state == DHCP_RENEWING)) {
000016  7b20              LDRB     r0,[r4,#0xc]
000018  2805              CMP      r0,#5
00001a  d104              BNE      |L32.38|
                  |L32.28|
;;;471        /* just retry to renew - note that the rebind timer (t2) will
;;;472         * eventually time-out if renew tries fail. */
;;;473        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;474                    ("dhcp_t1_timeout(): must renew\n"));
;;;475        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;476           DHCP_RENEWING, not DHCP_BOUND */
;;;477        dhcp_renew(netif);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       dhcp_renew
                  |L32.38|
;;;478      }
;;;479    }
000026  bd70              POP      {r4-r6,pc}
;;;480    
                          ENDP


                          AREA ||i.dhcp_t2_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_t2_timeout PROC
;;;486    static void
;;;487    dhcp_t2_timeout(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;488    {
000002  4605              MOV      r5,r0
;;;489      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;490      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;491      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
00000a  7b20              LDRB     r0,[r4,#0xc]
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L33.28|
000010  7b20              LDRB     r0,[r4,#0xc]
000012  280a              CMP      r0,#0xa
000014  d002              BEQ      |L33.28|
;;;492          (dhcp->state == DHCP_RENEWING)) {
000016  7b20              LDRB     r0,[r4,#0xc]
000018  2805              CMP      r0,#5
00001a  d104              BNE      |L33.38|
                  |L33.28|
;;;493        /* just retry to rebind */
;;;494        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;495                    ("dhcp_t2_timeout(): must rebind\n"));
;;;496        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;497           DHCP_REBINDING, not DHCP_BOUND */
;;;498        dhcp_rebind(netif);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       dhcp_rebind
                  |L33.38|
;;;499      }
;;;500    }
000026  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP


                          AREA ||i.dhcp_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_timeout PROC
;;;401    static void
;;;402    dhcp_timeout(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;403    {
000002  4605              MOV      r5,r0
;;;404      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;405      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;406      /* back-off period has passed, or server selection timed out */
;;;407      if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
00000a  7b20              LDRB     r0,[r4,#0xc]
00000c  280c              CMP      r0,#0xc
00000e  d002              BEQ      |L34.22|
000010  7b20              LDRB     r0,[r4,#0xc]
000012  2806              CMP      r0,#6
000014  d105              BNE      |L34.34|
                  |L34.22|
;;;408        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
000016  bf00              NOP      
000018  bf00              NOP      
;;;409        dhcp_discover(netif);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       dhcp_discover
000020  e04f              B        |L34.194|
                  |L34.34|
;;;410      /* receiving the requested lease timed out */
;;;411      } else if (dhcp->state == DHCP_REQUESTING) {
000022  7b20              LDRB     r0,[r4,#0xc]
000024  2801              CMP      r0,#1
000026  d111              BNE      |L34.76|
;;;412        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
000028  bf00              NOP      
00002a  bf00              NOP      
;;;413        if (dhcp->tries <= 5) {
00002c  7b60              LDRB     r0,[r4,#0xd]
00002e  2805              CMP      r0,#5
000030  dc03              BGT      |L34.58|
;;;414          dhcp_select(netif);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       dhcp_select
000038  e043              B        |L34.194|
                  |L34.58|
;;;415        } else {
;;;416          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
00003a  bf00              NOP      
00003c  bf00              NOP      
;;;417          dhcp_release(netif);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       dhcp_release
;;;418          dhcp_discover(netif);
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       dhcp_discover
00004a  e03a              B        |L34.194|
                  |L34.76|
;;;419        }
;;;420    #if DHCP_DOES_ARP_CHECK
;;;421      /* received no ARP reply for the offered address (which is good) */
;;;422      } else if (dhcp->state == DHCP_CHECKING) {
00004c  7b20              LDRB     r0,[r4,#0xc]
00004e  2808              CMP      r0,#8
000050  d10c              BNE      |L34.108|
;;;423        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
000052  bf00              NOP      
000054  bf00              NOP      
;;;424        if (dhcp->tries <= 1) {
000056  7b60              LDRB     r0,[r4,#0xd]
000058  2801              CMP      r0,#1
00005a  dc03              BGT      |L34.100|
;;;425          dhcp_check(netif);
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       dhcp_check
000062  e02e              B        |L34.194|
                  |L34.100|
;;;426        /* no ARP replies on the offered address,
;;;427           looks like the IP address is indeed free */
;;;428        } else {
;;;429          /* bind the interface to the offered address */
;;;430          dhcp_bind(netif);
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       dhcp_bind
00006a  e02a              B        |L34.194|
                  |L34.108|
;;;431        }
;;;432    #endif /* DHCP_DOES_ARP_CHECK */
;;;433      }
;;;434      /* did not get response to renew request? */
;;;435      else if (dhcp->state == DHCP_RENEWING) {
00006c  7b20              LDRB     r0,[r4,#0xc]
00006e  2805              CMP      r0,#5
000070  d105              BNE      |L34.126|
;;;436        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
000072  bf00              NOP      
000074  bf00              NOP      
;;;437        /* just retry renewal */
;;;438        /* note that the rebind timer will eventually time-out if renew does not work */
;;;439        dhcp_renew(netif);
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       dhcp_renew
00007c  e021              B        |L34.194|
                  |L34.126|
;;;440      /* did not get response to rebind request? */
;;;441      } else if (dhcp->state == DHCP_REBINDING) {
00007e  7b20              LDRB     r0,[r4,#0xc]
000080  2804              CMP      r0,#4
000082  d111              BNE      |L34.168|
;;;442        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
000084  bf00              NOP      
000086  bf00              NOP      
;;;443        if (dhcp->tries <= 8) {
000088  7b60              LDRB     r0,[r4,#0xd]
00008a  2808              CMP      r0,#8
00008c  dc03              BGT      |L34.150|
;;;444          dhcp_rebind(netif);
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       dhcp_rebind
000094  e015              B        |L34.194|
                  |L34.150|
;;;445        } else {
;;;446          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
000096  bf00              NOP      
000098  bf00              NOP      
;;;447          dhcp_release(netif);
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       dhcp_release
;;;448          dhcp_discover(netif);
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       dhcp_discover
0000a6  e00c              B        |L34.194|
                  |L34.168|
;;;449        }
;;;450      } else if (dhcp->state == DHCP_REBOOTING) {
0000a8  7b20              LDRB     r0,[r4,#0xc]
0000aa  2803              CMP      r0,#3
0000ac  d109              BNE      |L34.194|
;;;451        if (dhcp->tries < REBOOT_TRIES) {
0000ae  7b60              LDRB     r0,[r4,#0xd]
0000b0  2802              CMP      r0,#2
0000b2  da03              BGE      |L34.188|
;;;452          dhcp_reboot(netif);
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       dhcp_reboot
0000ba  e002              B        |L34.194|
                  |L34.188|
;;;453        } else {
;;;454          dhcp_discover(netif);
0000bc  4628              MOV      r0,r5
0000be  f7fffffe          BL       dhcp_discover
                  |L34.194|
;;;455        }
;;;456      }
;;;457    }
0000c2  bd70              POP      {r4-r6,pc}
;;;458    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dhcp_rx_options_val
                          %        40
                  dhcp_rx_options_given
                          %        10

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  64686370          DCB      "dhcp_option: dhcp->options_out_len + 2 + option_len <= "
000004  5f6f7074
000008  696f6e3a
00000c  20646863
000010  702d3e6f
000014  7074696f
000018  6e735f6f
00001c  75745f6c
000020  656e202b
000024  2032202b
000028  206f7074
00002c  696f6e5f
000030  6c656e20
000034  3c3d20  
000037  44484350          DCB      "DHCP_OPTIONS_LEN",0
00003b  5f4f5054
00003f  494f4e53
000043  5f4c454e
000047  00      
000048  64686370          DCB      "dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OP"
00004c  5f6f7074
000050  696f6e5f
000054  73686f72
000058  743a2064
00005c  6863702d
000060  3e6f7074
000064  696f6e73
000068  5f6f7574
00006c  5f6c656e
000070  202b2032
000074  203c3d20
000078  44484350
00007c  5f4f50  
00007f  54494f4e          DCB      "TIONS_LEN",0
000083  535f4c45
000087  4e00    

                          AREA ||.data||, DATA, ALIGN=2

                  xid
                          DCD      0xabcd0000
