; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\lwip_comm.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\lwip_comm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\lwip_comm.crf ..\LWIP\lwip_app\lwip_comm\lwip_comm.c]
                          THUMB

                          AREA ||i.lwip_comm_default_ip_set||, CODE, READONLY, ALIGN=2

                  lwip_comm_default_ip_set PROC
;;;128    //lwipx:lwip控制结构体指针
;;;129    void lwip_comm_default_ip_set(__lwip_dev *lwipx)
000000  21c0              MOVS     r1,#0xc0
;;;130    {
;;;131    	//默认远端IP为:192.168.1.100
;;;132    	lwipx->remoteip[0]=192;	
000002  7181              STRB     r1,[r0,#6]
;;;133    	lwipx->remoteip[1]=168;
000004  22a8              MOVS     r2,#0xa8
000006  71c2              STRB     r2,[r0,#7]
;;;134    	lwipx->remoteip[2]=1;
000008  2201              MOVS     r2,#1
00000a  7202              STRB     r2,[r0,#8]
;;;135    	lwipx->remoteip[3]=100;
00000c  2264              MOVS     r2,#0x64
00000e  7242              STRB     r2,[r0,#9]
;;;136    	//MAC地址设置(高三字节固定为:2.0.0,低三字节用STM32唯一ID)
;;;137    	lwipx->mac[0]=dm9000cfg.mac_addr[0];
000010  4915              LDR      r1,|L1.104|
000012  7909              LDRB     r1,[r1,#4]  ; dm9000cfg
000014  7001              STRB     r1,[r0,#0]
;;;138    	lwipx->mac[1]=dm9000cfg.mac_addr[1];
000016  4914              LDR      r1,|L1.104|
000018  7949              LDRB     r1,[r1,#5]
00001a  7041              STRB     r1,[r0,#1]
;;;139    	lwipx->mac[2]=dm9000cfg.mac_addr[2];
00001c  4912              LDR      r1,|L1.104|
00001e  7989              LDRB     r1,[r1,#6]
000020  7081              STRB     r1,[r0,#2]
;;;140    	lwipx->mac[3]=dm9000cfg.mac_addr[3];
000022  4911              LDR      r1,|L1.104|
000024  79c9              LDRB     r1,[r1,#7]
000026  70c1              STRB     r1,[r0,#3]
;;;141    	lwipx->mac[4]=dm9000cfg.mac_addr[4];
000028  490f              LDR      r1,|L1.104|
00002a  7a09              LDRB     r1,[r1,#8]
00002c  7101              STRB     r1,[r0,#4]
;;;142    	lwipx->mac[5]=dm9000cfg.mac_addr[5]; 
00002e  490e              LDR      r1,|L1.104|
000030  7a49              LDRB     r1,[r1,#9]
000032  7141              STRB     r1,[r0,#5]
;;;143    	//默认本地IP为:192.168.1.30
;;;144    	lwipx->ip[0]=192;	
000034  21c0              MOVS     r1,#0xc0
000036  7281              STRB     r1,[r0,#0xa]
;;;145    	lwipx->ip[1]=168;
000038  22a8              MOVS     r2,#0xa8
00003a  72c2              STRB     r2,[r0,#0xb]
;;;146    	lwipx->ip[2]=1;
00003c  2201              MOVS     r2,#1
00003e  7302              STRB     r2,[r0,#0xc]
;;;147    	lwipx->ip[3]=30;
000040  221e              MOVS     r2,#0x1e
000042  7342              STRB     r2,[r0,#0xd]
;;;148    	//默认子网掩码:255.255.255.0
;;;149    	lwipx->netmask[0]=255;	
000044  21ff              MOVS     r1,#0xff
000046  7381              STRB     r1,[r0,#0xe]
;;;150    	lwipx->netmask[1]=255;
000048  22ff              MOVS     r2,#0xff
00004a  73c2              STRB     r2,[r0,#0xf]
;;;151    	lwipx->netmask[2]=255;
00004c  7402              STRB     r2,[r0,#0x10]
;;;152    	lwipx->netmask[3]=0;
00004e  2200              MOVS     r2,#0
000050  7442              STRB     r2,[r0,#0x11]
;;;153    	//默认网关:192.168.1.1
;;;154    	lwipx->gateway[0]=192;	
000052  21c0              MOVS     r1,#0xc0
000054  7481              STRB     r1,[r0,#0x12]
;;;155    	lwipx->gateway[1]=168;
000056  22a8              MOVS     r2,#0xa8
000058  74c2              STRB     r2,[r0,#0x13]
;;;156    	lwipx->gateway[2]=1;
00005a  2201              MOVS     r2,#1
00005c  7502              STRB     r2,[r0,#0x14]
;;;157    	lwipx->gateway[3]=1;	
00005e  7542              STRB     r2,[r0,#0x15]
;;;158    	lwipx->dhcpstatus=0;//没有DHCP	
000060  2100              MOVS     r1,#0
000062  7581              STRB     r1,[r0,#0x16]
;;;159    } 
000064  4770              BX       lr
;;;160    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      dm9000cfg

                          AREA ||i.lwip_comm_dhcp_creat||, CODE, READONLY, ALIGN=2

                  lwip_comm_dhcp_creat PROC
;;;224    	//创建DHCP任务
;;;225    	void lwip_comm_dhcp_creat(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;226    {
;;;227    	taskENTER_CRITICAL();  //进入临界区
000002  f7fffffe          BL       vPortEnterCritical
;;;228    	xTaskCreate((TaskFunction_t)lwip_dhcp_task,
000006  4807              LDR      r0,|L2.36|
000008  2107              MOVS     r1,#7
00000a  2300              MOVS     r3,#0
00000c  f44f7280          MOV      r2,#0x100
000010  e9cd1000          STRD     r1,r0,[sp,#0]
000014  a104              ADR      r1,|L2.40|
000016  4808              LDR      r0,|L2.56|
000018  f7fffffe          BL       xTaskCreate
;;;229    						(const char*  )"lwip_dhcp_task",
;;;230    						(uint16_t     )LWIP_DHCP_STK_SIZE,
;;;231    						(void*        )NULL,
;;;232    						(UBaseType_t  )LWIP_DHCP_TASK_PRIO,
;;;233    						(TaskHandle_t*)&LWIP_DHCP_TaskHandler);//创建DHCP任务 						
;;;234    	taskEXIT_CRITICAL();  //退出临界区
00001c  f7fffffe          BL       vPortExitCritical
;;;235    }
000020  bd1c              POP      {r2-r4,pc}
;;;236    //删除DHCP任务
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      LWIP_DHCP_TaskHandler
                  |L2.40|
000028  6c776970          DCB      "lwip_dhcp_task",0
00002c  5f646863
000030  705f7461
000034  736b00  
000037  00                DCB      0
                  |L2.56|
                          DCD      lwip_dhcp_task

                          AREA ||i.lwip_comm_dhcp_delete||, CODE, READONLY, ALIGN=2

                  lwip_comm_dhcp_delete PROC
;;;236    //删除DHCP任务
;;;237    void lwip_comm_dhcp_delete(void)
000000  b510              PUSH     {r4,lr}
;;;238    {
;;;239    	dhcp_stop(&lwip_netif); 		//关闭DHCP
000002  4804              LDR      r0,|L3.20|
000004  f7fffffe          BL       dhcp_stop
;;;240    	vTaskDelete(LWIP_DHCP_TaskHandler);	//删除DHCP任务
000008  4803              LDR      r0,|L3.24|
00000a  6800              LDR      r0,[r0,#0]  ; LWIP_DHCP_TaskHandler
00000c  f7fffffe          BL       vTaskDelete
;;;241    }
000010  bd10              POP      {r4,pc}
;;;242    //lwip_dhcp_task任务
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      lwip_netif
                  |L3.24|
                          DCD      LWIP_DHCP_TaskHandler

                          AREA ||i.lwip_comm_init||, CODE, READONLY, ALIGN=2

                  lwip_comm_init PROC
;;;165    //      3,网卡添加失败.
;;;166    u8 lwip_comm_init(void)
000000  b510              PUSH     {r4,lr}
;;;167    {
000002  b086              SUB      sp,sp,#0x18
;;;168    	struct netif *Netif_Init_Flag;		//调用netif_add()函数时的返回值,用于判断网络初始化是否成功
;;;169    	struct ip_addr ipaddr;  			//ip地址
;;;170    	struct ip_addr netmask; 			//子网掩码
;;;171    	struct ip_addr gw;      			//默认网关 
;;;172    	if (lwip_comm_mem_malloc()) return 1;	//内存申请失败
000004  f7fffffe          BL       lwip_comm_mem_malloc
000008  b110              CBZ      r0,|L4.16|
00000a  2001              MOVS     r0,#1
                  |L4.12|
;;;173    	dm9000input=xSemaphoreCreateBinary();			//创建数据接收信号量,必须在DM9000初始化之前创建
;;;174        if(dm9000input==NULL)
;;;175            {
;;;176                printf("dm9000input创建失败\r\n");
;;;177            }
;;;178    	dm9000lock=xSemaphoreCreateMutex();	//创建互斥信号量	
;;;179    	if(DM9000_Init())return 2;			//初始化DM9000
;;;180    	
;;;181    	tcpip_init(NULL,NULL);				//初始化tcp ip内核,该函数里面会创建tcpip_thread内核任务
;;;182    	lwip_comm_default_ip_set(&lwipdev);	//设置默认IP等信息
;;;183    //tcpip_init(NULL,NULL);	
;;;184    	
;;;185    #if LWIP_DHCP		//使用动态IP
;;;186    	ipaddr.addr = 0;
;;;187    	netmask.addr = 0;
;;;188    	gw.addr = 0;
;;;189    #else				//使用静态IP
;;;190    	IP4_ADDR(&ipaddr,lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);
;;;191    	IP4_ADDR(&netmask,lwipdev.netmask[0],lwipdev.netmask[1] ,lwipdev.netmask[2],lwipdev.netmask[3]);
;;;192    	IP4_ADDR(&gw,lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]);
;;;193    	printf("网卡en的MAC地址为:................%d.%d.%d.%d.%d.%d\r\n",lwipdev.mac[0],lwipdev.mac[1],lwipdev.mac[2],lwipdev.mac[3],lwipdev.mac[4],lwipdev.mac[5]);
;;;194    	printf("静态IP地址........................%d.%d.%d.%d\r\n",lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);
;;;195    	printf("子网掩码..........................%d.%d.%d.%d\r\n",lwipdev.netmask[0],lwipdev.netmask[1],lwipdev.netmask[2],lwipdev.netmask[3]);
;;;196    	printf("默认网关..........................%d.%d.%d.%d\r\n",lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]);
;;;197    #endif
;;;198         //netif_add(&lwip_netif,&ipaddr,&netmask,&gw,NULL,&ethernetif_init,&ethernet_input);
;;;199    	Netif_Init_Flag=netif_add(&lwip_netif,&ipaddr,&netmask,&gw,NULL,&ethernetif_init,&tcpip_input);//向网卡列表中添加一个网口
;;;200    	if(Netif_Init_Flag!=NULL) 
;;;201        //网卡添加失败 
;;;202    	//网口添加成功后,设置netif为默认值,并且打开netif网口
;;;203    	{
;;;204    		netif_set_default(&lwip_netif); //设置netif为默认网口
;;;205    		netif_set_up(&lwip_netif);		//打开netif网口
;;;206    	}
;;;207    	//创建DM9000任务
;;;208    	taskENTER_CRITICAL();  //进入临界区
;;;209    	xTaskCreate((TaskFunction_t)lwip_dm9000_input_task,
;;;210    						(const char*  )"lwip_dm9000_input_task",
;;;211    						(uint16_t     )LWIP_DM9000_INPUT_TASK_SIZE,
;;;212    						(void*        )NULL,
;;;213    						(UBaseType_t  )LWIP_DM9000_INPUT_TASK_PRIO,
;;;214    						(TaskHandle_t*)&LWIP_DM9000_TaskHandler);//创建DHCP任务 						
;;;215    	taskEXIT_CRITICAL();  //退出临界区
;;;216    //#if	LWIP_DHCP
;;;217    //	lwip_comm_dhcp_creat();		//创建DHCP任务
;;;218    //#endif		
;;;219    	return 0;//操作OK.
;;;220    }   
00000c  b006              ADD      sp,sp,#0x18
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  2203              MOVS     r2,#3                 ;173
000012  2100              MOVS     r1,#0                 ;173
000014  2001              MOVS     r0,#1                 ;173
000016  f7fffffe          BL       xQueueGenericCreate
00001a  4920              LDR      r1,|L4.156|
00001c  6008              STR      r0,[r1,#0]            ;173  ; dm9000input
00001e  4608              MOV      r0,r1                 ;174
000020  6800              LDR      r0,[r0,#0]            ;174  ; dm9000input
000022  b910              CBNZ     r0,|L4.42|
000024  a01e              ADR      r0,|L4.160|
000026  f7fffffe          BL       __2printf
                  |L4.42|
00002a  2001              MOVS     r0,#1                 ;178
00002c  f7fffffe          BL       xQueueCreateMutex
000030  4921              LDR      r1,|L4.184|
000032  6008              STR      r0,[r1,#0]            ;178  ; dm9000lock
000034  f7fffffe          BL       DM9000_Init
000038  b108              CBZ      r0,|L4.62|
00003a  2002              MOVS     r0,#2                 ;179
00003c  e7e6              B        |L4.12|
                  |L4.62|
00003e  2100              MOVS     r1,#0                 ;181
000040  4608              MOV      r0,r1                 ;181
000042  f7fffffe          BL       tcpip_init
000046  481d              LDR      r0,|L4.188|
000048  f7fffffe          BL       lwip_comm_default_ip_set
00004c  2000              MOVS     r0,#0                 ;186
00004e  9005              STR      r0,[sp,#0x14]         ;186
000050  9004              STR      r0,[sp,#0x10]         ;187
000052  9003              STR      r0,[sp,#0xc]          ;188
000054  481a              LDR      r0,|L4.192|
000056  491b              LDR      r1,|L4.196|
000058  2200              MOVS     r2,#0                 ;199
00005a  ab03              ADD      r3,sp,#0xc            ;199
00005c  e9cd2100          STRD     r2,r1,[sp,#0]         ;199
000060  9002              STR      r0,[sp,#8]            ;199
000062  aa04              ADD      r2,sp,#0x10           ;199
000064  a905              ADD      r1,sp,#0x14           ;199
000066  4818              LDR      r0,|L4.200|
000068  f7fffffe          BL       netif_add
00006c  4604              MOV      r4,r0                 ;199
00006e  b12c              CBZ      r4,|L4.124|
000070  4815              LDR      r0,|L4.200|
000072  f7fffffe          BL       netif_set_default
000076  4814              LDR      r0,|L4.200|
000078  f7fffffe          BL       netif_set_up
                  |L4.124|
00007c  f7fffffe          BL       vPortEnterCritical
000080  4812              LDR      r0,|L4.204|
000082  2108              MOVS     r1,#8                 ;209
000084  2300              MOVS     r3,#0                 ;209
000086  018a              LSLS     r2,r1,#6              ;209
000088  e9cd1000          STRD     r1,r0,[sp,#0]         ;209
00008c  a110              ADR      r1,|L4.208|
00008e  4816              LDR      r0,|L4.232|
000090  f7fffffe          BL       xTaskCreate
000094  f7fffffe          BL       vPortExitCritical
000098  2000              MOVS     r0,#0                 ;219
00009a  e7b7              B        |L4.12|
;;;221    #if LWIP_DHCP			//如果使用DHCP的话
                          ENDP

                  |L4.156|
                          DCD      dm9000input
                  |L4.160|
0000a0  646d3930          DCB      "dm9000input",180,180,189,168,202,167,176,220,"\r\n",0
0000a4  3030696e
0000a8  707574b4
0000ac  b4bda8ca
0000b0  a7b0dc0d
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L4.184|
                          DCD      dm9000lock
                  |L4.188|
                          DCD      lwipdev
                  |L4.192|
                          DCD      tcpip_input
                  |L4.196|
                          DCD      ethernetif_init
                  |L4.200|
                          DCD      lwip_netif
                  |L4.204|
                          DCD      LWIP_DM9000_TaskHandler
                  |L4.208|
0000d0  6c776970          DCB      "lwip_dm9000_input_task",0
0000d4  5f646d39
0000d8  3030305f
0000dc  696e7075
0000e0  745f7461
0000e4  736b00  
0000e7  00                DCB      0
                  |L4.232|
                          DCD      lwip_dm9000_input_task

                          AREA ||i.lwip_comm_mem_free||, CODE, READONLY, ALIGN=2

                  lwip_comm_mem_free PROC
;;;118    //lwip中mem和memp内存释放
;;;119    void lwip_comm_mem_free(void)
000000  b510              PUSH     {r4,lr}
;;;120    { 	
;;;121    	myfree(SRAMIN,memp_memory);
000002  4805              LDR      r0,|L5.24|
000004  6801              LDR      r1,[r0,#0]  ; memp_memory
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       myfree
;;;122    	myfree(SRAMIN,ram_heap);
00000c  4803              LDR      r0,|L5.28|
00000e  6801              LDR      r1,[r0,#0]  ; ram_heap
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       myfree
;;;123    	//myfree(SRAMIN,TCPIP_THREAD_TASK_STK);
;;;124    	//myfree(SRAMIN,LWIP_DHCP_TASK_STK);
;;;125    	//myfree(SRAMIN,LWIP_DM9000_INPUT_TASK_STK);
;;;126    }
000016  bd10              POP      {r4,pc}
;;;127    //lwip 默认IP设置
                          ENDP

                  |L5.24|
                          DCD      memp_memory
                  |L5.28|
                          DCD      ram_heap

                          AREA ||i.lwip_comm_mem_malloc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  lwip_comm_mem_malloc PROC
;;;97     
;;;98     u8 lwip_comm_mem_malloc(void)
000000  b570              PUSH     {r4-r6,lr}
;;;99     {
;;;100    	u32 mempsize;
;;;101    	u32 ramheapsize; 
;;;102    	mempsize=memp_get_memorysize();			//得到memp_memory数组大小
000002  f7fffffe          BL       memp_get_memorysize
000006  4605              MOV      r5,r0
;;;103    	memp_memory=mymalloc(SRAMIN,mempsize);	//为memp_memory申请内存
000008  4629              MOV      r1,r5
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       mymalloc
000010  490e              LDR      r1,|L6.76|
000012  6008              STR      r0,[r1,#0]  ; memp_memory
;;;104    	printf("memp_memory内存大小为:%d\r\n",mempsize);
000014  4629              MOV      r1,r5
000016  a00e              ADR      r0,|L6.80|
000018  f7fffffe          BL       __2printf
;;;105    	ramheapsize=LWIP_MEM_ALIGN_SIZE(MEM_SIZE)+2*LWIP_MEM_ALIGN_SIZE(4*3)+MEM_ALIGNMENT;//得到ram heap大小
00001c  f641041c          MOV      r4,#0x181c
;;;106    	ram_heap=mymalloc(SRAMIN,ramheapsize);	//为ram_heap申请内存 
000020  4621              MOV      r1,r4
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       mymalloc
000028  4910              LDR      r1,|L6.108|
00002a  6008              STR      r0,[r1,#0]  ; ram_heap
;;;107    	printf("ram_heap内存大小为:%d\r\n",ramheapsize);
00002c  4621              MOV      r1,r4
00002e  a010              ADR      r0,|L6.112|
000030  f7fffffe          BL       __2printf
;;;108    	//TCPIP_THREAD_TASK_STK=mymalloc(SRAMIN,TCPIP_THREAD_STACKSIZE*4);			//给内核任务申请堆栈 
;;;109    	//LWIP_DHCP_TASK_STK=mymalloc(SRAMIN,LWIP_DHCP_STK_SIZE*4);					//给dhcp任务申请堆栈 
;;;110    	//LWIP_DM9000_INPUT_TASK_STK=mymalloc(SRAMIN,LWIP_DM9000_INPUT_TASK_SIZE*4);	//给dm9000接收任务申请堆栈 
;;;111    	if(!memp_memory||!ram_heap)//有申请失败的
000034  4805              LDR      r0,|L6.76|
000036  6800              LDR      r0,[r0,#0]  ; memp_memory
000038  b110              CBZ      r0,|L6.64|
00003a  480c              LDR      r0,|L6.108|
00003c  6800              LDR      r0,[r0,#0]  ; ram_heap
00003e  b918              CBNZ     r0,|L6.72|
                  |L6.64|
;;;112    	{
;;;113    		lwip_comm_mem_free();
000040  f7fffffe          BL       lwip_comm_mem_free
;;;114    		return 1;
000044  2001              MOVS     r0,#1
                  |L6.70|
;;;115    	}
;;;116    	return 0;	
;;;117    }
000046  bd70              POP      {r4-r6,pc}
                  |L6.72|
000048  2000              MOVS     r0,#0                 ;116
00004a  e7fc              B        |L6.70|
;;;118    //lwip中mem和memp内存释放
                          ENDP

                  |L6.76|
                          DCD      memp_memory
                  |L6.80|
000050  6d656d70          DCB      "memp_memory",196,218,180,230,180,243,208,161,206,170,":"
000054  5f6d656d
000058  6f7279c4
00005c  dab4e6b4
000060  f3d0a1ce
000064  aa3a    
000066  25640d0a          DCB      "%d\r\n",0
00006a  00      
00006b  00                DCB      0
                  |L6.108|
                          DCD      ram_heap
                  |L6.112|
000070  72616d5f          DCB      "ram_heap",196,218,180,230,180,243,208,161,206,170,":%d\r"
000074  68656170
000078  c4dab4e6
00007c  b4f3d0a1
000080  ceaa3a25
000084  640d    
000086  0a00              DCB      "\n",0

                          AREA ||i.lwip_dhcp_task||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  lwip_dhcp_task PROC
;;;242    //lwip_dhcp_task任务
;;;243     void lwip_dhcp_task(void *pvParameters)
000000  b5fe              PUSH     {r1-r7,lr}
;;;244    {
000002  4607              MOV      r7,r0
;;;245    			u32 ip=0,netmask=0,gw=0;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;246    			dhcp_start(&lwip_netif);
00000a  4866              LDR      r0,|L7.420|
00000c  f7fffffe          BL       dhcp_start
;;;247    			lwipdev.dhcpstatus = 0;		//等待通过DHCP获取到的地址
000010  2000              MOVS     r0,#0
000012  4965              LDR      r1,|L7.424|
000014  7588              STRB     r0,[r1,#0x16]
;;;248    			printf("正在查找DHCP服务器,请稍等...........\r\n");  
000016  a065              ADR      r0,|L7.428|
000018  f7fffffe          BL       __2printf
;;;249    		while(1)			//等待获取到IP地址
00001c  e0bd              B        |L7.410|
                  |L7.30|
;;;250    		{
;;;251                printf("正在获取地址...\r\n");
00001e  a06d              ADR      r0,|L7.468|
000020  f7fffffe          BL       __2printf
;;;252    			ip=lwip_netif.ip_addr.addr;		//读取新IP地址
000024  485f              LDR      r0,|L7.420|
000026  6844              LDR      r4,[r0,#4]  ; lwip_netif
;;;253    			netmask=lwip_netif.netmask.addr;//读取子网掩码
000028  6885              LDR      r5,[r0,#8]  ; lwip_netif
;;;254    			gw=lwip_netif.gw.addr;			//读取默认网关 
00002a  68c6              LDR      r6,[r0,#0xc]  ; lwip_netif
;;;255    			if(ip!=0)			//正确获取到IP地址的时候
00002c  2c00              CMP      r4,#0
00002e  d048              BEQ      |L7.194|
;;;256    			{
;;;257    				lwipdev.dhcpstatus=2;	//DHCP成功
000030  2002              MOVS     r0,#2
000032  495d              LDR      r1,|L7.424|
000034  7588              STRB     r0,[r1,#0x16]
;;;258    				printf("网卡en的MAC地址为:................%d.%d.%d.%d.%d.%d\r\n",lwipdev.mac[0],lwipdev.mac[1],lwipdev.mac[2],lwipdev.mac[3],lwipdev.mac[4],lwipdev.mac[5]);
000036  4608              MOV      r0,r1
000038  7940              LDRB     r0,[r0,#5]  ; lwipdev
00003a  7909              LDRB     r1,[r1,#4]  ; lwipdev
00003c  4a5a              LDR      r2,|L7.424|
00003e  78d2              LDRB     r2,[r2,#3]  ; lwipdev
000040  e9cd2100          STRD     r2,r1,[sp,#0]
000044  9002              STR      r0,[sp,#8]
000046  4858              LDR      r0,|L7.424|
000048  7883              LDRB     r3,[r0,#2]  ; lwipdev
00004a  7842              LDRB     r2,[r0,#1]  ; lwipdev
00004c  7801              LDRB     r1,[r0,#0]  ; lwipdev
00004e  a066              ADR      r0,|L7.488|
000050  f7fffffe          BL       __2printf
;;;259    				//解析出通过DHCP获取到的IP地址
;;;260    				lwipdev.ip[3]=(uint8_t)(ip>>24); 
000054  0e21              LSRS     r1,r4,#24
000056  4854              LDR      r0,|L7.424|
000058  7341              STRB     r1,[r0,#0xd]
;;;261    				lwipdev.ip[2]=(uint8_t)(ip>>16);
00005a  0c21              LSRS     r1,r4,#16
00005c  7301              STRB     r1,[r0,#0xc]
;;;262    				lwipdev.ip[1]=(uint8_t)(ip>>8);
00005e  0a21              LSRS     r1,r4,#8
000060  72c1              STRB     r1,[r0,#0xb]
;;;263    				lwipdev.ip[0]=(uint8_t)(ip);
000062  4601              MOV      r1,r0
000064  728c              STRB     r4,[r1,#0xa]
;;;264    				printf("通过DHCP获取到IP地址..............%d.%d.%d.%d\r\n",lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);
000066  7b40              LDRB     r0,[r0,#0xd]
000068  9000              STR      r0,[sp,#0]
00006a  4608              MOV      r0,r1
00006c  7b03              LDRB     r3,[r0,#0xc]
00006e  7ac2              LDRB     r2,[r0,#0xb]
000070  7a81              LDRB     r1,[r0,#0xa]  ; lwipdev
000072  a06b              ADR      r0,|L7.544|
000074  f7fffffe          BL       __2printf
;;;265    				//解析通过DHCP获取到的子网掩码地址
;;;266    				lwipdev.netmask[3]=(uint8_t)(netmask>>24);
000078  0e29              LSRS     r1,r5,#24
00007a  484b              LDR      r0,|L7.424|
00007c  7441              STRB     r1,[r0,#0x11]
;;;267    				lwipdev.netmask[2]=(uint8_t)(netmask>>16);
00007e  0c29              LSRS     r1,r5,#16
000080  7401              STRB     r1,[r0,#0x10]
;;;268    				lwipdev.netmask[1]=(uint8_t)(netmask>>8);
000082  0a29              LSRS     r1,r5,#8
000084  73c1              STRB     r1,[r0,#0xf]
;;;269    				lwipdev.netmask[0]=(uint8_t)(netmask);
000086  4601              MOV      r1,r0
000088  738d              STRB     r5,[r1,#0xe]
;;;270    				printf("通过DHCP获取到子网掩码............%d.%d.%d.%d\r\n",lwipdev.netmask[0],lwipdev.netmask[1],lwipdev.netmask[2],lwipdev.netmask[3]);
00008a  7c40              LDRB     r0,[r0,#0x11]
00008c  9000              STR      r0,[sp,#0]
00008e  4608              MOV      r0,r1
000090  7c03              LDRB     r3,[r0,#0x10]
000092  7bc2              LDRB     r2,[r0,#0xf]
000094  7b81              LDRB     r1,[r0,#0xe]  ; lwipdev
000096  a06e              ADR      r0,|L7.592|
000098  f7fffffe          BL       __2printf
;;;271    				//解析出通过DHCP获取到的默认网关
;;;272    				lwipdev.gateway[3]=(uint8_t)(gw>>24);
00009c  0e31              LSRS     r1,r6,#24
00009e  4842              LDR      r0,|L7.424|
0000a0  7541              STRB     r1,[r0,#0x15]
;;;273    				lwipdev.gateway[2]=(uint8_t)(gw>>16);
0000a2  0c31              LSRS     r1,r6,#16
0000a4  7501              STRB     r1,[r0,#0x14]
;;;274    				lwipdev.gateway[1]=(uint8_t)(gw>>8);
0000a6  0a31              LSRS     r1,r6,#8
0000a8  74c1              STRB     r1,[r0,#0x13]
;;;275    				lwipdev.gateway[0]=(uint8_t)(gw);
0000aa  4601              MOV      r1,r0
0000ac  748e              STRB     r6,[r1,#0x12]
;;;276    				printf("通过DHCP获取到的默认网关..........%d.%d.%d.%d\r\n",lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]);
0000ae  7d40              LDRB     r0,[r0,#0x15]
0000b0  9000              STR      r0,[sp,#0]
0000b2  4608              MOV      r0,r1
0000b4  7d03              LDRB     r3,[r0,#0x14]
0000b6  7cc2              LDRB     r2,[r0,#0x13]
0000b8  7c81              LDRB     r1,[r0,#0x12]  ; lwipdev
0000ba  a071              ADR      r0,|L7.640|
0000bc  f7fffffe          BL       __2printf
;;;277                   //while(1);
;;;278                   break;
0000c0  e06c              B        |L7.412|
                  |L7.194|
;;;279    			}
;;;280    			else if(lwip_netif.dhcp->tries>LWIP_MAX_DHCP_TRIES) //通过DHCP服务获取IP地址失败,且超过最大尝试次数
0000c2  4838              LDR      r0,|L7.420|
0000c4  6a00              LDR      r0,[r0,#0x20]  ; lwip_netif
0000c6  7b40              LDRB     r0,[r0,#0xd]
0000c8  2804              CMP      r0,#4
0000ca  dd63              BLE      |L7.404|
;;;281    			{
;;;282    				lwipdev.dhcpstatus=0XFF;//DHCP超时失败.
0000cc  20ff              MOVS     r0,#0xff
0000ce  4936              LDR      r1,|L7.424|
0000d0  7588              STRB     r0,[r1,#0x16]
;;;283    				//使用静态IP地址
;;;284    				IP4_ADDR(&(lwip_netif.ip_addr),lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);
0000d2  4608              MOV      r0,r1
0000d4  7b40              LDRB     r0,[r0,#0xd]
0000d6  0601              LSLS     r1,r0,#24
0000d8  4833              LDR      r0,|L7.424|
0000da  7b00              LDRB     r0,[r0,#0xc]
0000dc  ea414100          ORR      r1,r1,r0,LSL #16
0000e0  4831              LDR      r0,|L7.424|
0000e2  7ac0              LDRB     r0,[r0,#0xb]
0000e4  ea412000          ORR      r0,r1,r0,LSL #8
0000e8  492f              LDR      r1,|L7.424|
0000ea  7a89              LDRB     r1,[r1,#0xa]  ; lwipdev
0000ec  4308              ORRS     r0,r0,r1
0000ee  492d              LDR      r1,|L7.420|
0000f0  6048              STR      r0,[r1,#4]  ; lwip_netif
;;;285    				IP4_ADDR(&(lwip_netif.netmask),lwipdev.netmask[0],lwipdev.netmask[1],lwipdev.netmask[2],lwipdev.netmask[3]);
0000f2  482d              LDR      r0,|L7.424|
0000f4  7c40              LDRB     r0,[r0,#0x11]
0000f6  0601              LSLS     r1,r0,#24
0000f8  482b              LDR      r0,|L7.424|
0000fa  7c00              LDRB     r0,[r0,#0x10]
0000fc  ea414100          ORR      r1,r1,r0,LSL #16
000100  4829              LDR      r0,|L7.424|
000102  7bc0              LDRB     r0,[r0,#0xf]
000104  ea412000          ORR      r0,r1,r0,LSL #8
000108  4927              LDR      r1,|L7.424|
00010a  7b89              LDRB     r1,[r1,#0xe]  ; lwipdev
00010c  4308              ORRS     r0,r0,r1
00010e  4925              LDR      r1,|L7.420|
000110  6088              STR      r0,[r1,#8]  ; lwip_netif
;;;286    				IP4_ADDR(&(lwip_netif.gw),lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]);
000112  4825              LDR      r0,|L7.424|
000114  7d40              LDRB     r0,[r0,#0x15]
000116  0601              LSLS     r1,r0,#24
000118  4823              LDR      r0,|L7.424|
00011a  7d00              LDRB     r0,[r0,#0x14]
00011c  ea414100          ORR      r1,r1,r0,LSL #16
000120  4821              LDR      r0,|L7.424|
000122  7cc0              LDRB     r0,[r0,#0x13]
000124  ea412000          ORR      r0,r1,r0,LSL #8
000128  491f              LDR      r1,|L7.424|
00012a  7c89              LDRB     r1,[r1,#0x12]  ; lwipdev
00012c  4308              ORRS     r0,r0,r1
00012e  491d              LDR      r1,|L7.420|
000130  60c8              STR      r0,[r1,#0xc]  ; lwip_netif
;;;287    				printf("DHCP服务超时,使用静态IP地址!\r\n");
000132  a05f              ADR      r0,|L7.688|
000134  f7fffffe          BL       __2printf
;;;288    				printf("网卡en的MAC地址为:................%d.%d.%d.%d.%d.%d\r\n",lwipdev.mac[0],lwipdev.mac[1],lwipdev.mac[2],lwipdev.mac[3],lwipdev.mac[4],lwipdev.mac[5]);
000138  481b              LDR      r0,|L7.424|
00013a  7941              LDRB     r1,[r0,#5]  ; lwipdev
00013c  7900              LDRB     r0,[r0,#4]  ; lwipdev
00013e  4a1a              LDR      r2,|L7.424|
000140  78d2              LDRB     r2,[r2,#3]  ; lwipdev
000142  e9cd2000          STRD     r2,r0,[sp,#0]
000146  9102              STR      r1,[sp,#8]
000148  4817              LDR      r0,|L7.424|
00014a  7883              LDRB     r3,[r0,#2]  ; lwipdev
00014c  7842              LDRB     r2,[r0,#1]  ; lwipdev
00014e  7801              LDRB     r1,[r0,#0]  ; lwipdev
000150  a025              ADR      r0,|L7.488|
000152  f7fffffe          BL       __2printf
;;;289    				printf("静态IP地址........................%d.%d.%d.%d\r\n",lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);
000156  4814              LDR      r0,|L7.424|
000158  7b40              LDRB     r0,[r0,#0xd]
00015a  9000              STR      r0,[sp,#0]
00015c  4812              LDR      r0,|L7.424|
00015e  7b03              LDRB     r3,[r0,#0xc]
000160  7ac2              LDRB     r2,[r0,#0xb]
000162  7a81              LDRB     r1,[r0,#0xa]  ; lwipdev
000164  a05a              ADR      r0,|L7.720|
000166  f7fffffe          BL       __2printf
;;;290    				printf("子网掩码..........................%d.%d.%d.%d\r\n",lwipdev.netmask[0],lwipdev.netmask[1],lwipdev.netmask[2],lwipdev.netmask[3]);
00016a  480f              LDR      r0,|L7.424|
00016c  7c40              LDRB     r0,[r0,#0x11]
00016e  9000              STR      r0,[sp,#0]
000170  480d              LDR      r0,|L7.424|
000172  7c03              LDRB     r3,[r0,#0x10]
000174  7bc2              LDRB     r2,[r0,#0xf]
000176  7b81              LDRB     r1,[r0,#0xe]  ; lwipdev
000178  a061              ADR      r0,|L7.768|
00017a  f7fffffe          BL       __2printf
;;;291    				printf("默认网关..........................%d.%d.%d.%d\r\n",lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]);
00017e  480a              LDR      r0,|L7.424|
000180  7d40              LDRB     r0,[r0,#0x15]
000182  9000              STR      r0,[sp,#0]
000184  4808              LDR      r0,|L7.424|
000186  7d03              LDRB     r3,[r0,#0x14]
000188  7cc2              LDRB     r2,[r0,#0x13]
00018a  7c81              LDRB     r1,[r0,#0x12]  ; lwipdev
00018c  a068              ADR      r0,|L7.816|
00018e  f7fffffe          BL       __2printf
;;;292                    break;
000192  e003              B        |L7.412|
                  |L7.404|
;;;293    			}
;;;294              delay_ms(250); //延时250ms
000194  20fa              MOVS     r0,#0xfa
000196  f7fffffe          BL       delay_ms
                  |L7.410|
00019a  e740              B        |L7.30|
                  |L7.412|
00019c  bf00              NOP                            ;278
;;;295    		}
;;;296          lwip_comm_dhcp_delete();//删除DHCP任务   
00019e  f7fffffe          BL       lwip_comm_dhcp_delete
;;;297        //while(1);
;;;298    	}
0001a2  bdfe              POP      {r1-r7,pc}
;;;299    #endif
                          ENDP

                  |L7.420|
                          DCD      lwip_netif
                  |L7.424|
                          DCD      lwipdev
                  |L7.428|
0001ac  d5fdd4da          DCB      213,253,212,218,178,233,213,210,"DHCP",183,254,206,241,198
0001b0  b2e9d5d2
0001b4  44484350
0001b8  b7fecef1
0001bc  c6      
0001bd  f72cc7eb          DCB      247,",",199,235,201,212,181,200,"...........\r\n",0
0001c1  c9d4b5c8
0001c5  2e2e2e2e
0001c9  2e2e2e2e
0001cd  2e2e2e0d
0001d1  0a00    
0001d3  00                DCB      0
                  |L7.468|
0001d4  d5fdd4da          DCB      213,253,212,218,187,241,200,161,181,216,214,183,"...\r\n"
0001d8  bbf1c8a1
0001dc  b5d8d6b7
0001e0  2e2e2e0d
0001e4  0a      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L7.488|
0001e8  cdf8bfa8          DCB      205,248,191,168,"en",181,196,"MAC",181,216,214,183,206,170
0001ec  656eb5c4
0001f0  4d4143b5
0001f4  d8d6b7ce
0001f8  aa      
0001f9  3a2e2e2e          DCB      ":................%d.%d.%d.%d.%d.%d\r\n",0
0001fd  2e2e2e2e
000201  2e2e2e2e
000205  2e2e2e2e
000209  2e25642e
00020d  25642e25
000211  642e2564
000215  2e25642e
000219  25640d0a
00021d  00      
00021e  00                DCB      0
00021f  00                DCB      0
                  |L7.544|
000220  cda8b9fd          DCB      205,168,185,253,"DHCP",187,241,200,161,181,189,"IP",181,216
000224  44484350
000228  bbf1c8a1
00022c  b5bd4950
000230  b5d8    
000232  d6b72e2e          DCB      214,183,"..............%d.%d.%d.%d\r\n",0
000236  2e2e2e2e
00023a  2e2e2e2e
00023e  2e2e2e2e
000242  25642e25
000246  642e2564
00024a  2e25640d
00024e  0a00    
                  |L7.592|
000250  cda8b9fd          DCB      205,168,185,253,"DHCP",187,241,200,161,181,189,215,211,205
000254  44484350
000258  bbf1c8a1
00025c  b5bdd7d3
000260  cd      
000261  f8d1dac2          DCB      248,209,218,194,235,"............%d.%d.%d.%d\r\n",0
000265  eb2e2e2e
000269  2e2e2e2e
00026d  2e2e2e2e
000271  2e25642e
000275  25642e25
000279  642e2564
00027d  0d0a00  
                  |L7.640|
000280  cda8b9fd          DCB      205,168,185,253,"DHCP",187,241,200,161,181,189,181,196,196
000284  44484350
000288  bbf1c8a1
00028c  b5bdb5c4
000290  c4      
000291  acc8cfcd          DCB      172,200,207,205,248,185,216,"..........%d.%d.%d.%d\r\n",0
000295  f8b9d82e
000299  2e2e2e2e
00029d  2e2e2e2e
0002a1  2e25642e
0002a5  25642e25
0002a9  642e2564
0002ad  0d0a00  
                  |L7.688|
0002b0  44484350          DCB      "DHCP",183,254,206,241,179,172,202,177,",",202,185,211,195
0002b4  b7fecef1
0002b8  b3accab1
0002bc  2ccab9d3
0002c0  c3      
0002c1  beb2ccac          DCB      190,178,204,172,"IP",181,216,214,183,"!\r\n",0
0002c5  4950b5d8
0002c9  d6b7210d
0002cd  0a00    
0002cf  00                DCB      0
                  |L7.720|
0002d0  beb2ccac          DCB      190,178,204,172,"IP",181,216,214,183,".................."
0002d4  4950b5d8
0002d8  d6b72e2e
0002dc  2e2e2e2e
0002e0  2e2e2e2e
0002e4  2e2e2e2e
0002e8  2e2e2e2e
0002ec  2e2e2e2e          DCB      "......%d.%d.%d.%d\r\n",0
0002f0  2e2e2564
0002f4  2e25642e
0002f8  25642e25
0002fc  640d0a00
                  |L7.768|
000300  d7d3cdf8          DCB      215,211,205,248,209,218,194,235,"......................."
000304  d1dac2eb
000308  2e2e2e2e
00030c  2e2e2e2e
000310  2e2e2e2e
000314  2e2e2e2e
000318  2e2e2e2e
00031c  2e2e2e  
00031f  2e2e2e25          DCB      "...%d.%d.%d.%d\r\n",0
000323  642e2564
000327  2e25642e
00032b  25640d0a
00032f  00      
                  |L7.816|
000330  c4acc8cf          DCB      196,172,200,207,205,248,185,216,"......................."
000334  cdf8b9d8
000338  2e2e2e2e
00033c  2e2e2e2e
000340  2e2e2e2e
000344  2e2e2e2e
000348  2e2e2e2e
00034c  2e2e2e  
00034f  2e2e2e25          DCB      "...%d.%d.%d.%d\r\n",0
000353  642e2564
000357  2e25642e
00035b  25640d0a
00035f  00      

                          AREA ||i.lwip_dm9000_input_task||, CODE, READONLY, ALIGN=2

                  lwip_dm9000_input_task PROC
;;;91     //DM9000数据接收处理任务
;;;92     void lwip_dm9000_input_task(void *pdata)
000000  b510              PUSH     {r4,lr}
;;;93     {
000002  4604              MOV      r4,r0
;;;94     	//从网络缓冲区中读取接收到的数据包并将其发送给LWIP处理 
;;;95     	ethernetif_input(&lwip_netif);
000004  4801              LDR      r0,|L8.12|
000006  f7fffffe          BL       ethernetif_input
;;;96     }
00000a  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  |L8.12|
                          DCD      lwip_netif

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  lwipdev
                          %        24
                  lwip_netif
                          %        52

                          AREA ||.data||, DATA, ALIGN=2

                  TCPTimer
                          DCD      0x00000000
                  ARPTimer
                          DCD      0x00000000
                  lwip_localtime
                          DCD      0x00000000
                  TCPIP_THREAD_TASK_STK
                          DCD      0x00000000
                  LWIP_DHCP_TASK_STK
                          DCD      0x00000000
                  LWIP_DM9000_INPUT_TASK_STK
                          DCD      0x00000000
                  LWIP_DHCP_TaskHandler
                          DCD      0x00000000
                  LWIP_DM9000_TaskHandler
                          DCD      0x00000000
