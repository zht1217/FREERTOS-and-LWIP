; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\ethernetif.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\ethernetif.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\ethernetif.crf ..\LWIP\lwip-1.4.1\src\netif\ethernetif.c]
                          THUMB

                          AREA ||i.ethernetif_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  ethernetif_init PROC
;;;105    //       其他,失败
;;;106    err_t ethernetif_init(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	LWIP_ASSERT("netif!=NULL",(netif!=NULL));
000004  bf00              NOP      
000006  b93c              CBNZ     r4,|L1.24|
000008  bf00              NOP      
00000a  a30b              ADR      r3,|L1.56|
00000c  226c              MOVS     r2,#0x6c
00000e  a115              ADR      r1,|L1.100|
000010  a017              ADR      r0,|L1.112|
000012  f7fffffe          BL       __2printf
000016  bf00              NOP      
                  |L1.24|
000018  bf00              NOP      
;;;109    #if LWIP_NETIF_HOSTNAME			//LWIP_NETIF_HOSTNAME 
;;;110    	netif->hostname="lwip";  	//初始化名称
;;;111    #endif 
;;;112    	netif->name[0]=IFNAME0; 	//初始化变量netif的name字段
00001a  2065              MOVS     r0,#0x65
00001c  f884002e          STRB     r0,[r4,#0x2e]
;;;113    	netif->name[1]=IFNAME1; 	//在文件外定义这里不用关心具体值
000020  216e              MOVS     r1,#0x6e
000022  202f              MOVS     r0,#0x2f
000024  5501              STRB     r1,[r0,r4]
;;;114    	netif->output=etharp_output;//IP层发送数据包函数
000026  481d              LDR      r0,|L1.156|
000028  6160              STR      r0,[r4,#0x14]
;;;115    	netif->linkoutput=low_level_output;//ARP模块发送数据包函数
00002a  481d              LDR      r0,|L1.160|
00002c  61a0              STR      r0,[r4,#0x18]
;;;116    	low_level_init(netif); 		//底层硬件初始化函数
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       low_level_init
;;;117    	return ERR_OK;
000034  2000              MOVS     r0,#0
;;;118    }
000036  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L1.56|
000038  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\netif\\ethernetif.c",0
00003c  5749505c
000040  6c776970
000044  2d312e34
000048  2e315c73
00004c  72635c6e
000050  65746966
000054  5c657468
000058  65726e65
00005c  7469662e
000060  6300    
000062  00                DCB      0
000063  00                DCB      0
                  |L1.100|
000064  6e657469          DCB      "netif!=NULL",0
000068  66213d4e
00006c  554c4c00
                  |L1.112|
000070  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000074  7274696f
000078  6e202225
00007c  73222066
000080  61696c65
000084  64206174
000088  206c696e
00008c  65202564
000090  20696e20
000094  25730d0a
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L1.156|
                          DCD      etharp_output
                  |L1.160|
                          DCD      low_level_output

                          AREA ||i.ethernetif_input||, CODE, READONLY, ALIGN=2

                  ethernetif_input PROC
;;;68     
;;;69     err_t ethernetif_input(struct netif *netif)
000000  4604              MOV      r4,r0
;;;70     {
;;;71     	unsigned char _err;
;;;72     	err_t err;
;;;73     	struct pbuf *p;
;;;74     	while(1)
000002  e023              B        |L2.76|
                  |L2.4|
;;;75     	{
;;;76             if(dm9000input!=NULL)
000004  4812              LDR      r0,|L2.80|
000006  6800              LDR      r0,[r0,#0]  ; dm9000input
000008  b138              CBZ      r0,|L2.26|
;;;77             {
;;;78                 xSemaphoreTake(dm9000input,portMAX_DELAY);//死等dm9000input信号
00000a  2300              MOVS     r3,#0
00000c  1e5a              SUBS     r2,r3,#1
00000e  4619              MOV      r1,r3
000010  480f              LDR      r0,|L2.80|
000012  6800              LDR      r0,[r0,#0]  ; dm9000input
000014  f7fffffe          BL       xQueueGenericReceive
000018  e002              B        |L2.32|
                  |L2.26|
;;;79             }
;;;80             else
;;;81             {
;;;82                 vTaskDelay(100);
00001a  2064              MOVS     r0,#0x64
00001c  f7fffffe          BL       vTaskDelay
                  |L2.32|
;;;83             }
;;;84     			while(1)
000020  e012              B        |L2.72|
                  |L2.34|
;;;85     			{
;;;86     				p=low_level_input(netif);   //调用low_level_input函数接收数据
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       low_level_input
000028  4606              MOV      r6,r0
;;;87     				if(p!=NULL)
00002a  b166              CBZ      r6,|L2.70|
;;;88     				{
;;;89     					err=netif->input(p, netif); //调用netif结构体中的input字段(一个函数)来处理数据包
00002c  4621              MOV      r1,r4
00002e  4630              MOV      r0,r6
000030  6922              LDR      r2,[r4,#0x10]
000032  4790              BLX      r2
000034  4605              MOV      r5,r0
;;;90     					if(err!=ERR_OK)
000036  b13d              CBZ      r5,|L2.72|
;;;91     					{
;;;92     						LWIP_DEBUGF(NETIF_DEBUG,("ethernetif_input: IP input error\n"));
000038  bf00              NOP      
00003a  bf00              NOP      
;;;93     						pbuf_free(p);
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       pbuf_free
;;;94     						p = NULL;
000042  2600              MOVS     r6,#0
000044  e000              B        |L2.72|
                  |L2.70|
;;;95     					} 
;;;96     				}else break; 
000046  e000              B        |L2.74|
                  |L2.72|
000048  e7eb              B        |L2.34|
                  |L2.74|
00004a  bf00              NOP      
                  |L2.76|
00004c  e7da              B        |L2.4|
;;;97     			}
;;;98     		//}
;;;99     	}
;;;100    } 
;;;101    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      dm9000input

                          AREA ||i.low_level_init||, CODE, READONLY, ALIGN=2

                  low_level_init PROC
;;;33     extern SemaphoreHandle_t dm9000input;
;;;34     static err_t low_level_init(struct netif *netif)
000000  4601              MOV      r1,r0
;;;35     {
;;;36     	//INT8U err;
;;;37     	netif->hwaddr_len = ETHARP_HWADDR_LEN; //设置MAC地址长度,为6个字节
000002  2006              MOVS     r0,#6
000004  f8810026          STRB     r0,[r1,#0x26]
;;;38     	//初始化MAC地址,设置什么地址由用户自己设置,但是不能与网络中其他设备MAC地址重复
;;;39     	netif->hwaddr[0]=lwipdev.mac[0]; 
000008  480f              LDR      r0,|L3.72|
00000a  7800              LDRB     r0,[r0,#0]  ; lwipdev
00000c  f8810027          STRB     r0,[r1,#0x27]
;;;40     	netif->hwaddr[1]=lwipdev.mac[1]; 
000010  480d              LDR      r0,|L3.72|
000012  7842              LDRB     r2,[r0,#1]  ; lwipdev
000014  2028              MOVS     r0,#0x28
000016  5442              STRB     r2,[r0,r1]
;;;41     	netif->hwaddr[2]=lwipdev.mac[2];
000018  480b              LDR      r0,|L3.72|
00001a  7882              LDRB     r2,[r0,#2]  ; lwipdev
00001c  2029              MOVS     r0,#0x29
00001e  5442              STRB     r2,[r0,r1]
;;;42     	netif->hwaddr[3]=lwipdev.mac[3];
000020  4809              LDR      r0,|L3.72|
000022  78c2              LDRB     r2,[r0,#3]  ; lwipdev
000024  202a              MOVS     r0,#0x2a
000026  5442              STRB     r2,[r0,r1]
;;;43     	netif->hwaddr[4]=lwipdev.mac[4];
000028  4807              LDR      r0,|L3.72|
00002a  7902              LDRB     r2,[r0,#4]  ; lwipdev
00002c  202b              MOVS     r0,#0x2b
00002e  5442              STRB     r2,[r0,r1]
;;;44     	netif->hwaddr[5]=lwipdev.mac[5];
000030  4805              LDR      r0,|L3.72|
000032  7942              LDRB     r2,[r0,#5]  ; lwipdev
000034  202c              MOVS     r0,#0x2c
000036  5442              STRB     r2,[r0,r1]
;;;45     	netif->mtu=1500; //最大允许传输单元,允许该网卡广播和ARP功能
000038  f24050dc          MOV      r0,#0x5dc
00003c  8488              STRH     r0,[r1,#0x24]
;;;46     	netif->flags = NETIF_FLAG_BROADCAST|NETIF_FLAG_ETHARP|NETIF_FLAG_LINK_UP; 
00003e  2032              MOVS     r0,#0x32
000040  f881002d          STRB     r0,[r1,#0x2d]
;;;47     	return ERR_OK;
000044  2000              MOVS     r0,#0
;;;48     } 
000046  4770              BX       lr
;;;49     //用于发送数据包的最底层函数(lwip通过netif->linkoutput指向该函数)
                          ENDP

                  |L3.72|
                          DCD      lwipdev

                          AREA ||i.low_level_input||, CODE, READONLY, ALIGN=1

                  low_level_input PROC
;;;61     //返回值:pbuf数据结构体指针
;;;62     static struct pbuf * low_level_input(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;63     {  
000002  4605              MOV      r5,r0
;;;64     	struct pbuf *p;
;;;65     	p=DM9000_Receive_Packet();
000004  f7fffffe          BL       DM9000_Receive_Packet
000008  4604              MOV      r4,r0
;;;66     	return p;
00000a  4620              MOV      r0,r4
;;;67     }
00000c  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP


                          AREA ||i.low_level_output||, CODE, READONLY, ALIGN=1

                  low_level_output PROC
;;;53     //       ERR_MEM,发送失败
;;;54     static err_t low_level_output(struct netif *netif, struct pbuf *p)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;56     	DM9000_SendPacket(p);//发送数据
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       DM9000_SendPacket
;;;57     	return ERR_OK;
00000c  2000              MOVS     r0,#0
;;;58     }
00000e  bd70              POP      {r4-r6,pc}
;;;59     //用于接收数据包的最底层函数
                          ENDP

