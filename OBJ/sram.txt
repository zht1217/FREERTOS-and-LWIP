; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\sram.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\sram.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\sram.crf ..\HARDWARE\SRAM\sram.c]
                          THUMB

                          AREA ||i.FSMC_SRAM_Init||, CODE, READONLY, ALIGN=2

                  FSMC_SRAM_Init PROC
;;;21     //初始化外部SRAM
;;;22     void FSMC_SRAM_Init(void)
000000  b500              PUSH     {lr}
;;;23     {	
000002  b097              SUB      sp,sp,#0x5c
;;;24     	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;25     	FSMC_NORSRAMTimingInitTypeDef  readWriteTiming;
;;;26     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;27      
;;;28      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOE|RCC_APB2Periph_GPIOF|RCC_APB2Periph_GPIOG,ENABLE);
000004  2101              MOVS     r1,#1
000006  f44f70f0          MOV      r0,#0x1e0
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;29       	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC,ENABLE);
00000e  2101              MOVS     r1,#1
000010  0208              LSLS     r0,r1,#8
000012  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;30       
;;;31     	GPIO_InitStructure.GPIO_Pin = 0xFF33; 			 	//PORTD复用推挽输出 
000016  f64f7033          MOV      r0,#0xff33
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;32      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 		 //复用推挽输出
00001e  2018              MOVS     r0,#0x18
000020  f88d0003          STRB     r0,[sp,#3]
;;;33      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000024  2003              MOVS     r0,#3
000026  f88d0002          STRB     r0,[sp,#2]
;;;34      	GPIO_Init(GPIOD, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4822              LDR      r0,|L1.184|
00002e  f7fffffe          BL       GPIO_Init
;;;35     
;;;36      
;;;37     	GPIO_InitStructure.GPIO_Pin = 0xFF83; 			 	//PORTE复用推挽输出 
000032  f64f7083          MOV      r0,#0xff83
000036  f8ad0000          STRH     r0,[sp,#0]
;;;38      	GPIO_Init(GPIOE, &GPIO_InitStructure);
00003a  4669              MOV      r1,sp
00003c  481f              LDR      r0,|L1.188|
00003e  f7fffffe          BL       GPIO_Init
;;;39     
;;;40      	GPIO_InitStructure.GPIO_Pin = 0xF03F; 			 	//PORTD复用推挽输出 
000042  f24f003f          MOV      r0,#0xf03f
000046  f8ad0000          STRH     r0,[sp,#0]
;;;41      	GPIO_Init(GPIOF, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  481c              LDR      r0,|L1.192|
00004e  f7fffffe          BL       GPIO_Init
;;;42     
;;;43     	GPIO_InitStructure.GPIO_Pin = 0x043F; 			 	//PORTD复用推挽输出 
000052  f240403f          MOV      r0,#0x43f
000056  f8ad0000          STRH     r0,[sp,#0]
;;;44      	GPIO_Init(GPIOG, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4819              LDR      r0,|L1.196|
00005e  f7fffffe          BL       GPIO_Init
;;;45      
;;;46     	 			  	  
;;;47      	readWriteTiming.FSMC_AddressSetupTime = 0x00;	 //地址建立时间（ADDSET）为1个HCLK 1/36M=27ns
000062  2000              MOVS     r0,#0
000064  9001              STR      r0,[sp,#4]
;;;48         readWriteTiming.FSMC_AddressHoldTime = 0x00;	 //地址保持时间（ADDHLD）模式A未用到	
000066  9002              STR      r0,[sp,#8]
;;;49         readWriteTiming.FSMC_DataSetupTime = 0x03;		 //数据保持时间（DATAST）为3个HCLK 4/72M=55ns(对EM的SRAM芯片)	 
000068  2003              MOVS     r0,#3
00006a  9003              STR      r0,[sp,#0xc]
;;;50         readWriteTiming.FSMC_BusTurnAroundDuration = 0x00;
00006c  2000              MOVS     r0,#0
00006e  9004              STR      r0,[sp,#0x10]
;;;51         readWriteTiming.FSMC_CLKDivision = 0x00;
000070  9005              STR      r0,[sp,#0x14]
;;;52         readWriteTiming.FSMC_DataLatency = 0x00;
000072  9006              STR      r0,[sp,#0x18]
;;;53         readWriteTiming.FSMC_AccessMode = FSMC_AccessMode_A;	 //模式A 
000074  9007              STR      r0,[sp,#0x1c]
;;;54         
;;;55     
;;;56      
;;;57         FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;//  这里我们使用NE3 ，也就对应BTCR[4],[5]。
000076  2004              MOVS     r0,#4
000078  9008              STR      r0,[sp,#0x20]
;;;58         FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable; 
00007a  2000              MOVS     r0,#0
00007c  9009              STR      r0,[sp,#0x24]
;;;59         FSMC_NORSRAMInitStructure.FSMC_MemoryType =FSMC_MemoryType_SRAM;// FSMC_MemoryType_SRAM;  //SRAM   
00007e  900a              STR      r0,[sp,#0x28]
;;;60         FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;//存储器数据宽度为16bit  
000080  2010              MOVS     r0,#0x10
000082  900b              STR      r0,[sp,#0x2c]
;;;61         FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode =FSMC_BurstAccessMode_Disable;// FSMC_BurstAccessMode_Disable; 
000084  2000              MOVS     r0,#0
000086  900c              STR      r0,[sp,#0x30]
;;;62         FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000088  900e              STR      r0,[sp,#0x38]
;;;63     	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait=FSMC_AsynchronousWait_Disable;
00008a  900d              STR      r0,[sp,#0x34]
;;;64         FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;   
00008c  900f              STR      r0,[sp,#0x3c]
;;;65         FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;  
00008e  9010              STR      r0,[sp,#0x40]
;;;66         FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;	//存储器写使能 
000090  f44f5080          MOV      r0,#0x1000
000094  9011              STR      r0,[sp,#0x44]
;;;67         FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;  
000096  2000              MOVS     r0,#0
000098  9012              STR      r0,[sp,#0x48]
;;;68         FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable; // 读写使用相同的时序
00009a  9013              STR      r0,[sp,#0x4c]
;;;69         FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;  
00009c  9014              STR      r0,[sp,#0x50]
;;;70         FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &readWriteTiming;
00009e  a801              ADD      r0,sp,#4
0000a0  9015              STR      r0,[sp,#0x54]
;;;71         FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &readWriteTiming; //读写同样时序
0000a2  9016              STR      r0,[sp,#0x58]
;;;72     
;;;73         FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //初始化FSMC配置
0000a4  a808              ADD      r0,sp,#0x20
0000a6  f7fffffe          BL       FSMC_NORSRAMInit
;;;74     
;;;75        	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);  // 使能BANK3										  
0000aa  2101              MOVS     r1,#1
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       FSMC_NORSRAMCmd
;;;76     											
;;;77     }
0000b2  b017              ADD      sp,sp,#0x5c
0000b4  bd00              POP      {pc}
;;;78     	  														  
                          ENDP

0000b6  0000              DCW      0x0000
                  |L1.184|
                          DCD      0x40011400
                  |L1.188|
                          DCD      0x40011800
                  |L1.192|
                          DCD      0x40011c00
                  |L1.196|
                          DCD      0x40012000

                          AREA ||i.FSMC_SRAM_ReadBuffer||, CODE, READONLY, ALIGN=1

                  FSMC_SRAM_ReadBuffer PROC
;;;95     //n:要写入的字节数
;;;96     void FSMC_SRAM_ReadBuffer(u8* pBuffer,u32 ReadAddr,u32 n)
000000  e006              B        |L2.16|
                  |L2.2|
;;;97     {
;;;98     	for(;n!=0;n--)  
;;;99     	{											    
;;;100    		*pBuffer++=*(vu8*)(Bank1_SRAM3_ADDR+ReadAddr);    
000002  f04f43d0          MOV      r3,#0x68000000
000006  5c5b              LDRB     r3,[r3,r1]
000008  f8003b01          STRB     r3,[r0],#1
;;;101    		ReadAddr++; 
00000c  1c49              ADDS     r1,r1,#1
00000e  1e52              SUBS     r2,r2,#1              ;98
                  |L2.16|
000010  2a00              CMP      r2,#0                 ;98
000012  d1f6              BNE      |L2.2|
;;;102    	}  
;;;103    } 
000014  4770              BX       lr
;;;104    ////////////////////////////////////////////////////////////////////////////////////////
                          ENDP


                          AREA ||i.FSMC_SRAM_WriteBuffer||, CODE, READONLY, ALIGN=1

                  FSMC_SRAM_WriteBuffer PROC
;;;82     //n:要写入的字节数
;;;83     void FSMC_SRAM_WriteBuffer(u8* pBuffer,u32 WriteAddr,u32 n)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85     	for(;n!=0;n--)  
000002  e006              B        |L3.18|
                  |L3.4|
;;;86     	{										    
;;;87     		*(vu8*)(Bank1_SRAM3_ADDR+WriteAddr)=*pBuffer;	  
000004  7804              LDRB     r4,[r0,#0]
000006  f04f43d0          MOV      r3,#0x68000000
00000a  545c              STRB     r4,[r3,r1]
;;;88     		WriteAddr++; 
00000c  1c49              ADDS     r1,r1,#1
;;;89     		pBuffer++;
00000e  1c40              ADDS     r0,r0,#1
000010  1e52              SUBS     r2,r2,#1              ;85
                  |L3.18|
000012  2a00              CMP      r2,#0                 ;85
000014  d1f6              BNE      |L3.4|
;;;90     	}   
;;;91     }																			    
000016  bd10              POP      {r4,pc}
;;;92     //在指定地址开始,连续读出n个字节.
                          ENDP


                          AREA ||i.fsmc_sram_test_read||, CODE, READONLY, ALIGN=1

                  fsmc_sram_test_read PROC
;;;115    //返回值:读取到的数据
;;;116    u8 fsmc_sram_test_read(u32 addr)
000000  b518              PUSH     {r3,r4,lr}
;;;117    {
000002  4604              MOV      r4,r0
;;;118    	u8 data;
;;;119    	FSMC_SRAM_ReadBuffer(&data,addr,1);
000004  2201              MOVS     r2,#1
000006  4621              MOV      r1,r4
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       FSMC_SRAM_ReadBuffer
;;;120    	return data;
00000e  f89d0000          LDRB     r0,[sp,#0]
;;;121    }	
000012  bd18              POP      {r3,r4,pc}
;;;122    
                          ENDP


                          AREA ||i.fsmc_sram_test_write||, CODE, READONLY, ALIGN=1

                  fsmc_sram_test_write PROC
;;;108    //data:要写入的数据
;;;109    void fsmc_sram_test_write(u8 data,u32 addr)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;110    {			   
000002  460c              MOV      r4,r1
;;;111    	FSMC_SRAM_WriteBuffer(&data,addr,1);//写入1个字节
000004  2201              MOVS     r2,#1
000006  4621              MOV      r1,r4
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       FSMC_SRAM_WriteBuffer
;;;112    }
00000e  bd1c              POP      {r2-r4,pc}
;;;113    //读取1个字节
                          ENDP

