; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\udp.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\udp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\udp.crf ..\LWIP\lwip-1.4.1\src\core\udp.c]
                          THUMB

                          AREA ||i.udp_bind||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  udp_bind PROC
;;;765    err_t
;;;766    udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;767    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;768      struct udp_pcb *ipcb;
;;;769      u8_t rebind;
;;;770    
;;;771      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
00000a  bf00              NOP      
00000c  bf00              NOP      
;;;772      ip_addr_debug_print(UDP_DEBUG, ipaddr);
00000e  bf00              NOP      
000010  bf00              NOP      
;;;773      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
000012  bf00              NOP      
000014  bf00              NOP      
;;;774    
;;;775      rebind = 0;
000016  f04f0800          MOV      r8,#0
;;;776      /* Check for double bind and rebind of the same pcb */
;;;777      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
00001a  4824              LDR      r0,|L1.172|
00001c  6804              LDR      r4,[r0,#0]  ; udp_pcbs
00001e  e026              B        |L1.110|
                  |L1.32|
;;;778        /* is this UDP PCB already on active list? */
;;;779        if (pcb == ipcb) {
000020  42a5              CMP      r5,r4
000022  d110              BNE      |L1.70|
;;;780          /* pcb may occur at most once in active list */
;;;781          LWIP_ASSERT("rebind == 0", rebind == 0);
000024  bf00              NOP      
000026  f1b80f00          CMP      r8,#0
00002a  d008              BEQ      |L1.62|
00002c  bf00              NOP      
00002e  a320              ADR      r3,|L1.176|
000030  f240320d          MOV      r2,#0x30d
000034  a127              ADR      r1,|L1.212|
000036  a02a              ADR      r0,|L1.224|
000038  f7fffffe          BL       __2printf
00003c  bf00              NOP      
                  |L1.62|
00003e  bf00              NOP      
;;;782          /* pcb already in list, just rebind */
;;;783          rebind = 1;
000040  f04f0801          MOV      r8,#1
000044  e012              B        |L1.108|
                  |L1.70|
;;;784        }
;;;785    
;;;786        /* By default, we don't allow to bind to a port that any other udp
;;;787           PCB is alread bound to, unless *all* PCBs with that port have tha
;;;788           REUSEADDR flag set. */
;;;789    #if SO_REUSE
;;;790        else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
;;;791                 !ip_get_option(ipcb, SOF_REUSEADDR)) {
;;;792    #else /* SO_REUSE */
;;;793        /* port matches that of PCB in list and REUSEADDR not set -> reject */
;;;794        else {
;;;795    #endif /* SO_REUSE */
;;;796          if ((ipcb->local_port == port) &&
000046  8a60              LDRH     r0,[r4,#0x12]
000048  42b8              CMP      r0,r7
00004a  d10f              BNE      |L1.108|
;;;797              /* IP address matches, or one is IP_ADDR_ANY? */
;;;798              (ip_addr_isany(&(ipcb->local_ip)) ||
00004c  b144              CBZ      r4,|L1.96|
00004e  6820              LDR      r0,[r4,#0]
000050  b130              CBZ      r0,|L1.96|
;;;799               ip_addr_isany(ipaddr) ||
000052  b12e              CBZ      r6,|L1.96|
000054  6830              LDR      r0,[r6,#0]
000056  b118              CBZ      r0,|L1.96|
;;;800               ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
000058  6820              LDR      r0,[r4,#0]
00005a  6831              LDR      r1,[r6,#0]
00005c  4288              CMP      r0,r1
00005e  d105              BNE      |L1.108|
                  |L1.96|
;;;801            /* other PCB already binds to this local IP and port */
;;;802            LWIP_DEBUGF(UDP_DEBUG,
000060  bf00              NOP      
000062  bf00              NOP      
;;;803                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
;;;804            return ERR_USE;
000064  f06f0007          MVN      r0,#7
                  |L1.104|
;;;805          }
;;;806        }
;;;807      }
;;;808    
;;;809      ip_addr_set(&pcb->local_ip, ipaddr);
;;;810    
;;;811      /* no port specified? */
;;;812      if (port == 0) {
;;;813        port = udp_new_port();
;;;814        if (port == 0) {
;;;815          /* no more ports available in local range */
;;;816          LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
;;;817          return ERR_USE;
;;;818        }
;;;819      }
;;;820      pcb->local_port = port;
;;;821      snmp_insert_udpidx_tree(pcb);
;;;822      /* pcb not active yet? */
;;;823      if (rebind == 0) {
;;;824        /* place the PCB on the active list if not already there */
;;;825        pcb->next = udp_pcbs;
;;;826        udp_pcbs = pcb;
;;;827      }
;;;828      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;829                  ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
;;;830                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;831                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;832                   pcb->local_port));
;;;833      return ERR_OK;
;;;834    }
000068  e8bd81f0          POP      {r4-r8,pc}
                  |L1.108|
00006c  68e4              LDR      r4,[r4,#0xc]          ;777
                  |L1.110|
00006e  2c00              CMP      r4,#0                 ;777
000070  d1d6              BNE      |L1.32|
000072  b90e              CBNZ     r6,|L1.120|
000074  2000              MOVS     r0,#0                 ;809
000076  e000              B        |L1.122|
                  |L1.120|
000078  6830              LDR      r0,[r6,#0]            ;809
                  |L1.122|
00007a  6028              STR      r0,[r5,#0]            ;809
00007c  b947              CBNZ     r7,|L1.144|
00007e  f7fffffe          BL       udp_new_port
000082  4607              MOV      r7,r0                 ;813
000084  b927              CBNZ     r7,|L1.144|
000086  bf00              NOP                            ;816
000088  bf00              NOP                            ;816
00008a  f06f0007          MVN      r0,#7                 ;817
00008e  e7eb              B        |L1.104|
                  |L1.144|
000090  826f              STRH     r7,[r5,#0x12]         ;820
000092  f1b80f00          CMP      r8,#0                 ;823
000096  d104              BNE      |L1.162|
000098  4804              LDR      r0,|L1.172|
00009a  6800              LDR      r0,[r0,#0]            ;825  ; udp_pcbs
00009c  60e8              STR      r0,[r5,#0xc]          ;825
00009e  4803              LDR      r0,|L1.172|
0000a0  6005              STR      r5,[r0,#0]            ;826  ; udp_pcbs
                  |L1.162|
0000a2  bf00              NOP                            ;828
0000a4  bf00              NOP                            ;828
0000a6  2000              MOVS     r0,#0                 ;833
0000a8  e7de              B        |L1.104|
;;;835    /**
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
                          DCD      udp_pcbs
                  |L1.176|
0000b0  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\udp.c",0
0000b4  5749505c
0000b8  6c776970
0000bc  2d312e34
0000c0  2e315c73
0000c4  72635c63
0000c8  6f72655c
0000cc  7564702e
0000d0  6300    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L1.212|
0000d4  72656269          DCB      "rebind == 0",0
0000d8  6e64203d
0000dc  3d203000
                  |L1.224|
0000e0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000e4  7274696f
0000e8  6e202225
0000ec  73222066
0000f0  61696c65
0000f4  64206174
0000f8  206c696e
0000fc  65202564
000100  20696e20
000104  25730d0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0

                          AREA ||i.udp_connect||, CODE, READONLY, ALIGN=2

                  udp_connect PROC
;;;852    err_t
;;;853    udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;854    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;855      struct udp_pcb *ipcb;
;;;856    
;;;857      if (pcb->local_port == 0) {
00000a  8a60              LDRH     r0,[r4,#0x12]
00000c  b960              CBNZ     r0,|L2.40|
;;;858        err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
00000e  8a62              LDRH     r2,[r4,#0x12]
000010  4621              MOV      r1,r4
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       udp_bind
000018  4680              MOV      r8,r0
;;;859        if (err != ERR_OK) {
00001a  f1b80f00          CMP      r8,#0
00001e  d002              BEQ      |L2.38|
;;;860          return err;
000020  4640              MOV      r0,r8
                  |L2.34|
;;;861        }
;;;862      }
;;;863    
;;;864      ip_addr_set(&pcb->remote_ip, ipaddr);
;;;865      pcb->remote_port = port;
;;;866      pcb->flags |= UDP_FLAGS_CONNECTED;
;;;867    /** TODO: this functionality belongs in upper layers */
;;;868    #ifdef LWIP_UDP_TODO
;;;869      /* Nail down local IP for netconn_addr()/getsockname() */
;;;870      if (ip_addr_isany(&pcb->local_ip) && !ip_addr_isany(&pcb->remote_ip)) {
;;;871        struct netif *netif;
;;;872    
;;;873        if ((netif = ip_route(&(pcb->remote_ip))) == NULL) {
;;;874          LWIP_DEBUGF(UDP_DEBUG, ("udp_connect: No route to 0x%lx\n", pcb->remote_ip.addr));
;;;875          UDP_STATS_INC(udp.rterr);
;;;876          return ERR_RTE;
;;;877        }
;;;878        /** TODO: this will bind the udp pcb locally, to the interface which
;;;879            is used to route output packets to the remote address. However, we
;;;880            might want to accept incoming packets on any interface! */
;;;881        pcb->local_ip = netif->ip_addr;
;;;882      } else if (ip_addr_isany(&pcb->remote_ip)) {
;;;883        pcb->local_ip.addr = 0;
;;;884      }
;;;885    #endif
;;;886      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;887                  ("udp_connect: connected to %"U16_F".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",
;;;888                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;889                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;890                   pcb->local_port));
;;;891    
;;;892      /* Insert UDP PCB into the list of active UDP PCBs. */
;;;893      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
;;;894        if (pcb == ipcb) {
;;;895          /* already on the list, just return */
;;;896          return ERR_OK;
;;;897        }
;;;898      }
;;;899      /* PCB not yet on the list, add PCB now */
;;;900      pcb->next = udp_pcbs;
;;;901      udp_pcbs = pcb;
;;;902      return ERR_OK;
;;;903    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L2.38|
000026  bf00              NOP                            ;862
                  |L2.40|
000028  b90e              CBNZ     r6,|L2.46|
00002a  2000              MOVS     r0,#0                 ;864
00002c  e000              B        |L2.48|
                  |L2.46|
00002e  6830              LDR      r0,[r6,#0]            ;864
                  |L2.48|
000030  6060              STR      r0,[r4,#4]            ;864
000032  82a7              STRH     r7,[r4,#0x14]         ;865
000034  7c20              LDRB     r0,[r4,#0x10]         ;866
000036  f0400004          ORR      r0,r0,#4              ;866
00003a  7420              STRB     r0,[r4,#0x10]         ;866
00003c  bf00              NOP                            ;886
00003e  bf00              NOP                            ;886
000040  4808              LDR      r0,|L2.100|
000042  6805              LDR      r5,[r0,#0]            ;893  ; udp_pcbs
000044  e004              B        |L2.80|
                  |L2.70|
000046  42ac              CMP      r4,r5                 ;894
000048  d101              BNE      |L2.78|
00004a  2000              MOVS     r0,#0                 ;896
00004c  e7e9              B        |L2.34|
                  |L2.78|
00004e  68ed              LDR      r5,[r5,#0xc]          ;893
                  |L2.80|
000050  2d00              CMP      r5,#0                 ;893
000052  d1f8              BNE      |L2.70|
000054  4803              LDR      r0,|L2.100|
000056  6800              LDR      r0,[r0,#0]            ;900  ; udp_pcbs
000058  60e0              STR      r0,[r4,#0xc]          ;900
00005a  4802              LDR      r0,|L2.100|
00005c  6004              STR      r4,[r0,#0]            ;901  ; udp_pcbs
00005e  2000              MOVS     r0,#0                 ;902
000060  e7df              B        |L2.34|
;;;904    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      udp_pcbs

                          AREA ||i.udp_disconnect||, CODE, READONLY, ALIGN=1

                  udp_disconnect PROC
;;;910    void
;;;911    udp_disconnect(struct udp_pcb *pcb)
000000  2100              MOVS     r1,#0
;;;912    {
;;;913      /* reset remote address association */
;;;914      ip_addr_set_any(&pcb->remote_ip);
000002  6041              STR      r1,[r0,#4]
;;;915      pcb->remote_port = 0;
000004  8281              STRH     r1,[r0,#0x14]
;;;916      /* mark PCB as unconnected */
;;;917      pcb->flags &= ~UDP_FLAGS_CONNECTED;
000006  7c01              LDRB     r1,[r0,#0x10]
000008  f0210104          BIC      r1,r1,#4
00000c  7401              STRB     r1,[r0,#0x10]
;;;918    }
00000e  4770              BX       lr
;;;919    
                          ENDP


                          AREA ||i.udp_init||, CODE, READONLY, ALIGN=1

                  udp_init PROC
;;;85     void
;;;86     udp_init(void)
000000  4770              BX       lr
;;;87     {
;;;88     #if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
;;;89       udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
;;;90     #endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
;;;91     }
;;;92     
                          ENDP


                          AREA ||i.udp_input||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  udp_input PROC
;;;150    void
;;;151    udp_input(struct pbuf *p, struct netif *inp)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;152    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;153      struct udp_hdr *udphdr;
;;;154      struct udp_pcb *pcb, *prev;
;;;155      struct udp_pcb *uncon_pcb;
;;;156      struct ip_hdr *iphdr;
;;;157      u16_t src, dest;
;;;158      u8_t local_match;
;;;159      u8_t broadcast;
;;;160    
;;;161      PERF_START;
;;;162    
;;;163      UDP_STATS_INC(udp.recv);
;;;164    
;;;165      iphdr = (struct ip_hdr *)p->payload;
000008  f8d6a004          LDR      r10,[r6,#4]
;;;166    
;;;167      /* Check minimum length (IP header + UDP header)
;;;168       * and move payload pointer to UDP header */
;;;169      if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
00000c  8931              LDRH     r1,[r6,#8]
00000e  f89a0000          LDRB     r0,[r10,#0]
000012  f000000f          AND      r0,r0,#0xf
000016  2208              MOVS     r2,#8
000018  eb020080          ADD      r0,r2,r0,LSL #2
00001c  4281              CMP      r1,r0
00001e  db08              BLT      |L5.50|
000020  f89a0000          LDRB     r0,[r10,#0]
000024  0700              LSLS     r0,r0,#28
000026  0e80              LSRS     r0,r0,#26
000028  4241              RSBS     r1,r0,#0
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       pbuf_header
000030  b128              CBZ      r0,|L5.62|
                  |L5.50|
;;;170        /* drop short packets */
;;;171        LWIP_DEBUGF(UDP_DEBUG,
000032  bf00              NOP      
000034  bf00              NOP      
;;;172                    ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
;;;173        UDP_STATS_INC(udp.lenerr);
;;;174        UDP_STATS_INC(udp.drop);
;;;175        snmp_inc_udpinerrors();
;;;176        pbuf_free(p);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       pbuf_free
;;;177        goto end;
00003c  e0f1              B        |L5.546|
                  |L5.62|
;;;178      }
;;;179    
;;;180      udphdr = (struct udp_hdr *)p->payload;
00003e  f8d68004          LDR      r8,[r6,#4]
;;;181    
;;;182      /* is broadcast packet ? */
;;;183      broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
000042  4979              LDR      r1,|L5.552|
000044  6808              LDR      r0,[r1,#0]  ; current_iphdr_dest
000046  4629              MOV      r1,r5
000048  f7fffffe          BL       ip4_addr_isbroadcast
00004c  4607              MOV      r7,r0
;;;184    
;;;185      LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
00004e  bf00              NOP      
000050  bf00              NOP      
;;;186    
;;;187      /* convert src and dest ports to host byte order */
;;;188      src = ntohs(udphdr->src);
000052  f8b80000          LDRH     r0,[r8,#0]
000056  f7fffffe          BL       lwip_ntohs
00005a  4683              MOV      r11,r0
;;;189      dest = ntohs(udphdr->dest);
00005c  f8b80002          LDRH     r0,[r8,#2]
000060  f7fffffe          BL       lwip_ntohs
000064  9002              STR      r0,[sp,#8]
;;;190    
;;;191      udp_debug_print(udphdr);
;;;192    
;;;193      /* print the UDP source and destination */
;;;194      LWIP_DEBUGF(UDP_DEBUG,
000066  bf00              NOP      
000068  bf00              NOP      
;;;195                  ("udp (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "
;;;196                   "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;197                   ip4_addr1_16(&iphdr->dest), ip4_addr2_16(&iphdr->dest),
;;;198                   ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
;;;199                   ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
;;;200                   ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));
;;;201    
;;;202    #if LWIP_DHCP
;;;203      pcb = NULL;
00006a  2400              MOVS     r4,#0
;;;204      /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
;;;205         the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
;;;206      if (dest == DHCP_CLIENT_PORT) {
00006c  9802              LDR      r0,[sp,#8]
00006e  2844              CMP      r0,#0x44
000070  d11b              BNE      |L5.170|
;;;207        /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
;;;208        if (src == DHCP_SERVER_PORT) {
000072  f1bb0f43          CMP      r11,#0x43
000076  d168              BNE      |L5.330|
;;;209          if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
000078  6a28              LDR      r0,[r5,#0x20]
00007a  2800              CMP      r0,#0
00007c  d065              BEQ      |L5.330|
00007e  6a28              LDR      r0,[r5,#0x20]
000080  6840              LDR      r0,[r0,#4]
000082  2800              CMP      r0,#0
000084  d061              BEQ      |L5.330|
;;;210            /* accept the packe if 
;;;211               (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
;;;212               - inp->dhcp->pcb->remote == ANY or iphdr->src */
;;;213            if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
000086  6a28              LDR      r0,[r5,#0x20]
000088  6840              LDR      r0,[r0,#4]
00008a  1d00              ADDS     r0,r0,#4
00008c  b150              CBZ      r0,|L5.164|
00008e  6a28              LDR      r0,[r5,#0x20]
000090  6840              LDR      r0,[r0,#4]
000092  6840              LDR      r0,[r0,#4]
000094  b130              CBZ      r0,|L5.164|
;;;214               ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
000096  6a28              LDR      r0,[r5,#0x20]
000098  6840              LDR      r0,[r0,#4]
00009a  6840              LDR      r0,[r0,#4]
00009c  4963              LDR      r1,|L5.556|
00009e  6809              LDR      r1,[r1,#0]  ; current_iphdr_src
0000a0  4288              CMP      r0,r1
0000a2  d152              BNE      |L5.330|
                  |L5.164|
;;;215              pcb = inp->dhcp->pcb;
0000a4  6a28              LDR      r0,[r5,#0x20]
0000a6  6844              LDR      r4,[r0,#4]
0000a8  e04f              B        |L5.330|
                  |L5.170|
;;;216            }
;;;217          }
;;;218        }
;;;219      } else
;;;220    #endif /* LWIP_DHCP */
;;;221      {
;;;222        prev = NULL;
0000aa  f04f0900          MOV      r9,#0
;;;223        local_match = 0;
0000ae  2000              MOVS     r0,#0
0000b0  9001              STR      r0,[sp,#4]
;;;224        uncon_pcb = NULL;
0000b2  9003              STR      r0,[sp,#0xc]
;;;225        /* Iterate through the UDP pcb list for a matching pcb.
;;;226         * 'Perfect match' pcbs (connected to the remote port & ip address) are
;;;227         * preferred. If no perfect match is found, the first unconnected pcb that
;;;228         * matches the local port and ip address gets the datagram. */
;;;229        for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
0000b4  485e              LDR      r0,|L5.560|
0000b6  6804              LDR      r4,[r0,#0]  ; udp_pcbs
0000b8  e042              B        |L5.320|
                  |L5.186|
;;;230          local_match = 0;
0000ba  2000              MOVS     r0,#0
0000bc  9001              STR      r0,[sp,#4]
;;;231          /* print the PCB local and remote address */
;;;232          LWIP_DEBUGF(UDP_DEBUG,
0000be  bf00              NOP      
0000c0  bf00              NOP      
;;;233                      ("pcb (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "
;;;234                       "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;235                       ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;236                       ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
;;;237                       ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
;;;238                       ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));
;;;239    
;;;240          /* compare PCB local addr+port to UDP destination addr+port */
;;;241          if (pcb->local_port == dest) {
0000c2  8a61              LDRH     r1,[r4,#0x12]
0000c4  9802              LDR      r0,[sp,#8]
0000c6  4281              CMP      r1,r0
0000c8  d11e              BNE      |L5.264|
;;;242            if (
0000ca  b917              CBNZ     r7,|L5.210|
;;;243               (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
0000cc  b19c              CBZ      r4,|L5.246|
0000ce  6820              LDR      r0,[r4,#0]
0000d0  b188              CBZ      r0,|L5.246|
                  |L5.210|
;;;244               ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
0000d2  4955              LDR      r1,|L5.552|
0000d4  6820              LDR      r0,[r4,#0]
0000d6  6809              LDR      r1,[r1,#0]  ; current_iphdr_dest
0000d8  4288              CMP      r0,r1
0000da  d00c              BEQ      |L5.246|
;;;245    #if LWIP_IGMP
;;;246               ip_addr_ismulticast(&current_iphdr_dest) ||
;;;247    #endif /* LWIP_IGMP */
;;;248    #if IP_SOF_BROADCAST_RECV
;;;249                (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
;;;250                 (ip_addr_isany(&pcb->local_ip) ||
;;;251                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
;;;252    #else /* IP_SOF_BROADCAST_RECV */
;;;253                (broadcast &&
0000dc  b1a7              CBZ      r7,|L5.264|
;;;254                 (ip_addr_isany(&pcb->local_ip) ||
0000de  b154              CBZ      r4,|L5.246|
0000e0  6820              LDR      r0,[r4,#0]
0000e2  b140              CBZ      r0,|L5.246|
;;;255                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
0000e4  6820              LDR      r0,[r4,#0]
0000e6  68a9              LDR      r1,[r5,#8]
0000e8  4008              ANDS     r0,r0,r1
0000ea  494f              LDR      r1,|L5.552|
0000ec  6809              LDR      r1,[r1,#0]  ; current_iphdr_dest
0000ee  68aa              LDR      r2,[r5,#8]
0000f0  4011              ANDS     r1,r1,r2
0000f2  4288              CMP      r0,r1
0000f4  d108              BNE      |L5.264|
                  |L5.246|
;;;256    #endif /* IP_SOF_BROADCAST_RECV */ 
;;;257              local_match = 1;
0000f6  2001              MOVS     r0,#1
0000f8  9001              STR      r0,[sp,#4]
;;;258              if ((uncon_pcb == NULL) && 
0000fa  9803              LDR      r0,[sp,#0xc]
0000fc  b920              CBNZ     r0,|L5.264|
;;;259                  ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
0000fe  7c20              LDRB     r0,[r4,#0x10]
000100  f0000004          AND      r0,r0,#4
000104  b900              CBNZ     r0,|L5.264|
;;;260                /* the first unconnected matching PCB */
;;;261                uncon_pcb = pcb;
000106  9403              STR      r4,[sp,#0xc]
                  |L5.264|
;;;262              }
;;;263            }
;;;264          }
;;;265          /* compare PCB remote addr+port to UDP source addr+port */
;;;266          if ((local_match != 0) &&
000108  9801              LDR      r0,[sp,#4]
00010a  b1b8              CBZ      r0,|L5.316|
;;;267              (pcb->remote_port == src) &&
00010c  8aa0              LDRH     r0,[r4,#0x14]
00010e  4558              CMP      r0,r11
000110  d114              BNE      |L5.316|
;;;268              (ip_addr_isany(&pcb->remote_ip) ||
000112  1d20              ADDS     r0,r4,#4
000114  b130              CBZ      r0,|L5.292|
000116  6860              LDR      r0,[r4,#4]
000118  b120              CBZ      r0,|L5.292|
;;;269               ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
00011a  4944              LDR      r1,|L5.556|
00011c  6860              LDR      r0,[r4,#4]
00011e  6809              LDR      r1,[r1,#0]  ; current_iphdr_src
000120  4288              CMP      r0,r1
000122  d10b              BNE      |L5.316|
                  |L5.292|
;;;270            /* the first fully matching PCB */
;;;271            if (prev != NULL) {
000124  f1b90f00          CMP      r9,#0
000128  d007              BEQ      |L5.314|
;;;272              /* move the pcb to the front of udp_pcbs so that is
;;;273                 found faster next time */
;;;274              prev->next = pcb->next;
00012a  68e0              LDR      r0,[r4,#0xc]
00012c  f8c9000c          STR      r0,[r9,#0xc]
;;;275              pcb->next = udp_pcbs;
000130  483f              LDR      r0,|L5.560|
000132  6800              LDR      r0,[r0,#0]  ; udp_pcbs
000134  60e0              STR      r0,[r4,#0xc]
;;;276              udp_pcbs = pcb;
000136  483e              LDR      r0,|L5.560|
000138  6004              STR      r4,[r0,#0]  ; udp_pcbs
                  |L5.314|
;;;277            } else {
;;;278              UDP_STATS_INC(udp.cachehit);
;;;279            }
;;;280            break;
00013a  e003              B        |L5.324|
                  |L5.316|
;;;281          }
;;;282          prev = pcb;
00013c  46a1              MOV      r9,r4
00013e  68e4              LDR      r4,[r4,#0xc]          ;229
                  |L5.320|
000140  2c00              CMP      r4,#0                 ;229
000142  d1ba              BNE      |L5.186|
                  |L5.324|
000144  bf00              NOP                            ;280
;;;283        }
;;;284        /* no fully matching pcb found? then look for an unconnected pcb */
;;;285        if (pcb == NULL) {
000146  b904              CBNZ     r4,|L5.330|
;;;286          pcb = uncon_pcb;
000148  9c03              LDR      r4,[sp,#0xc]
                  |L5.330|
;;;287        }
;;;288      }
;;;289    
;;;290      /* Check checksum if this is a match or if it was directed at us. */
;;;291      if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
00014a  b924              CBNZ     r4,|L5.342|
00014c  4936              LDR      r1,|L5.552|
00014e  6868              LDR      r0,[r5,#4]
000150  6809              LDR      r1,[r1,#0]  ; current_iphdr_dest
000152  4288              CMP      r0,r1
000154  d161              BNE      |L5.538|
                  |L5.342|
;;;292        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
000156  bf00              NOP      
000158  bf00              NOP      
;;;293    #if LWIP_UDPLITE
;;;294        if (IPH_PROTO(iphdr) == IP_PROTO_UDPLITE) {
;;;295          /* Do the UDP Lite checksum */
;;;296    #if CHECKSUM_CHECK_UDP
;;;297          u16_t chklen = ntohs(udphdr->len);
;;;298          if (chklen < sizeof(struct udp_hdr)) {
;;;299            if (chklen == 0) {
;;;300              /* For UDP-Lite, checksum length of 0 means checksum
;;;301                 over the complete packet (See RFC 3828 chap. 3.1) */
;;;302              chklen = p->tot_len;
;;;303            } else {
;;;304              /* At least the UDP-Lite header must be covered by the
;;;305                 checksum! (Again, see RFC 3828 chap. 3.1) */
;;;306              UDP_STATS_INC(udp.chkerr);
;;;307              UDP_STATS_INC(udp.drop);
;;;308              snmp_inc_udpinerrors();
;;;309              pbuf_free(p);
;;;310              goto end;
;;;311            }
;;;312          }
;;;313          if (inet_chksum_pseudo_partial(p, &current_iphdr_src, &current_iphdr_dest,
;;;314                                 IP_PROTO_UDPLITE, p->tot_len, chklen) != 0) {
;;;315           LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;316                       ("udp_input: UDP Lite datagram discarded due to failing checksum\n"));
;;;317            UDP_STATS_INC(udp.chkerr);
;;;318            UDP_STATS_INC(udp.drop);
;;;319            snmp_inc_udpinerrors();
;;;320            pbuf_free(p);
;;;321            goto end;
;;;322          }
;;;323    #endif /* CHECKSUM_CHECK_UDP */
;;;324        } else
;;;325    #endif /* LWIP_UDPLITE */
;;;326        {
;;;327    #if CHECKSUM_CHECK_UDP
;;;328          if (udphdr->chksum != 0) {
00015a  f8b80006          LDRH     r0,[r8,#6]
00015e  b170              CBZ      r0,|L5.382|
;;;329            if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
000160  8930              LDRH     r0,[r6,#8]
000162  2311              MOVS     r3,#0x11
000164  4a30              LDR      r2,|L5.552|
000166  4931              LDR      r1,|L5.556|
000168  9000              STR      r0,[sp,#0]
00016a  4630              MOV      r0,r6
00016c  f7fffffe          BL       inet_chksum_pseudo
000170  b128              CBZ      r0,|L5.382|
;;;330                                   IP_PROTO_UDP, p->tot_len) != 0) {
;;;331              LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
000172  bf00              NOP      
000174  bf00              NOP      
;;;332                          ("udp_input: UDP datagram discarded due to failing checksum\n"));
;;;333              UDP_STATS_INC(udp.chkerr);
;;;334              UDP_STATS_INC(udp.drop);
;;;335              snmp_inc_udpinerrors();
;;;336              pbuf_free(p);
000176  4630              MOV      r0,r6
000178  f7fffffe          BL       pbuf_free
;;;337              goto end;
00017c  e051              B        |L5.546|
                  |L5.382|
;;;338            }
;;;339          }
;;;340    #endif /* CHECKSUM_CHECK_UDP */
;;;341        }
;;;342        if(pbuf_header(p, -UDP_HLEN)) {
00017e  f06f0107          MVN      r1,#7
000182  4630              MOV      r0,r6
000184  f7fffffe          BL       pbuf_header
000188  b170              CBZ      r0,|L5.424|
;;;343          /* Can we cope with this failing? Just assert for now */
;;;344          LWIP_ASSERT("pbuf_header failed\n", 0);
00018a  bf00              NOP      
00018c  bf00              NOP      
00018e  a329              ADR      r3,|L5.564|
000190  f44f72ac          MOV      r2,#0x158
000194  a130              ADR      r1,|L5.600|
000196  a035              ADR      r0,|L5.620|
000198  f7fffffe          BL       __2printf
00019c  bf00              NOP      
00019e  bf00              NOP      
;;;345          UDP_STATS_INC(udp.drop);
;;;346          snmp_inc_udpinerrors();
;;;347          pbuf_free(p);
0001a0  4630              MOV      r0,r6
0001a2  f7fffffe          BL       pbuf_free
;;;348          goto end;
0001a6  e03c              B        |L5.546|
                  |L5.424|
;;;349        }
;;;350        if (pcb != NULL) {
0001a8  b174              CBZ      r4,|L5.456|
;;;351          snmp_inc_udpindatagrams();
;;;352    #if SO_REUSE && SO_REUSE_RXTOALL
;;;353          if ((broadcast || ip_addr_ismulticast(&current_iphdr_dest)) &&
;;;354              ip_get_option(pcb, SOF_REUSEADDR)) {
;;;355            /* pass broadcast- or multicast packets to all multicast pcbs
;;;356               if SOF_REUSEADDR is set on the first match */
;;;357            struct udp_pcb *mpcb;
;;;358            u8_t p_header_changed = 0;
;;;359            for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
;;;360              if (mpcb != pcb) {
;;;361                /* compare PCB local addr+port to UDP destination addr+port */
;;;362                if ((mpcb->local_port == dest) &&
;;;363                    ((!broadcast && ip_addr_isany(&mpcb->local_ip)) ||
;;;364                     ip_addr_cmp(&(mpcb->local_ip), &current_iphdr_dest) ||
;;;365    #if LWIP_IGMP
;;;366                     ip_addr_ismulticast(&current_iphdr_dest) ||
;;;367    #endif /* LWIP_IGMP */
;;;368    #if IP_SOF_BROADCAST_RECV
;;;369                     (broadcast && ip_get_option(mpcb, SOF_BROADCAST)))) {
;;;370    #else  /* IP_SOF_BROADCAST_RECV */
;;;371                     (broadcast))) {
;;;372    #endif /* IP_SOF_BROADCAST_RECV */
;;;373                  /* pass a copy of the packet to all local matches */
;;;374                  if (mpcb->recv != NULL) {
;;;375                    struct pbuf *q;
;;;376                    /* for that, move payload to IP header again */
;;;377                    if (p_header_changed == 0) {
;;;378                      pbuf_header(p, (s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;379                      p_header_changed = 1;
;;;380                    }
;;;381                    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
;;;382                    if (q != NULL) {
;;;383                      err_t err = pbuf_copy(q, p);
;;;384                      if (err == ERR_OK) {
;;;385                        /* move payload to UDP data */
;;;386                        pbuf_header(q, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;387                        mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
;;;388                      }
;;;389                    }
;;;390                  }
;;;391                }
;;;392              }
;;;393            }
;;;394            if (p_header_changed) {
;;;395              /* and move payload to UDP data again */
;;;396              pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;397            }
;;;398          }
;;;399    #endif /* SO_REUSE && SO_REUSE_RXTOALL */
;;;400          /* callback */
;;;401          if (pcb->recv != NULL) {
0001aa  69a0              LDR      r0,[r4,#0x18]
0001ac  b140              CBZ      r0,|L5.448|
;;;402            /* now the recv function is responsible for freeing p */
;;;403            pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
0001ae  f8cdb000          STR      r11,[sp,#0]
0001b2  4b1e              LDR      r3,|L5.556|
0001b4  4632              MOV      r2,r6
0001b6  4621              MOV      r1,r4
0001b8  e9d4c006          LDRD     r12,r0,[r4,#0x18]
0001bc  47e0              BLX      r12
0001be  e02f              B        |L5.544|
                  |L5.448|
;;;404          } else {
;;;405            /* no recv function registered? then we have to free the pbuf! */
;;;406            pbuf_free(p);
0001c0  4630              MOV      r0,r6
0001c2  f7fffffe          BL       pbuf_free
;;;407            goto end;
0001c6  e02c              B        |L5.546|
                  |L5.456|
;;;408          }
;;;409        } else {
;;;410          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
0001c8  bf00              NOP      
0001ca  bf00              NOP      
;;;411    
;;;412    #if LWIP_ICMP
;;;413          /* No match was found, send ICMP destination port unreachable unless
;;;414             destination address was broadcast/multicast. */
;;;415          if (!broadcast &&
0001cc  bb0f              CBNZ     r7,|L5.530|
;;;416              !ip_addr_ismulticast(&current_iphdr_dest)) {
0001ce  4816              LDR      r0,|L5.552|
0001d0  7800              LDRB     r0,[r0,#0]  ; current_iphdr_dest
0001d2  f00000f0          AND      r0,r0,#0xf0
0001d6  28e0              CMP      r0,#0xe0
0001d8  d01b              BEQ      |L5.530|
;;;417            /* move payload pointer back to ip header */
;;;418            pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
0001da  f89a0000          LDRB     r0,[r10,#0]
0001de  f000000f          AND      r0,r0,#0xf
0001e2  2208              MOVS     r2,#8
0001e4  eb020180          ADD      r1,r2,r0,LSL #2
0001e8  4630              MOV      r0,r6
0001ea  f7fffffe          BL       pbuf_header
;;;419            LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
0001ee  bf00              NOP      
0001f0  6870              LDR      r0,[r6,#4]
0001f2  4550              CMP      r0,r10
0001f4  d008              BEQ      |L5.520|
0001f6  bf00              NOP      
0001f8  a30e              ADR      r3,|L5.564|
0001fa  f24012a3          MOV      r2,#0x1a3
0001fe  a126              ADR      r1,|L5.664|
000200  a01a              ADR      r0,|L5.620|
000202  f7fffffe          BL       __2printf
000206  bf00              NOP      
                  |L5.520|
000208  bf00              NOP      
;;;420            icmp_dest_unreach(p, ICMP_DUR_PORT);
00020a  2103              MOVS     r1,#3
00020c  4630              MOV      r0,r6
00020e  f7fffffe          BL       icmp_dest_unreach
                  |L5.530|
;;;421          }
;;;422    #endif /* LWIP_ICMP */
;;;423          UDP_STATS_INC(udp.proterr);
;;;424          UDP_STATS_INC(udp.drop);
;;;425          snmp_inc_udpnoports();
;;;426          pbuf_free(p);
000212  4630              MOV      r0,r6
000214  f7fffffe          BL       pbuf_free
000218  e002              B        |L5.544|
                  |L5.538|
;;;427        }
;;;428      } else {
;;;429        pbuf_free(p);
00021a  4630              MOV      r0,r6
00021c  f7fffffe          BL       pbuf_free
                  |L5.544|
;;;430      }
;;;431    end:
000220  bf00              NOP      
                  |L5.546|
;;;432      PERF_STOP("udp_input");
;;;433    }
000222  e8bd9fff          POP      {r0-r12,pc}
;;;434    
                          ENDP

000226  0000              DCW      0x0000
                  |L5.552|
                          DCD      current_iphdr_dest
                  |L5.556|
                          DCD      current_iphdr_src
                  |L5.560|
                          DCD      udp_pcbs
                  |L5.564|
000234  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\udp.c",0
000238  5749505c
00023c  6c776970
000240  2d312e34
000244  2e315c73
000248  72635c63
00024c  6f72655c
000250  7564702e
000254  6300    
000256  00                DCB      0
000257  00                DCB      0
                  |L5.600|
000258  70627566          DCB      "pbuf_header failed\n",0
00025c  5f686561
000260  64657220
000264  6661696c
000268  65640a00
                  |L5.620|
00026c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000270  7274696f
000274  6e202225
000278  73222066
00027c  61696c65
000280  64206174
000284  206c696e
000288  65202564
00028c  20696e20
000290  25730d0a
000294  00      
000295  00                DCB      0
000296  00                DCB      0
000297  00                DCB      0
                  |L5.664|
000298  702d3e70          DCB      "p->payload == iphdr",0
00029c  61796c6f
0002a0  6164203d
0002a4  3d206970
0002a8  68647200

                          AREA ||i.udp_new||, CODE, READONLY, ALIGN=1

                  udp_new PROC
;;;976    struct udp_pcb *
;;;977    udp_new(void)
000000  b510              PUSH     {r4,lr}
;;;978    {
;;;979      struct udp_pcb *pcb;
;;;980      pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       memp_malloc
000008  4604              MOV      r4,r0
;;;981      /* could allocate UDP PCB? */
;;;982      if (pcb != NULL) {
00000a  b12c              CBZ      r4,|L6.24|
;;;983        /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
;;;984         * which means checksum is generated over the whole datagram per default
;;;985         * (recommended as default by RFC 3828). */
;;;986        /* initialize PCB to all zeroes */
;;;987        memset(pcb, 0, sizeof(struct udp_pcb));
00000c  2120              MOVS     r1,#0x20
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __aeabi_memclr4
;;;988        pcb->ttl = UDP_TTL;
000014  20ff              MOVS     r0,#0xff
000016  72a0              STRB     r0,[r4,#0xa]
                  |L6.24|
;;;989      }
;;;990      return pcb;
000018  4620              MOV      r0,r4
;;;991    }
00001a  bd10              POP      {r4,pc}
;;;992    
                          ENDP


                          AREA ||i.udp_new_port||, CODE, READONLY, ALIGN=2

                  udp_new_port PROC
;;;98     static u16_t
;;;99     udp_new_port(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101      u16_t n = 0;
000002  2200              MOVS     r2,#0
;;;102      struct udp_pcb *pcb;
;;;103      
;;;104    again:
000004  bf00              NOP      
                  |L7.6|
;;;105      if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
000006  4812              LDR      r0,|L7.80|
000008  8803              LDRH     r3,[r0,#0]  ; udp_port
00000a  8800              LDRH     r0,[r0,#0]  ; udp_port
00000c  1c40              ADDS     r0,r0,#1
00000e  4c10              LDR      r4,|L7.80|
000010  8020              STRH     r0,[r4,#0]
000012  f64f70ff          MOV      r0,#0xffff
000016  4283              CMP      r3,r0
000018  d103              BNE      |L7.34|
;;;106        udp_port = UDP_LOCAL_PORT_RANGE_START;
00001a  f44f4040          MOV      r0,#0xc000
00001e  4623              MOV      r3,r4
000020  8018              STRH     r0,[r3,#0]
                  |L7.34|
;;;107      }
;;;108      /* Check all PCBs. */
;;;109      for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
000022  480c              LDR      r0,|L7.84|
000024  6801              LDR      r1,[r0,#0]  ; udp_pcbs
000026  e00e              B        |L7.70|
                  |L7.40|
;;;110        if (pcb->local_port == udp_port) {
000028  8a48              LDRH     r0,[r1,#0x12]
00002a  4b09              LDR      r3,|L7.80|
00002c  881b              LDRH     r3,[r3,#0]  ; udp_port
00002e  4298              CMP      r0,r3
000030  d108              BNE      |L7.68|
;;;111          if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
000032  1c50              ADDS     r0,r2,#1
000034  b280              UXTH     r0,r0
000036  4602              MOV      r2,r0
000038  f5b04f80          CMP      r0,#0x4000
00003c  db01              BLT      |L7.66|
;;;112            return 0;
00003e  2000              MOVS     r0,#0
                  |L7.64|
;;;113          }
;;;114          goto again;
;;;115        }
;;;116      }
;;;117      return udp_port;
;;;118    #if 0
;;;119      struct udp_pcb *ipcb = udp_pcbs;
;;;120      while ((ipcb != NULL) && (udp_port != UDP_LOCAL_PORT_RANGE_END)) {
;;;121        if (ipcb->local_port == udp_port) {
;;;122          /* port is already used by another udp_pcb */
;;;123          udp_port++;
;;;124          /* restart scanning all udp pcbs */
;;;125          ipcb = udp_pcbs;
;;;126        } else {
;;;127          /* go on with next udp pcb */
;;;128          ipcb = ipcb->next;
;;;129        }
;;;130      }
;;;131      if (ipcb != NULL) {
;;;132        return 0;
;;;133      }
;;;134      return udp_port;
;;;135    #endif
;;;136    }
000040  bd10              POP      {r4,pc}
                  |L7.66|
000042  e7e0              B        |L7.6|
                  |L7.68|
000044  68c9              LDR      r1,[r1,#0xc]          ;109
                  |L7.70|
000046  2900              CMP      r1,#0                 ;109
000048  d1ee              BNE      |L7.40|
00004a  4801              LDR      r0,|L7.80|
00004c  8800              LDRH     r0,[r0,#0]            ;117  ; udp_port
00004e  e7f7              B        |L7.64|
;;;137    
                          ENDP

                  |L7.80|
                          DCD      udp_port
                  |L7.84|
                          DCD      udp_pcbs

                          AREA ||i.udp_recv||, CODE, READONLY, ALIGN=1

                  udp_recv PROC
;;;929    void
;;;930    udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
000000  6181              STR      r1,[r0,#0x18]
;;;931    {
;;;932      /* remember recv() callback and user data */
;;;933      pcb->recv = recv;
;;;934      pcb->recv_arg = recv_arg;
000002  61c2              STR      r2,[r0,#0x1c]
;;;935    }
000004  4770              BX       lr
;;;936    
                          ENDP


                          AREA ||i.udp_remove||, CODE, READONLY, ALIGN=2

                  udp_remove PROC
;;;945    void
;;;946    udp_remove(struct udp_pcb *pcb)
000000  b570              PUSH     {r4-r6,lr}
;;;947    {
000002  4605              MOV      r5,r0
;;;948      struct udp_pcb *pcb2;
;;;949    
;;;950      snmp_delete_udpidx_tree(pcb);
;;;951      /* pcb to be removed is first in list? */
;;;952      if (udp_pcbs == pcb) {
000004  480d              LDR      r0,|L9.60|
000006  6800              LDR      r0,[r0,#0]  ; udp_pcbs
000008  42a8              CMP      r0,r5
00000a  d105              BNE      |L9.24|
;;;953        /* make list start at 2nd pcb */
;;;954        udp_pcbs = udp_pcbs->next;
00000c  480b              LDR      r0,|L9.60|
00000e  6800              LDR      r0,[r0,#0]  ; udp_pcbs
000010  68c0              LDR      r0,[r0,#0xc]
000012  490a              LDR      r1,|L9.60|
000014  6008              STR      r0,[r1,#0]  ; udp_pcbs
000016  e00c              B        |L9.50|
                  |L9.24|
;;;955        /* pcb not 1st in list */
;;;956      } else {
;;;957        for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
000018  4808              LDR      r0,|L9.60|
00001a  6804              LDR      r4,[r0,#0]  ; udp_pcbs
00001c  e007              B        |L9.46|
                  |L9.30|
;;;958          /* find pcb in udp_pcbs list */
;;;959          if (pcb2->next != NULL && pcb2->next == pcb) {
00001e  68e0              LDR      r0,[r4,#0xc]
000020  b120              CBZ      r0,|L9.44|
000022  68e0              LDR      r0,[r4,#0xc]
000024  42a8              CMP      r0,r5
000026  d101              BNE      |L9.44|
;;;960            /* remove pcb from list */
;;;961            pcb2->next = pcb->next;
000028  68e8              LDR      r0,[r5,#0xc]
00002a  60e0              STR      r0,[r4,#0xc]
                  |L9.44|
00002c  68e4              LDR      r4,[r4,#0xc]          ;957
                  |L9.46|
00002e  2c00              CMP      r4,#0                 ;957
000030  d1f5              BNE      |L9.30|
                  |L9.50|
;;;962          }
;;;963        }
;;;964      }
;;;965      memp_free(MEMP_UDP_PCB, pcb);
000032  4629              MOV      r1,r5
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       memp_free
;;;966    }
00003a  bd70              POP      {r4-r6,pc}
;;;967    
                          ENDP

                  |L9.60|
                          DCD      udp_pcbs

                          AREA ||i.udp_send||, CODE, READONLY, ALIGN=1

                  udp_send PROC
;;;453    err_t
;;;454    udp_send(struct udp_pcb *pcb, struct pbuf *p)
000000  b570              PUSH     {r4-r6,lr}
;;;455    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;456      /* send to the packet using remote ip and port stored in the pcb */
;;;457      return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
000006  8aa3              LDRH     r3,[r4,#0x14]
000008  1d22              ADDS     r2,r4,#4
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       udp_sendto
;;;458    }
000012  bd70              POP      {r4-r6,pc}
;;;459    
                          ENDP


                          AREA ||i.udp_sendto||, CODE, READONLY, ALIGN=1

                  udp_sendto PROC
;;;490    err_t
;;;491    udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;492      ip_addr_t *dst_ip, u16_t dst_port)
;;;493    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;494    #if LWIP_CHECKSUM_ON_COPY
;;;495      return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
;;;496    }
;;;497    
;;;498    /** Same as udp_sendto(), but with checksum */
;;;499    err_t
;;;500    udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;501                      u16_t dst_port, u8_t have_chksum, u16_t chksum)
;;;502    {
;;;503    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;504      struct netif *netif;
;;;505    
;;;506      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
00000c  bf00              NOP      
00000e  bf00              NOP      
;;;507    
;;;508      /* find the outgoing network interface for this packet */
;;;509    #if LWIP_IGMP
;;;510      netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
;;;511    #else
;;;512      netif = ip_route(dst_ip);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       ip_route
000016  4604              MOV      r4,r0
;;;513    #endif /* LWIP_IGMP */
;;;514    
;;;515      /* no outgoing network interface could be found? */
;;;516      if (netif == NULL) {
000018  b92c              CBNZ     r4,|L11.38|
;;;517        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;518          ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
;;;519        UDP_STATS_INC(udp.rterr);
;;;520        return ERR_RTE;
00001e  f06f0003          MVN      r0,#3
                  |L11.34|
;;;521      }
;;;522    #if LWIP_CHECKSUM_ON_COPY
;;;523      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
;;;524    #else /* LWIP_CHECKSUM_ON_COPY */
;;;525      return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
;;;526    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;527    }
000022  e8bd83f8          POP      {r3-r9,pc}
                  |L11.38|
000026  4643              MOV      r3,r8                 ;525
000028  462a              MOV      r2,r5                 ;525
00002a  4639              MOV      r1,r7                 ;525
00002c  4630              MOV      r0,r6                 ;525
00002e  9400              STR      r4,[sp,#0]            ;525
000030  f7fffffe          BL       udp_sendto_if
000034  e7f5              B        |L11.34|
;;;528    
                          ENDP


                          AREA ||i.udp_sendto_if||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  udp_sendto_if PROC
;;;548    err_t
;;;549    udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;550      ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
;;;551    {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  f8dd8040          LDR      r8,[sp,#0x40]
;;;552    #if LWIP_CHECKSUM_ON_COPY
;;;553      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
;;;554    }
;;;555    
;;;556    /** Same as udp_sendto_if(), but with checksum */
;;;557    err_t
;;;558    udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;559                         u16_t dst_port, struct netif *netif, u8_t have_chksum,
;;;560                         u16_t chksum)
;;;561    {
;;;562    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;563      struct udp_hdr *udphdr;
;;;564      ip_addr_t *src_ip;
;;;565      err_t err;
;;;566      struct pbuf *q; /* q will be sent down the stack */
;;;567    
;;;568    #if IP_SOF_BROADCAST
;;;569      /* broadcast filter? */
;;;570      if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(dst_ip, netif)) {
;;;571        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;572          ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
;;;573        return ERR_VAL;
;;;574      }
;;;575    #endif /* IP_SOF_BROADCAST */
;;;576    
;;;577      /* if the PCB is not yet bound to a port, bind it here */
;;;578      if (pcb->local_port == 0) {
00000e  8a60              LDRH     r0,[r4,#0x12]
000010  b980              CBNZ     r0,|L12.52|
;;;579        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
000012  bf00              NOP      
000014  bf00              NOP      
;;;580        err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
000016  8a62              LDRH     r2,[r4,#0x12]
000018  4621              MOV      r1,r4
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       udp_bind
000020  4682              MOV      r10,r0
;;;581        if (err != ERR_OK) {
000022  f1ba0f00          CMP      r10,#0
000026  d005              BEQ      |L12.52|
;;;582          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
000028  bf00              NOP      
00002a  bf00              NOP      
;;;583          return err;
00002c  4650              MOV      r0,r10
                  |L12.46|
;;;584        }
;;;585      }
;;;586    
;;;587      /* not enough space to add an UDP header to first pbuf in given p chain? */
;;;588      if (pbuf_header(p, UDP_HLEN)) {
;;;589        /* allocate header in a separate new pbuf */
;;;590        q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
;;;591        /* new header pbuf could not be allocated? */
;;;592        if (q == NULL) {
;;;593          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
;;;594          return ERR_MEM;
;;;595        }
;;;596        if (p->tot_len != 0) {
;;;597          /* chain header q in front of given pbuf p (only if p contains data) */
;;;598          pbuf_chain(q, p);
;;;599        }
;;;600        /* first pbuf q points to header pbuf */
;;;601        LWIP_DEBUGF(UDP_DEBUG,
;;;602                    ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
;;;603      } else {
;;;604        /* adding space for header within p succeeded */
;;;605        /* first pbuf q equals given pbuf */
;;;606        q = p;
;;;607        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
;;;608      }
;;;609      LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
;;;610                  (q->len >= sizeof(struct udp_hdr)));
;;;611      /* q now represents the packet to be sent */
;;;612      udphdr = (struct udp_hdr *)q->payload;
;;;613      udphdr->src = htons(pcb->local_port);
;;;614      udphdr->dest = htons(dst_port);
;;;615      /* in UDP, 0 checksum means 'no checksum' */
;;;616      udphdr->chksum = 0x0000; 
;;;617    
;;;618      /* Multicast Loop? */
;;;619    #if LWIP_IGMP
;;;620      if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
;;;621        q->flags |= PBUF_FLAG_MCASTLOOP;
;;;622      }
;;;623    #endif /* LWIP_IGMP */
;;;624    
;;;625    
;;;626      /* PCB local address is IP_ANY_ADDR? */
;;;627      if (ip_addr_isany(&pcb->local_ip)) {
;;;628        /* use outgoing network interface IP address as source address */
;;;629        src_ip = &(netif->ip_addr);
;;;630      } else {
;;;631        /* check if UDP PCB local IP address is correct
;;;632         * this could be an old address if netif->ip_addr has changed */
;;;633        if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
;;;634          /* local_ip doesn't match, drop the packet */
;;;635          if (q != p) {
;;;636            /* free the header pbuf */
;;;637            pbuf_free(q);
;;;638            q = NULL;
;;;639            /* p is still referenced by the caller, and will live on */
;;;640          }
;;;641          return ERR_VAL;
;;;642        }
;;;643        /* use UDP PCB local IP address as source address */
;;;644        src_ip = &(pcb->local_ip);
;;;645      }
;;;646    
;;;647      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
;;;648    
;;;649    #if LWIP_UDPLITE
;;;650      /* UDP Lite protocol? */
;;;651      if (pcb->flags & UDP_FLAGS_UDPLITE) {
;;;652        u16_t chklen, chklen_hdr;
;;;653        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE packet length %"U16_F"\n", q->tot_len));
;;;654        /* set UDP message length in UDP header */
;;;655        chklen_hdr = chklen = pcb->chksum_len_tx;
;;;656        if ((chklen < sizeof(struct udp_hdr)) || (chklen > q->tot_len)) {
;;;657          if (chklen != 0) {
;;;658            LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE pcb->chksum_len is illegal: %"U16_F"\n", chklen));
;;;659          }
;;;660          /* For UDP-Lite, checksum length of 0 means checksum
;;;661             over the complete packet. (See RFC 3828 chap. 3.1)
;;;662             At least the UDP-Lite header must be covered by the
;;;663             checksum, therefore, if chksum_len has an illegal
;;;664             value, we generate the checksum over the complete
;;;665             packet to be safe. */
;;;666          chklen_hdr = 0;
;;;667          chklen = q->tot_len;
;;;668        }
;;;669        udphdr->len = htons(chklen_hdr);
;;;670        /* calculate checksum */
;;;671    #if CHECKSUM_GEN_UDP
;;;672        udphdr->chksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip,
;;;673          IP_PROTO_UDPLITE, q->tot_len,
;;;674    #if !LWIP_CHECKSUM_ON_COPY
;;;675          chklen);
;;;676    #else /* !LWIP_CHECKSUM_ON_COPY */
;;;677          (have_chksum ? UDP_HLEN : chklen));
;;;678        if (have_chksum) {
;;;679          u32_t acc;
;;;680          acc = udphdr->chksum + (u16_t)~(chksum);
;;;681          udphdr->chksum = FOLD_U32T(acc);
;;;682        }
;;;683    #endif /* !LWIP_CHECKSUM_ON_COPY */
;;;684    
;;;685        /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;686        if (udphdr->chksum == 0x0000) {
;;;687          udphdr->chksum = 0xffff;
;;;688        }
;;;689    #endif /* CHECKSUM_GEN_UDP */
;;;690        /* output to IP */
;;;691        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
;;;692        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;693        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
;;;694        NETIF_SET_HWADDRHINT(netif, NULL);
;;;695      } else
;;;696    #endif /* LWIP_UDPLITE */
;;;697      {      /* UDP */
;;;698        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
;;;699        udphdr->len = htons(q->tot_len);
;;;700        /* calculate checksum */
;;;701    #if CHECKSUM_GEN_UDP
;;;702        if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
;;;703          u16_t udpchksum;
;;;704    #if LWIP_CHECKSUM_ON_COPY
;;;705          if (have_chksum) {
;;;706            u32_t acc;
;;;707            udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
;;;708              q->tot_len, UDP_HLEN);
;;;709            acc = udpchksum + (u16_t)~(chksum);
;;;710            udpchksum = FOLD_U32T(acc);
;;;711          } else
;;;712    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;713          {
;;;714            udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
;;;715          }
;;;716    
;;;717          /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;718          if (udpchksum == 0x0000) {
;;;719            udpchksum = 0xffff;
;;;720          }
;;;721          udphdr->chksum = udpchksum;
;;;722        }
;;;723    #endif /* CHECKSUM_GEN_UDP */
;;;724        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
;;;725        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
;;;726        /* output to IP */
;;;727        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;728        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
;;;729        NETIF_SET_HWADDRHINT(netif, NULL);
;;;730      }
;;;731      /* TODO: must this be increased even if error occured? */
;;;732      snmp_inc_udpoutdatagrams();
;;;733    
;;;734      /* did we chain a separate header pbuf earlier? */
;;;735      if (q != p) {
;;;736        /* free the header pbuf */
;;;737        pbuf_free(q);
;;;738        q = NULL;
;;;739        /* p is still referenced by the caller, and will live on */
;;;740      }
;;;741    
;;;742      UDP_STATS_INC(udp.xmit);
;;;743      return err;
;;;744    }
00002e  b007              ADD      sp,sp,#0x1c
000030  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.52|
000034  2108              MOVS     r1,#8                 ;588
000036  4630              MOV      r0,r6                 ;588
000038  f7fffffe          BL       pbuf_header
00003c  b198              CBZ      r0,|L12.102|
00003e  2200              MOVS     r2,#0                 ;590
000040  2108              MOVS     r1,#8                 ;590
000042  2001              MOVS     r0,#1                 ;590
000044  f7fffffe          BL       pbuf_alloc
000048  4605              MOV      r5,r0                 ;590
00004a  b925              CBNZ     r5,|L12.86|
00004c  bf00              NOP                            ;593
00004e  bf00              NOP                            ;593
000050  f04f30ff          MOV      r0,#0xffffffff        ;594
000054  e7eb              B        |L12.46|
                  |L12.86|
000056  8930              LDRH     r0,[r6,#8]            ;596
000058  b118              CBZ      r0,|L12.98|
00005a  4631              MOV      r1,r6                 ;598
00005c  4628              MOV      r0,r5                 ;598
00005e  f7fffffe          BL       pbuf_chain
                  |L12.98|
000062  bf00              NOP                            ;601
000064  e002              B        |L12.108|
                  |L12.102|
000066  4635              MOV      r5,r6                 ;606
000068  bf00              NOP                            ;607
00006a  bf00              NOP                            ;607
                  |L12.108|
00006c  bf00              NOP                            ;609
00006e  8968              LDRH     r0,[r5,#0xa]          ;609
000070  2808              CMP      r0,#8                 ;609
000072  d208              BCS      |L12.134|
000074  bf00              NOP                            ;609
000076  a32e              ADR      r3,|L12.304|
000078  f2402261          MOV      r2,#0x261             ;609
00007c  a135              ADR      r1,|L12.340|
00007e  a041              ADR      r0,|L12.388|
000080  f7fffffe          BL       __2printf
000084  bf00              NOP                            ;609
                  |L12.134|
000086  bf00              NOP                            ;609
000088  686f              LDR      r7,[r5,#4]            ;612
00008a  8a60              LDRH     r0,[r4,#0x12]         ;613
00008c  f7fffffe          BL       lwip_htons
000090  8038              STRH     r0,[r7,#0]            ;613
000092  9806              LDR      r0,[sp,#0x18]         ;614
000094  f7fffffe          BL       lwip_htons
000098  8078              STRH     r0,[r7,#2]            ;614
00009a  2000              MOVS     r0,#0                 ;616
00009c  80f8              STRH     r0,[r7,#6]            ;616
00009e  b10c              CBZ      r4,|L12.164|
0000a0  6820              LDR      r0,[r4,#0]            ;627
0000a2  b910              CBNZ     r0,|L12.170|
                  |L12.164|
0000a4  f1080904          ADD      r9,r8,#4              ;629
0000a8  e00e              B        |L12.200|
                  |L12.170|
0000aa  6820              LDR      r0,[r4,#0]            ;633
0000ac  f8d81004          LDR      r1,[r8,#4]            ;633
0000b0  4288              CMP      r0,r1                 ;633
0000b2  d008              BEQ      |L12.198|
0000b4  42b5              CMP      r5,r6                 ;635
0000b6  d003              BEQ      |L12.192|
0000b8  4628              MOV      r0,r5                 ;637
0000ba  f7fffffe          BL       pbuf_free
0000be  2500              MOVS     r5,#0                 ;638
                  |L12.192|
0000c0  f06f0005          MVN      r0,#5                 ;641
0000c4  e7b3              B        |L12.46|
                  |L12.198|
0000c6  46a1              MOV      r9,r4                 ;644
                  |L12.200|
0000c8  bf00              NOP                            ;647
0000ca  bf00              NOP                            ;647
0000cc  bf00              NOP                            ;698
0000ce  bf00              NOP                            ;698
0000d0  8928              LDRH     r0,[r5,#8]            ;699
0000d2  f7fffffe          BL       lwip_htons
0000d6  80b8              STRH     r0,[r7,#4]            ;699
0000d8  7c20              LDRB     r0,[r4,#0x10]         ;702
0000da  f0000001          AND      r0,r0,#1              ;702
0000de  b980              CBNZ     r0,|L12.258|
0000e0  8928              LDRH     r0,[r5,#8]            ;714
0000e2  2311              MOVS     r3,#0x11              ;714
0000e4  9000              STR      r0,[sp,#0]            ;714
0000e6  4649              MOV      r1,r9                 ;714
0000e8  4628              MOV      r0,r5                 ;714
0000ea  9a05              LDR      r2,[sp,#0x14]         ;714
0000ec  f7fffffe          BL       inet_chksum_pseudo
0000f0  4683              MOV      r11,r0                ;714
0000f2  f1bb0f00          CMP      r11,#0                ;718
0000f6  d101              BNE      |L12.252|
0000f8  f64f7bff          MOV      r11,#0xffff           ;719
                  |L12.252|
0000fc  f8a7b006          STRH     r11,[r7,#6]           ;721
000100  bf00              NOP                            ;722
                  |L12.258|
000102  bf00              NOP                            ;724
000104  bf00              NOP                            ;724
000106  bf00              NOP                            ;725
000108  bf00              NOP                            ;725
00010a  2111              MOVS     r1,#0x11              ;728
00010c  7a60              LDRB     r0,[r4,#9]            ;728
00010e  e88d0103          STM      sp,{r0,r1,r8}         ;728
000112  7aa3              LDRB     r3,[r4,#0xa]          ;728
000114  4649              MOV      r1,r9                 ;728
000116  4628              MOV      r0,r5                 ;728
000118  9a05              LDR      r2,[sp,#0x14]         ;728
00011a  f7fffffe          BL       ip_output_if
00011e  4682              MOV      r10,r0                ;728
000120  42b5              CMP      r5,r6                 ;735
000122  d003              BEQ      |L12.300|
000124  4628              MOV      r0,r5                 ;737
000126  f7fffffe          BL       pbuf_free
00012a  2500              MOVS     r5,#0                 ;738
                  |L12.300|
00012c  4650              MOV      r0,r10                ;743
00012e  e77e              B        |L12.46|
;;;745    
                          ENDP

                  |L12.304|
000130  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\udp.c",0
000134  5749505c
000138  6c776970
00013c  2d312e34
000140  2e315c73
000144  72635c63
000148  6f72655c
00014c  7564702e
000150  6300    
000152  00                DCB      0
000153  00                DCB      0
                  |L12.340|
000154  63686563          DCB      "check that first pbuf can hold struct udp_hdr",0
000158  6b207468
00015c  61742066
000160  69727374
000164  20706275
000168  66206361
00016c  6e20686f
000170  6c642073
000174  74727563
000178  74207564
00017c  705f6864
000180  7200    
000182  00                DCB      0
000183  00                DCB      0
                  |L12.388|
000184  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000188  7274696f
00018c  6e202225
000190  73222066
000194  61696c65
000198  64206174
00019c  206c696e
0001a0  65202564
0001a4  20696e20
0001a8  25730d0a
0001ac  00      
0001ad  00                DCB      0
0001ae  00                DCB      0
0001af  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  udp_port
000000  c000              DCW      0xc000
000002  0000              DCB      0x00,0x00
                  udp_pcbs
                          DCD      0x00000000
