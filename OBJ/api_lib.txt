; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\api_lib.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\api_lib.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\api_lib.crf ..\LWIP\lwip-1.4.1\src\api\api_lib.c]
                          THUMB

                          AREA ||i.netconn_accept||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  netconn_accept PROC
;;;276    err_t
;;;277    netconn_accept(struct netconn *conn, struct netconn **new_conn)
000000  b5f8              PUSH     {r3-r7,lr}
;;;278    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;279    #if LWIP_TCP
;;;280      struct netconn *newconn;
;;;281      err_t err;
;;;282    #if TCP_LISTEN_BACKLOG
;;;283      struct api_msg msg;
;;;284    #endif /* TCP_LISTEN_BACKLOG */
;;;285    
;;;286      LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
000006  bf00              NOP      
000008  2d00              CMP      r5,#0
00000a  d10b              BNE      |L1.36|
00000c  bf00              NOP      
00000e  a339              ADR      r3,|L1.244|
000010  f44f728f          MOV      r2,#0x11e
000014  a141              ADR      r1,|L1.284|
000016  a049              ADR      r0,|L1.316|
000018  f7fffffe          BL       __2printf
00001c  bf00              NOP      
00001e  f06f000d          MVN      r0,#0xd
                  |L1.34|
;;;287      *new_conn = NULL;
;;;288      LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
;;;289      LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
;;;290    
;;;291      err = conn->last_err;
;;;292      if (ERR_IS_FATAL(err)) {
;;;293        /* don't recv on fatal errors: this might block the application task
;;;294           waiting on acceptmbox forever! */
;;;295        return err;
;;;296      }
;;;297    
;;;298    #if LWIP_SO_RCVTIMEO
;;;299      if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
;;;300        NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
;;;301        return ERR_TIMEOUT;
;;;302      }
;;;303    #else
;;;304      sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
;;;305    #endif /* LWIP_SO_RCVTIMEO*/
;;;306      /* Register event with callback */
;;;307      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
;;;308    
;;;309      if (newconn == NULL) {
;;;310        /* connection has been aborted */
;;;311        NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
;;;312        return ERR_ABRT;
;;;313      }
;;;314    #if TCP_LISTEN_BACKLOG
;;;315      /* Let the stack know that we have accepted the connection. */
;;;316      msg.function = do_recv;
;;;317      msg.msg.conn = conn;
;;;318      /* don't care for the return value of do_recv */
;;;319      TCPIP_APIMSG(&msg);
;;;320    #endif /* TCP_LISTEN_BACKLOG */
;;;321    
;;;322      *new_conn = newconn;
;;;323      /* don't set conn->last_err: it's only ERR_OK, anyway */
;;;324      return ERR_OK;
;;;325    #else /* LWIP_TCP */
;;;326      LWIP_UNUSED_ARG(conn);
;;;327      LWIP_UNUSED_ARG(new_conn);
;;;328      return ERR_ARG;
;;;329    #endif /* LWIP_TCP */
;;;330    }
000022  bdf8              POP      {r3-r7,pc}
                  |L1.36|
000024  bf00              NOP                            ;286
000026  2000              MOVS     r0,#0                 ;287
000028  6028              STR      r0,[r5,#0]            ;287
00002a  bf00              NOP                            ;288
00002c  2c00              CMP      r4,#0                 ;288
00002e  d10b              BNE      |L1.72|
000030  bf00              NOP                            ;288
000032  a330              ADR      r3,|L1.244|
000034  f44f7290          MOV      r2,#0x120             ;288
000038  a14b              ADR      r1,|L1.360|
00003a  a040              ADR      r0,|L1.316|
00003c  f7fffffe          BL       __2printf
000040  bf00              NOP                            ;288
000042  f06f000d          MVN      r0,#0xd               ;288
000046  e7ec              B        |L1.34|
                  |L1.72|
000048  bf00              NOP                            ;288
00004a  bf00              NOP                            ;289
00004c  f1040014          ADD      r0,r4,#0x14           ;289
000050  f7fffffe          BL       sys_mbox_valid
000054  2800              CMP      r0,#0                 ;289
000056  d10b              BNE      |L1.112|
000058  bf00              NOP                            ;289
00005a  a326              ADR      r3,|L1.244|
00005c  f2401221          MOV      r2,#0x121             ;289
000060  a149              ADR      r1,|L1.392|
000062  a036              ADR      r0,|L1.316|
000064  f7fffffe          BL       __2printf
000068  bf00              NOP                            ;289
00006a  f06f000d          MVN      r0,#0xd               ;289
00006e  e7d8              B        |L1.34|
                  |L1.112|
000070  bf00              NOP                            ;289
000072  f9946008          LDRSB    r6,[r4,#8]            ;291
000076  f1160f09          CMN      r6,#9                 ;292
00007a  da01              BGE      |L1.128|
00007c  4630              MOV      r0,r6                 ;295
00007e  e7d0              B        |L1.34|
                  |L1.128|
000080  4669              MOV      r1,sp                 ;299
000082  f1040014          ADD      r0,r4,#0x14           ;299
000086  69e2              LDR      r2,[r4,#0x1c]         ;299
000088  f7fffffe          BL       sys_arch_mbox_fetch
00008c  1c40              ADDS     r0,r0,#1              ;299
00008e  b988              CBNZ     r0,|L1.180|
000090  bf00              NOP                            ;300
000092  f7fffffe          BL       sys_arch_protect
000096  4607              MOV      r7,r0                 ;300
000098  f9940008          LDRSB    r0,[r4,#8]            ;300
00009c  f1100f09          CMN      r0,#9                 ;300
0000a0  db01              BLT      |L1.166|
0000a2  20fd              MOVS     r0,#0xfd              ;300
0000a4  7220              STRB     r0,[r4,#8]            ;300
                  |L1.166|
0000a6  4638              MOV      r0,r7                 ;300
0000a8  f7fffffe          BL       sys_arch_unprotect
0000ac  bf00              NOP                            ;300
0000ae  f06f0002          MVN      r0,#2                 ;301
0000b2  e7b6              B        |L1.34|
                  |L1.180|
0000b4  6ae0              LDR      r0,[r4,#0x2c]         ;307
0000b6  b120              CBZ      r0,|L1.194|
0000b8  2200              MOVS     r2,#0                 ;307
0000ba  2101              MOVS     r1,#1                 ;307
0000bc  4620              MOV      r0,r4                 ;307
0000be  6ae3              LDR      r3,[r4,#0x2c]         ;307
0000c0  4798              BLX      r3                    ;307
                  |L1.194|
0000c2  9800              LDR      r0,[sp,#0]            ;309
0000c4  b988              CBNZ     r0,|L1.234|
0000c6  bf00              NOP                            ;311
0000c8  f7fffffe          BL       sys_arch_protect
0000cc  4607              MOV      r7,r0                 ;311
0000ce  f9940008          LDRSB    r0,[r4,#8]            ;311
0000d2  f1100f09          CMN      r0,#9                 ;311
0000d6  db01              BLT      |L1.220|
0000d8  20f6              MOVS     r0,#0xf6              ;311
0000da  7220              STRB     r0,[r4,#8]            ;311
                  |L1.220|
0000dc  4638              MOV      r0,r7                 ;311
0000de  f7fffffe          BL       sys_arch_unprotect
0000e2  bf00              NOP                            ;311
0000e4  f06f0009          MVN      r0,#9                 ;312
0000e8  e79b              B        |L1.34|
                  |L1.234|
0000ea  9800              LDR      r0,[sp,#0]            ;322
0000ec  6028              STR      r0,[r5,#0]            ;322
0000ee  2000              MOVS     r0,#0                 ;324
0000f0  e797              B        |L1.34|
;;;331    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L1.244|
0000f4  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
0000f8  5749505c
0000fc  6c776970
000100  2d312e34
000104  2e315c73
000108  72635c61
00010c  70695c61
000110  70695f6c
000114  69622e63
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L1.284|
00011c  6e657463          DCB      "netconn_accept: invalid pointer",0
000120  6f6e6e5f
000124  61636365
000128  70743a20
00012c  696e7661
000130  6c696420
000134  706f696e
000138  74657200
                  |L1.316|
00013c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000140  7274696f
000144  6e202225
000148  73222066
00014c  61696c65
000150  64206174
000154  206c696e
000158  65202564
00015c  20696e20
000160  25730d0a
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L1.360|
000168  6e657463          DCB      "netconn_accept: invalid conn",0
00016c  6f6e6e5f
000170  61636365
000174  70743a20
000178  696e7661
00017c  6c696420
000180  636f6e6e
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L1.392|
000188  6e657463          DCB      "netconn_accept: invalid acceptmbox",0
00018c  6f6e6e5f
000190  61636365
000194  70743a20
000198  696e7661
00019c  6c696420
0001a0  61636365
0001a4  70746d62
0001a8  6f7800  
0001ab  00                DCB      0

                          AREA ||i.netconn_bind||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_bind PROC
;;;165    err_t
;;;166    netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;167    {
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;168      struct api_msg msg;
;;;169      err_t err;
;;;170    
;;;171      LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
00000c  bf00              NOP      
00000e  2c00              CMP      r4,#0
000010  d10c              BNE      |L2.44|
000012  bf00              NOP      
000014  a313              ADR      r3,|L2.100|
000016  22ab              MOVS     r2,#0xab
000018  a11c              ADR      r1,|L2.140|
00001a  a023              ADR      r0,|L2.168|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
000022  f06f000d          MVN      r0,#0xd
                  |L2.38|
;;;172    
;;;173      msg.function = do_bind;
;;;174      msg.msg.conn = conn;
;;;175      msg.msg.msg.bc.ipaddr = addr;
;;;176      msg.msg.msg.bc.port = port;
;;;177      err = TCPIP_APIMSG(&msg);
;;;178    
;;;179      NETCONN_SET_SAFE_ERR(conn, err);
;;;180      return err;
;;;181    }
000026  b006              ADD      sp,sp,#0x18
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L2.44|
00002c  bf00              NOP                            ;171
00002e  4829              LDR      r0,|L2.212|
000030  9000              STR      r0,[sp,#0]            ;173
000032  9401              STR      r4,[sp,#4]            ;174
000034  9603              STR      r6,[sp,#0xc]          ;175
000036  f8ad7010          STRH     r7,[sp,#0x10]         ;176
00003a  4668              MOV      r0,sp                 ;177
00003c  f7fffffe          BL       tcpip_apimsg
000040  4605              MOV      r5,r0                 ;177
000042  bf00              NOP                            ;179
000044  f7fffffe          BL       sys_arch_protect
000048  4680              MOV      r8,r0                 ;179
00004a  f9940008          LDRSB    r0,[r4,#8]            ;179
00004e  f1100f09          CMN      r0,#9                 ;179
000052  db00              BLT      |L2.86|
000054  7225              STRB     r5,[r4,#8]            ;179
                  |L2.86|
000056  4640              MOV      r0,r8                 ;179
000058  f7fffffe          BL       sys_arch_unprotect
00005c  bf00              NOP                            ;179
00005e  4628              MOV      r0,r5                 ;180
000060  e7e1              B        |L2.38|
;;;182    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
000064  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000068  5749505c
00006c  6c776970
000070  2d312e34
000074  2e315c73
000078  72635c61
00007c  70695c61
000080  70695f6c
000084  69622e63
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L2.140|
00008c  6e657463          DCB      "netconn_bind: invalid conn",0
000090  6f6e6e5f
000094  62696e64
000098  3a20696e
00009c  76616c69
0000a0  6420636f
0000a4  6e6e00  
0000a7  00                DCB      0
                  |L2.168|
0000a8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000ac  7274696f
0000b0  6e202225
0000b4  73222066
0000b8  61696c65
0000bc  64206174
0000c0  206c696e
0000c4  65202564
0000c8  20696e20
0000cc  25730d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L2.212|
                          DCD      do_bind

                          AREA ||i.netconn_close||, CODE, READONLY, ALIGN=1

                  netconn_close PROC
;;;688    err_t
;;;689    netconn_close(struct netconn *conn)
000000  b510              PUSH     {r4,lr}
;;;690    {
000002  4604              MOV      r4,r0
;;;691      /* shutting down both ends is the same as closing */
;;;692      return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
000004  2103              MOVS     r1,#3
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       netconn_close_shutdown
;;;693    }
00000c  bd10              POP      {r4,pc}
;;;694    
                          ENDP


                          AREA ||i.netconn_close_shutdown||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_close_shutdown PROC
;;;662    static err_t
;;;663    netconn_close_shutdown(struct netconn *conn, u8_t how)
000000  b5f0              PUSH     {r4-r7,lr}
;;;664    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;665      struct api_msg msg;
;;;666      err_t err;
;;;667    
;;;668      LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
000008  bf00              NOP      
00000a  2c00              CMP      r4,#0
00000c  d10c              BNE      |L4.40|
00000e  bf00              NOP      
000010  a312              ADR      r3,|L4.92|
000012  f44f7227          MOV      r2,#0x29c
000016  a11b              ADR      r1,|L4.132|
000018  a021              ADR      r0,|L4.160|
00001a  f7fffffe          BL       __2printf
00001e  bf00              NOP      
000020  f06f000d          MVN      r0,#0xd
                  |L4.36|
;;;669    
;;;670      msg.function = do_close;
;;;671      msg.msg.conn = conn;
;;;672      /* shutting down both ends is the same as closing */
;;;673      msg.msg.msg.sd.shut = how;
;;;674      /* because of the LWIP_TCPIP_CORE_LOCKING implementation of do_close,
;;;675         don't use TCPIP_APIMSG here */
;;;676      err = tcpip_apimsg(&msg);
;;;677    
;;;678      NETCONN_SET_SAFE_ERR(conn, err);
;;;679      return err;
;;;680    }
000024  b007              ADD      sp,sp,#0x1c
000026  bdf0              POP      {r4-r7,pc}
                  |L4.40|
000028  bf00              NOP                            ;668
00002a  4828              LDR      r0,|L4.204|
00002c  9001              STR      r0,[sp,#4]            ;670
00002e  9402              STR      r4,[sp,#8]            ;671
000030  f88d6010          STRB     r6,[sp,#0x10]         ;673
000034  a801              ADD      r0,sp,#4              ;676
000036  f7fffffe          BL       tcpip_apimsg
00003a  4605              MOV      r5,r0                 ;676
00003c  bf00              NOP                            ;678
00003e  f7fffffe          BL       sys_arch_protect
000042  4607              MOV      r7,r0                 ;678
000044  f9940008          LDRSB    r0,[r4,#8]            ;678
000048  f1100f09          CMN      r0,#9                 ;678
00004c  db00              BLT      |L4.80|
00004e  7225              STRB     r5,[r4,#8]            ;678
                  |L4.80|
000050  4638              MOV      r0,r7                 ;678
000052  f7fffffe          BL       sys_arch_unprotect
000056  bf00              NOP                            ;678
000058  4628              MOV      r0,r5                 ;679
00005a  e7e3              B        |L4.36|
;;;681    
                          ENDP

                  |L4.92|
00005c  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000060  5749505c
000064  6c776970
000068  2d312e34
00006c  2e315c73
000070  72635c61
000074  70695c61
000078  70695f6c
00007c  69622e63
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L4.132|
000084  6e657463          DCB      "netconn_close: invalid conn",0
000088  6f6e6e5f
00008c  636c6f73
000090  653a2069
000094  6e76616c
000098  69642063
00009c  6f6e6e00
                  |L4.160|
0000a0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000a4  7274696f
0000a8  6e202225
0000ac  73222066
0000b0  61696c65
0000b4  64206174
0000b8  206c696e
0000bc  65202564
0000c0  20696e20
0000c4  25730d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L4.204|
                          DCD      do_close

                          AREA ||i.netconn_connect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_connect PROC
;;;191    err_t
;;;192    netconn_connect(struct netconn *conn, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;193    {
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;194      struct api_msg msg;
;;;195      err_t err;
;;;196    
;;;197      LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
00000c  bf00              NOP      
00000e  2c00              CMP      r4,#0
000010  d10c              BNE      |L5.44|
000012  bf00              NOP      
000014  a313              ADR      r3,|L5.100|
000016  22c5              MOVS     r2,#0xc5
000018  a11c              ADR      r1,|L5.140|
00001a  a024              ADR      r0,|L5.172|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
000022  f06f000d          MVN      r0,#0xd
                  |L5.38|
;;;198    
;;;199      msg.function = do_connect;
;;;200      msg.msg.conn = conn;
;;;201      msg.msg.msg.bc.ipaddr = addr;
;;;202      msg.msg.msg.bc.port = port;
;;;203      /* This is the only function which need to not block tcpip_thread */
;;;204      err = tcpip_apimsg(&msg);
;;;205    
;;;206      NETCONN_SET_SAFE_ERR(conn, err);
;;;207      return err;
;;;208    }
000026  b006              ADD      sp,sp,#0x18
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L5.44|
00002c  bf00              NOP                            ;197
00002e  482a              LDR      r0,|L5.216|
000030  9000              STR      r0,[sp,#0]            ;199
000032  9401              STR      r4,[sp,#4]            ;200
000034  9603              STR      r6,[sp,#0xc]          ;201
000036  f8ad7010          STRH     r7,[sp,#0x10]         ;202
00003a  4668              MOV      r0,sp                 ;204
00003c  f7fffffe          BL       tcpip_apimsg
000040  4605              MOV      r5,r0                 ;204
000042  bf00              NOP                            ;206
000044  f7fffffe          BL       sys_arch_protect
000048  4680              MOV      r8,r0                 ;206
00004a  f9940008          LDRSB    r0,[r4,#8]            ;206
00004e  f1100f09          CMN      r0,#9                 ;206
000052  db00              BLT      |L5.86|
000054  7225              STRB     r5,[r4,#8]            ;206
                  |L5.86|
000056  4640              MOV      r0,r8                 ;206
000058  f7fffffe          BL       sys_arch_unprotect
00005c  bf00              NOP                            ;206
00005e  4628              MOV      r0,r5                 ;207
000060  e7e1              B        |L5.38|
;;;209    
                          ENDP

000062  0000              DCW      0x0000
                  |L5.100|
000064  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000068  5749505c
00006c  6c776970
000070  2d312e34
000074  2e315c73
000078  72635c61
00007c  70695c61
000080  70695f6c
000084  69622e63
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L5.140|
00008c  6e657463          DCB      "netconn_connect: invalid conn",0
000090  6f6e6e5f
000094  636f6e6e
000098  6563743a
00009c  20696e76
0000a0  616c6964
0000a4  20636f6e
0000a8  6e00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L5.172|
0000ac  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000b0  7274696f
0000b4  6e202225
0000b8  73222066
0000bc  61696c65
0000c0  64206174
0000c4  206c696e
0000c8  65202564
0000cc  20696e20
0000d0  25730d0a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L5.216|
                          DCD      do_connect

                          AREA ||i.netconn_delete||, CODE, READONLY, ALIGN=2

                  netconn_delete PROC
;;;102    err_t
;;;103    netconn_delete(struct netconn *conn)
000000  b510              PUSH     {r4,lr}
;;;104    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;105      struct api_msg msg;
;;;106    
;;;107      /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
;;;108      if (conn == NULL) {
000006  b914              CBNZ     r4,|L6.14|
;;;109        return ERR_OK;
000008  2000              MOVS     r0,#0
                  |L6.10|
;;;110      }
;;;111    
;;;112      msg.function = do_delconn;
;;;113      msg.msg.conn = conn;
;;;114      tcpip_apimsg(&msg);
;;;115    
;;;116      netconn_free(conn);
;;;117    
;;;118      /* don't care for return value of do_delconn since it only calls void functions */
;;;119    
;;;120      return ERR_OK;
;;;121    }
00000a  b006              ADD      sp,sp,#0x18
00000c  bd10              POP      {r4,pc}
                  |L6.14|
00000e  4805              LDR      r0,|L6.36|
000010  9000              STR      r0,[sp,#0]            ;112
000012  9401              STR      r4,[sp,#4]            ;113
000014  4668              MOV      r0,sp                 ;114
000016  f7fffffe          BL       tcpip_apimsg
00001a  4620              MOV      r0,r4                 ;116
00001c  f7fffffe          BL       netconn_free
000020  2000              MOVS     r0,#0                 ;120
000022  e7f2              B        |L6.10|
;;;122    
                          ENDP

                  |L6.36|
                          DCD      do_delconn

                          AREA ||i.netconn_disconnect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_disconnect PROC
;;;216    err_t
;;;217    netconn_disconnect(struct netconn *conn)
000000  b570              PUSH     {r4-r6,lr}
;;;218    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;219      struct api_msg msg;
;;;220      err_t err;
;;;221    
;;;222      LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
000006  bf00              NOP      
000008  2c00              CMP      r4,#0
00000a  d10b              BNE      |L7.36|
00000c  bf00              NOP      
00000e  a311              ADR      r3,|L7.84|
000010  22de              MOVS     r2,#0xde
000012  a11a              ADR      r1,|L7.124|
000014  a022              ADR      r0,|L7.160|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
00001c  f06f000d          MVN      r0,#0xd
                  |L7.32|
;;;223    
;;;224      msg.function = do_disconnect;
;;;225      msg.msg.conn = conn;
;;;226      err = TCPIP_APIMSG(&msg);
;;;227    
;;;228      NETCONN_SET_SAFE_ERR(conn, err);
;;;229      return err;
;;;230    }
000020  b006              ADD      sp,sp,#0x18
000022  bd70              POP      {r4-r6,pc}
                  |L7.36|
000024  bf00              NOP                            ;222
000026  4829              LDR      r0,|L7.204|
000028  9000              STR      r0,[sp,#0]            ;224
00002a  9401              STR      r4,[sp,#4]            ;225
00002c  4668              MOV      r0,sp                 ;226
00002e  f7fffffe          BL       tcpip_apimsg
000032  4605              MOV      r5,r0                 ;226
000034  bf00              NOP                            ;228
000036  f7fffffe          BL       sys_arch_protect
00003a  4606              MOV      r6,r0                 ;228
00003c  f9940008          LDRSB    r0,[r4,#8]            ;228
000040  f1100f09          CMN      r0,#9                 ;228
000044  db00              BLT      |L7.72|
000046  7225              STRB     r5,[r4,#8]            ;228
                  |L7.72|
000048  4630              MOV      r0,r6                 ;228
00004a  f7fffffe          BL       sys_arch_unprotect
00004e  bf00              NOP                            ;228
000050  4628              MOV      r0,r5                 ;229
000052  e7e5              B        |L7.32|
;;;231    
                          ENDP

                  |L7.84|
000054  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000058  5749505c
00005c  6c776970
000060  2d312e34
000064  2e315c73
000068  72635c61
00006c  70695c61
000070  70695f6c
000074  69622e63
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L7.124|
00007c  6e657463          DCB      "netconn_disconnect: invalid conn",0
000080  6f6e6e5f
000084  64697363
000088  6f6e6e65
00008c  63743a20
000090  696e7661
000094  6c696420
000098  636f6e6e
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L7.160|
0000a0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000a4  7274696f
0000a8  6e202225
0000ac  73222066
0000b0  61696c65
0000b4  64206174
0000b8  206c696e
0000bc  65202564
0000c0  20696e20
0000c4  25730d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L7.204|
                          DCD      do_disconnect

                          AREA ||i.netconn_getaddr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  netconn_getaddr PROC
;;;134    err_t
;;;135    netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;136    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  4698              MOV      r8,r3
;;;137      struct api_msg msg;
;;;138      err_t err;
;;;139    
;;;140      LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
00000e  bf00              NOP      
000010  2c00              CMP      r4,#0
000012  d10c              BNE      |L8.46|
000014  bf00              NOP      
000016  a322              ADR      r3,|L8.160|
000018  228c              MOVS     r2,#0x8c
00001a  a12b              ADR      r1,|L8.200|
00001c  a032              ADR      r0,|L8.232|
00001e  f7fffffe          BL       __2printf
000022  bf00              NOP      
000024  f06f000d          MVN      r0,#0xd
                  |L8.40|
;;;141      LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
;;;142      LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
;;;143    
;;;144      msg.function = do_getaddr;
;;;145      msg.msg.conn = conn;
;;;146      msg.msg.msg.ad.ipaddr = addr;
;;;147      msg.msg.msg.ad.port = port;
;;;148      msg.msg.msg.ad.local = local;
;;;149      err = TCPIP_APIMSG(&msg);
;;;150    
;;;151      NETCONN_SET_SAFE_ERR(conn, err);
;;;152      return err;
;;;153    }
000028  b007              ADD      sp,sp,#0x1c
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L8.46|
00002e  bf00              NOP                            ;140
000030  bf00              NOP                            ;141
000032  2d00              CMP      r5,#0                 ;141
000034  d10a              BNE      |L8.76|
000036  bf00              NOP                            ;141
000038  a319              ADR      r3,|L8.160|
00003a  228d              MOVS     r2,#0x8d              ;141
00003c  a135              ADR      r1,|L8.276|
00003e  a02a              ADR      r0,|L8.232|
000040  f7fffffe          BL       __2printf
000044  bf00              NOP                            ;141
000046  f06f000d          MVN      r0,#0xd               ;141
00004a  e7ed              B        |L8.40|
                  |L8.76|
00004c  bf00              NOP                            ;141
00004e  bf00              NOP                            ;142
000050  b956              CBNZ     r6,|L8.104|
000052  bf00              NOP                            ;142
000054  a312              ADR      r3,|L8.160|
000056  228e              MOVS     r2,#0x8e              ;142
000058  a136              ADR      r1,|L8.308|
00005a  a023              ADR      r0,|L8.232|
00005c  f7fffffe          BL       __2printf
000060  bf00              NOP                            ;142
000062  f06f000d          MVN      r0,#0xd               ;142
000066  e7df              B        |L8.40|
                  |L8.104|
000068  bf00              NOP                            ;142
00006a  483a              LDR      r0,|L8.340|
00006c  9001              STR      r0,[sp,#4]            ;144
00006e  9402              STR      r4,[sp,#8]            ;145
000070  9504              STR      r5,[sp,#0x10]         ;146
000072  9605              STR      r6,[sp,#0x14]         ;147
000074  f88d8018          STRB     r8,[sp,#0x18]         ;148
000078  a801              ADD      r0,sp,#4              ;149
00007a  f7fffffe          BL       tcpip_apimsg
00007e  4607              MOV      r7,r0                 ;149
000080  bf00              NOP                            ;151
000082  f7fffffe          BL       sys_arch_protect
000086  4681              MOV      r9,r0                 ;151
000088  f9940008          LDRSB    r0,[r4,#8]            ;151
00008c  f1100f09          CMN      r0,#9                 ;151
000090  db00              BLT      |L8.148|
000092  7227              STRB     r7,[r4,#8]            ;151
                  |L8.148|
000094  4648              MOV      r0,r9                 ;151
000096  f7fffffe          BL       sys_arch_unprotect
00009a  bf00              NOP                            ;151
00009c  4638              MOV      r0,r7                 ;152
00009e  e7c3              B        |L8.40|
;;;154    
                          ENDP

                  |L8.160|
0000a0  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
0000a4  5749505c
0000a8  6c776970
0000ac  2d312e34
0000b0  2e315c73
0000b4  72635c61
0000b8  70695c61
0000bc  70695f6c
0000c0  69622e63
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L8.200|
0000c8  6e657463          DCB      "netconn_getaddr: invalid conn",0
0000cc  6f6e6e5f
0000d0  67657461
0000d4  6464723a
0000d8  20696e76
0000dc  616c6964
0000e0  20636f6e
0000e4  6e00    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L8.232|
0000e8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000ec  7274696f
0000f0  6e202225
0000f4  73222066
0000f8  61696c65
0000fc  64206174
000100  206c696e
000104  65202564
000108  20696e20
00010c  25730d0a
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L8.276|
000114  6e657463          DCB      "netconn_getaddr: invalid addr",0
000118  6f6e6e5f
00011c  67657461
000120  6464723a
000124  20696e76
000128  616c6964
00012c  20616464
000130  7200    
000132  00                DCB      0
000133  00                DCB      0
                  |L8.308|
000134  6e657463          DCB      "netconn_getaddr: invalid port",0
000138  6f6e6e5f
00013c  67657461
000140  6464723a
000144  20696e76
000148  616c6964
00014c  20706f72
000150  7400    
000152  00                DCB      0
000153  00                DCB      0
                  |L8.340|
                          DCD      do_getaddr

                          AREA ||i.netconn_listen_with_backlog||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_listen_with_backlog PROC
;;;240    err_t
;;;241    netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
000000  b5f0              PUSH     {r4-r7,lr}
;;;242    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;243    #if LWIP_TCP
;;;244      struct api_msg msg;
;;;245      err_t err;
;;;246    
;;;247      /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
;;;248      LWIP_UNUSED_ARG(backlog);
;;;249    
;;;250      LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
000008  bf00              NOP      
00000a  2c00              CMP      r4,#0
00000c  d10b              BNE      |L9.38|
00000e  bf00              NOP      
000010  a311              ADR      r3,|L9.88|
000012  22fa              MOVS     r2,#0xfa
000014  a11a              ADR      r1,|L9.128|
000016  a022              ADR      r0,|L9.160|
000018  f7fffffe          BL       __2printf
00001c  bf00              NOP      
00001e  f06f000d          MVN      r0,#0xd
                  |L9.34|
;;;251    
;;;252      msg.function = do_listen;
;;;253      msg.msg.conn = conn;
;;;254    #if TCP_LISTEN_BACKLOG
;;;255      msg.msg.msg.lb.backlog = backlog;
;;;256    #endif /* TCP_LISTEN_BACKLOG */
;;;257      err = TCPIP_APIMSG(&msg);
;;;258    
;;;259      NETCONN_SET_SAFE_ERR(conn, err);
;;;260      return err;
;;;261    #else /* LWIP_TCP */
;;;262      LWIP_UNUSED_ARG(conn);
;;;263      LWIP_UNUSED_ARG(backlog);
;;;264      return ERR_ARG;
;;;265    #endif /* LWIP_TCP */
;;;266    }
000022  b007              ADD      sp,sp,#0x1c
000024  bdf0              POP      {r4-r7,pc}
                  |L9.38|
000026  bf00              NOP                            ;250
000028  4828              LDR      r0,|L9.204|
00002a  9001              STR      r0,[sp,#4]            ;252
00002c  9402              STR      r4,[sp,#8]            ;253
00002e  a801              ADD      r0,sp,#4              ;257
000030  f7fffffe          BL       tcpip_apimsg
000034  4605              MOV      r5,r0                 ;257
000036  bf00              NOP                            ;259
000038  f7fffffe          BL       sys_arch_protect
00003c  4606              MOV      r6,r0                 ;259
00003e  f9940008          LDRSB    r0,[r4,#8]            ;259
000042  f1100f09          CMN      r0,#9                 ;259
000046  db00              BLT      |L9.74|
000048  7225              STRB     r5,[r4,#8]            ;259
                  |L9.74|
00004a  4630              MOV      r0,r6                 ;259
00004c  f7fffffe          BL       sys_arch_unprotect
000050  bf00              NOP                            ;259
000052  4628              MOV      r0,r5                 ;260
000054  e7e5              B        |L9.34|
;;;267    
                          ENDP

000056  0000              DCW      0x0000
                  |L9.88|
000058  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
00005c  5749505c
000060  6c776970
000064  2d312e34
000068  2e315c73
00006c  72635c61
000070  70695c61
000074  70695f6c
000078  69622e63
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L9.128|
000080  6e657463          DCB      "netconn_listen: invalid conn",0
000084  6f6e6e5f
000088  6c697374
00008c  656e3a20
000090  696e7661
000094  6c696420
000098  636f6e6e
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L9.160|
0000a0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000a4  7274696f
0000a8  6e202225
0000ac  73222066
0000b0  61696c65
0000b4  64206174
0000b8  206c696e
0000bc  65202564
0000c0  20696e20
0000c4  25730d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L9.204|
                          DCD      do_listen

                          AREA ||i.netconn_new_with_proto_and_callback||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  netconn_new_with_proto_and_callback PROC
;;;67     struct netconn*
;;;68     netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
000000  b5f0              PUSH     {r4-r7,lr}
;;;69     {
000002  b087              SUB      sp,sp,#0x1c
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;70       struct netconn *conn;
;;;71       struct api_msg msg;
;;;72     
;;;73       conn = netconn_alloc(t, callback);
00000a  4631              MOV      r1,r6
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       netconn_alloc
000012  4604              MOV      r4,r0
;;;74       if (conn != NULL) {
000014  2c00              CMP      r4,#0
000016  d052              BEQ      |L10.190|
;;;75         msg.function = do_newconn;
000018  482a              LDR      r0,|L10.196|
00001a  9001              STR      r0,[sp,#4]
;;;76         msg.msg.msg.n.proto = proto;
00001c  f88d5010          STRB     r5,[sp,#0x10]
;;;77         msg.msg.conn = conn;
000020  9402              STR      r4,[sp,#8]
;;;78         if (TCPIP_APIMSG(&msg) != ERR_OK) {
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       tcpip_apimsg
000028  2800              CMP      r0,#0
00002a  d048              BEQ      |L10.190|
;;;79           LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
00002c  bf00              NOP      
00002e  6860              LDR      r0,[r4,#4]
000030  2800              CMP      r0,#0
000032  d007              BEQ      |L10.68|
000034  bf00              NOP      
000036  a324              ADR      r3,|L10.200|
000038  224f              MOVS     r2,#0x4f
00003a  a12d              ADR      r1,|L10.240|
00003c  a035              ADR      r0,|L10.276|
00003e  f7fffffe          BL       __2printf
000042  bf00              NOP      
                  |L10.68|
000044  bf00              NOP      
;;;80           LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
000046  bf00              NOP      
000048  f104000c          ADD      r0,r4,#0xc
00004c  f7fffffe          BL       sys_sem_valid
000050  b938              CBNZ     r0,|L10.98|
000052  bf00              NOP      
000054  a31c              ADR      r3,|L10.200|
000056  2250              MOVS     r2,#0x50
000058  a139              ADR      r1,|L10.320|
00005a  a02e              ADR      r0,|L10.276|
00005c  f7fffffe          BL       __2printf
000060  bf00              NOP      
                  |L10.98|
000062  bf00              NOP      
;;;81           LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
000064  bf00              NOP      
000066  f1040010          ADD      r0,r4,#0x10
00006a  f7fffffe          BL       sys_mbox_valid
00006e  b938              CBNZ     r0,|L10.128|
000070  bf00              NOP      
000072  a315              ADR      r3,|L10.200|
000074  2251              MOVS     r2,#0x51
000076  a139              ADR      r1,|L10.348|
000078  a026              ADR      r0,|L10.276|
00007a  f7fffffe          BL       __2printf
00007e  bf00              NOP      
                  |L10.128|
000080  bf00              NOP      
;;;82     #if LWIP_TCP
;;;83           LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
000082  bf00              NOP      
000084  f1040014          ADD      r0,r4,#0x14
000088  f7fffffe          BL       sys_mbox_valid
00008c  b138              CBZ      r0,|L10.158|
00008e  bf00              NOP      
000090  a30d              ADR      r3,|L10.200|
000092  2253              MOVS     r2,#0x53
000094  a137              ADR      r1,|L10.372|
000096  a01f              ADR      r0,|L10.276|
000098  f7fffffe          BL       __2printf
00009c  bf00              NOP      
                  |L10.158|
00009e  bf00              NOP      
;;;84     #endif /* LWIP_TCP */
;;;85           sys_sem_free(&conn->op_completed);
0000a0  f104000c          ADD      r0,r4,#0xc
0000a4  f7fffffe          BL       sys_sem_free
;;;86           sys_mbox_free(&conn->recvmbox);
0000a8  f1040010          ADD      r0,r4,#0x10
0000ac  f7fffffe          BL       sys_mbox_free
;;;87           memp_free(MEMP_NETCONN, conn);
0000b0  4621              MOV      r1,r4
0000b2  2008              MOVS     r0,#8
0000b4  f7fffffe          BL       memp_free
;;;88           return NULL;
0000b8  2000              MOVS     r0,#0
                  |L10.186|
;;;89         }
;;;90       }
;;;91       return conn;
;;;92     }
0000ba  b007              ADD      sp,sp,#0x1c
0000bc  bdf0              POP      {r4-r7,pc}
                  |L10.190|
0000be  4620              MOV      r0,r4                 ;91
0000c0  e7fb              B        |L10.186|
;;;93     
                          ENDP

0000c2  0000              DCW      0x0000
                  |L10.196|
                          DCD      do_newconn
                  |L10.200|
0000c8  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
0000cc  5749505c
0000d0  6c776970
0000d4  2d312e34
0000d8  2e315c73
0000dc  72635c61
0000e0  70695c61
0000e4  70695f6c
0000e8  69622e63
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L10.240|
0000f0  66726565          DCB      "freeing conn without freeing pcb",0
0000f4  696e6720
0000f8  636f6e6e
0000fc  20776974
000100  686f7574
000104  20667265
000108  65696e67
00010c  20706362
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L10.276|
000114  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000118  7274696f
00011c  6e202225
000120  73222066
000124  61696c65
000128  64206174
00012c  206c696e
000130  65202564
000134  20696e20
000138  25730d0a
00013c  00      
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
                  |L10.320|
000140  636f6e6e          DCB      "conn has no op_completed",0
000144  20686173
000148  206e6f20
00014c  6f705f63
000150  6f6d706c
000154  65746564
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L10.348|
00015c  636f6e6e          DCB      "conn has no recvmbox",0
000160  20686173
000164  206e6f20
000168  72656376
00016c  6d626f78
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L10.372|
000174  636f6e6e          DCB      "conn->acceptmbox shouldn't exist",0
000178  2d3e6163
00017c  63657074
000180  6d626f78
000184  2073686f
000188  756c646e
00018c  27742065
000190  78697374
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||i.netconn_recv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  netconn_recv PROC
;;;453    err_t
;;;454    netconn_recv(struct netconn *conn, struct netbuf **new_buf)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;455    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;456    #if LWIP_TCP
;;;457      struct netbuf *buf = NULL;
000008  2400              MOVS     r4,#0
;;;458      err_t err;
;;;459    #endif /* LWIP_TCP */
;;;460    
;;;461      LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
00000a  bf00              NOP      
00000c  2e00              CMP      r6,#0
00000e  d10c              BNE      |L11.42|
000010  bf00              NOP      
000012  a33b              ADR      r3,|L11.256|
000014  f24012cd          MOV      r2,#0x1cd
000018  a143              ADR      r1,|L11.296|
00001a  a04b              ADR      r0,|L11.328|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
000022  f06f000d          MVN      r0,#0xd
                  |L11.38|
;;;462      *new_buf = NULL;
;;;463      LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
;;;464      LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
;;;465    
;;;466    #if LWIP_TCP
;;;467    #if (LWIP_UDP || LWIP_RAW)
;;;468      if (conn->type == NETCONN_TCP)
;;;469    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;470      {
;;;471        struct pbuf *p = NULL;
;;;472        /* This is not a listening netconn, since recvmbox is set */
;;;473    
;;;474        buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
;;;475        if (buf == NULL) {
;;;476          NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
;;;477          return ERR_MEM;
;;;478        }
;;;479    
;;;480        err = netconn_recv_data(conn, (void **)&p);
;;;481        if (err != ERR_OK) {
;;;482          memp_free(MEMP_NETBUF, buf);
;;;483          return err;
;;;484        }
;;;485        LWIP_ASSERT("p != NULL", p != NULL);
;;;486    
;;;487        buf->p = p;
;;;488        buf->ptr = p;
;;;489        buf->port = 0;
;;;490        ip_addr_set_any(&buf->addr);
;;;491        *new_buf = buf;
;;;492        /* don't set conn->last_err: it's only ERR_OK, anyway */
;;;493        return ERR_OK;
;;;494      }
;;;495    #endif /* LWIP_TCP */
;;;496    #if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
;;;497      else
;;;498    #endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
;;;499      {
;;;500    #if (LWIP_UDP || LWIP_RAW)
;;;501        return netconn_recv_data(conn, (void **)new_buf);
;;;502    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;503      }
;;;504    }
000026  e8bd83f8          POP      {r3-r9,pc}
                  |L11.42|
00002a  bf00              NOP                            ;461
00002c  2000              MOVS     r0,#0                 ;462
00002e  6030              STR      r0,[r6,#0]            ;462
000030  bf00              NOP                            ;463
000032  2d00              CMP      r5,#0                 ;463
000034  d10b              BNE      |L11.78|
000036  bf00              NOP                            ;463
000038  a331              ADR      r3,|L11.256|
00003a  f24012cf          MOV      r2,#0x1cf             ;463
00003e  a14d              ADR      r1,|L11.372|
000040  a041              ADR      r0,|L11.328|
000042  f7fffffe          BL       __2printf
000046  bf00              NOP                            ;463
000048  f06f000d          MVN      r0,#0xd               ;463
00004c  e7eb              B        |L11.38|
                  |L11.78|
00004e  bf00              NOP                            ;463
000050  bf00              NOP                            ;464
000052  f1050010          ADD      r0,r5,#0x10           ;464
000056  f7fffffe          BL       sys_mbox_valid
00005a  2800              CMP      r0,#0                 ;464
00005c  d10b              BNE      |L11.118|
00005e  bf00              NOP                            ;464
000060  a327              ADR      r3,|L11.256|
000062  f44f72e8          MOV      r2,#0x1d0             ;464
000066  a14a              ADR      r1,|L11.400|
000068  a037              ADR      r0,|L11.328|
00006a  f7fffffe          BL       __2printf
00006e  bf00              NOP                            ;464
000070  f06f000c          MVN      r0,#0xc               ;464
000074  e7d7              B        |L11.38|
                  |L11.118|
000076  bf00              NOP                            ;464
000078  7828              LDRB     r0,[r5,#0]            ;468
00007a  2810              CMP      r0,#0x10              ;468
00007c  d13a              BNE      |L11.244|
00007e  2000              MOVS     r0,#0                 ;471
000080  9000              STR      r0,[sp,#0]            ;471
000082  2007              MOVS     r0,#7                 ;474
000084  f7fffffe          BL       memp_malloc
000088  4604              MOV      r4,r0                 ;474
00008a  b98c              CBNZ     r4,|L11.176|
00008c  bf00              NOP                            ;476
00008e  f7fffffe          BL       sys_arch_protect
000092  4680              MOV      r8,r0                 ;476
000094  f9950008          LDRSB    r0,[r5,#8]            ;476
000098  f1100f09          CMN      r0,#9                 ;476
00009c  db01              BLT      |L11.162|
00009e  20ff              MOVS     r0,#0xff              ;476
0000a0  7228              STRB     r0,[r5,#8]            ;476
                  |L11.162|
0000a2  4640              MOV      r0,r8                 ;476
0000a4  f7fffffe          BL       sys_arch_unprotect
0000a8  bf00              NOP                            ;476
0000aa  f04f30ff          MOV      r0,#0xffffffff        ;477
0000ae  e7ba              B        |L11.38|
                  |L11.176|
0000b0  4669              MOV      r1,sp                 ;480
0000b2  4628              MOV      r0,r5                 ;480
0000b4  f7fffffe          BL       netconn_recv_data
0000b8  4607              MOV      r7,r0                 ;480
0000ba  b12f              CBZ      r7,|L11.200|
0000bc  4621              MOV      r1,r4                 ;482
0000be  2007              MOVS     r0,#7                 ;482
0000c0  f7fffffe          BL       memp_free
0000c4  4638              MOV      r0,r7                 ;483
0000c6  e7ae              B        |L11.38|
                  |L11.200|
0000c8  bf00              NOP                            ;485
0000ca  9800              LDR      r0,[sp,#0]            ;485
0000cc  b940              CBNZ     r0,|L11.224|
0000ce  bf00              NOP                            ;485
0000d0  a30b              ADR      r3,|L11.256|
0000d2  f24012e5          MOV      r2,#0x1e5             ;485
0000d6  a137              ADR      r1,|L11.436|
0000d8  a01b              ADR      r0,|L11.328|
0000da  f7fffffe          BL       __2printf
0000de  bf00              NOP                            ;485
                  |L11.224|
0000e0  bf00              NOP                            ;485
0000e2  9800              LDR      r0,[sp,#0]            ;487
0000e4  6020              STR      r0,[r4,#0]            ;487
0000e6  9800              LDR      r0,[sp,#0]            ;488
0000e8  6060              STR      r0,[r4,#4]            ;488
0000ea  2000              MOVS     r0,#0                 ;489
0000ec  81a0              STRH     r0,[r4,#0xc]          ;489
0000ee  60a0              STR      r0,[r4,#8]            ;490
0000f0  6034              STR      r4,[r6,#0]            ;491
0000f2  e798              B        |L11.38|
                  |L11.244|
0000f4  4631              MOV      r1,r6                 ;501
0000f6  4628              MOV      r0,r5                 ;501
0000f8  f7fffffe          BL       netconn_recv_data
0000fc  e793              B        |L11.38|
;;;505    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L11.256|
000100  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000104  5749505c
000108  6c776970
00010c  2d312e34
000110  2e315c73
000114  72635c61
000118  70695c61
00011c  70695f6c
000120  69622e63
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L11.296|
000128  6e657463          DCB      "netconn_recv: invalid pointer",0
00012c  6f6e6e5f
000130  72656376
000134  3a20696e
000138  76616c69
00013c  6420706f
000140  696e7465
000144  7200    
000146  00                DCB      0
000147  00                DCB      0
                  |L11.328|
000148  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
00014c  7274696f
000150  6e202225
000154  73222066
000158  61696c65
00015c  64206174
000160  206c696e
000164  65202564
000168  20696e20
00016c  25730d0a
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L11.372|
000174  6e657463          DCB      "netconn_recv: invalid conn",0
000178  6f6e6e5f
00017c  72656376
000180  3a20696e
000184  76616c69
000188  6420636f
00018c  6e6e00  
00018f  00                DCB      0
                  |L11.400|
000190  6e657463          DCB      "netconn_accept: invalid recvmbox",0
000194  6f6e6e5f
000198  61636365
00019c  70743a20
0001a0  696e7661
0001a4  6c696420
0001a8  72656376
0001ac  6d626f78
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L11.436|
0001b4  7020213d          DCB      "p != NULL",0
0001b8  204e554c
0001bc  4c00    
0001be  00                DCB      0
0001bf  00                DCB      0

                          AREA ||i.netconn_recv_data||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  netconn_recv_data PROC
;;;341    static err_t
;;;342    netconn_recv_data(struct netconn *conn, void **new_buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;343    {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;344      void *buf = NULL;
00000a  2000              MOVS     r0,#0
00000c  9007              STR      r0,[sp,#0x1c]
;;;345      u16_t len;
;;;346      err_t err;
;;;347    #if LWIP_TCP
;;;348      struct api_msg msg;
;;;349    #endif /* LWIP_TCP */
;;;350    
;;;351      LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
00000e  bf00              NOP      
000010  2d00              CMP      r5,#0
000012  d10d              BNE      |L12.48|
000014  bf00              NOP      
000016  a354              ADR      r3,|L12.360|
000018  f240125f          MOV      r2,#0x15f
00001c  a15c              ADR      r1,|L12.400|
00001e  a064              ADR      r0,|L12.432|
000020  f7fffffe          BL       __2printf
000024  bf00              NOP      
000026  f06f000d          MVN      r0,#0xd
                  |L12.42|
;;;352      *new_buf = NULL;
;;;353      LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
;;;354      LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
;;;355    
;;;356      err = conn->last_err;
;;;357      if (ERR_IS_FATAL(err)) {
;;;358        /* don't recv on fatal errors: this might block the application task
;;;359           waiting on recvmbox forever! */
;;;360        /* @todo: this does not allow us to fetch data that has been put into recvmbox
;;;361           before the fatal error occurred - is that a problem? */
;;;362        return err;
;;;363      }
;;;364    
;;;365    #if LWIP_SO_RCVTIMEO
;;;366      if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
;;;367        NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
;;;368        return ERR_TIMEOUT;
;;;369      }
;;;370    #else
;;;371      sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
;;;372    #endif /* LWIP_SO_RCVTIMEO*/
;;;373    
;;;374    #if LWIP_TCP
;;;375    #if (LWIP_UDP || LWIP_RAW)
;;;376      if (conn->type == NETCONN_TCP)
;;;377    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;378      {
;;;379        if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
;;;380          /* Let the stack know that we have taken the data. */
;;;381          /* TODO: Speedup: Don't block and wait for the answer here
;;;382             (to prevent multiple thread-switches). */
;;;383          msg.function = do_recv;
;;;384          msg.msg.conn = conn;
;;;385          if (buf != NULL) {
;;;386            msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
;;;387          } else {
;;;388            msg.msg.msg.r.len = 1;
;;;389          }
;;;390          /* don't care for the return value of do_recv */
;;;391          TCPIP_APIMSG(&msg);
;;;392        }
;;;393    
;;;394        /* If we are closed, we indicate that we no longer wish to use the socket */
;;;395        if (buf == NULL) {
;;;396          API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
;;;397          /* Avoid to lose any previous error code */
;;;398          NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
;;;399          return ERR_CLSD;
;;;400        }
;;;401        len = ((struct pbuf *)buf)->tot_len;
;;;402      }
;;;403    #endif /* LWIP_TCP */
;;;404    #if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
;;;405      else
;;;406    #endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
;;;407    #if (LWIP_UDP || LWIP_RAW)
;;;408      {
;;;409        LWIP_ASSERT("buf != NULL", buf != NULL);
;;;410        len = netbuf_len((struct netbuf *)buf);
;;;411      }
;;;412    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;413    
;;;414    #if LWIP_SO_RCVBUF
;;;415      SYS_ARCH_DEC(conn->recv_avail, len);
;;;416    #endif /* LWIP_SO_RCVBUF */
;;;417      /* Register event with callback */
;;;418      API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
;;;419    
;;;420      LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));
;;;421    
;;;422      *new_buf = buf;
;;;423      /* don't set conn->last_err: it's only ERR_OK, anyway */
;;;424      return ERR_OK;
;;;425    }
00002a  b008              ADD      sp,sp,#0x20
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L12.48|
000030  bf00              NOP                            ;351
000032  2000              MOVS     r0,#0                 ;352
000034  6028              STR      r0,[r5,#0]            ;352
000036  bf00              NOP                            ;353
000038  2c00              CMP      r4,#0                 ;353
00003a  d10b              BNE      |L12.84|
00003c  bf00              NOP                            ;353
00003e  a34a              ADR      r3,|L12.360|
000040  f2401261          MOV      r2,#0x161             ;353
000044  a165              ADR      r1,|L12.476|
000046  a05a              ADR      r0,|L12.432|
000048  f7fffffe          BL       __2printf
00004c  bf00              NOP                            ;353
00004e  f06f000d          MVN      r0,#0xd               ;353
000052  e7ea              B        |L12.42|
                  |L12.84|
000054  bf00              NOP                            ;353
000056  bf00              NOP                            ;354
000058  f1040010          ADD      r0,r4,#0x10           ;354
00005c  f7fffffe          BL       sys_mbox_valid
000060  2800              CMP      r0,#0                 ;354
000062  d10b              BNE      |L12.124|
000064  bf00              NOP                            ;354
000066  a340              ADR      r3,|L12.360|
000068  f44f72b1          MOV      r2,#0x162             ;354
00006c  a162              ADR      r1,|L12.504|
00006e  a050              ADR      r0,|L12.432|
000070  f7fffffe          BL       __2printf
000074  bf00              NOP                            ;354
000076  f06f000c          MVN      r0,#0xc               ;354
00007a  e7d6              B        |L12.42|
                  |L12.124|
00007c  bf00              NOP                            ;354
00007e  f9947008          LDRSB    r7,[r4,#8]            ;356
000082  f1170f09          CMN      r7,#9                 ;357
000086  da01              BGE      |L12.140|
000088  4638              MOV      r0,r7                 ;362
00008a  e7ce              B        |L12.42|
                  |L12.140|
00008c  a907              ADD      r1,sp,#0x1c           ;366
00008e  f1040010          ADD      r0,r4,#0x10           ;366
000092  69e2              LDR      r2,[r4,#0x1c]         ;366
000094  f7fffffe          BL       sys_arch_mbox_fetch
000098  1c40              ADDS     r0,r0,#1              ;366
00009a  b988              CBNZ     r0,|L12.192|
00009c  bf00              NOP                            ;367
00009e  f7fffffe          BL       sys_arch_protect
0000a2  4680              MOV      r8,r0                 ;367
0000a4  f9940008          LDRSB    r0,[r4,#8]            ;367
0000a8  f1100f09          CMN      r0,#9                 ;367
0000ac  db01              BLT      |L12.178|
0000ae  20fd              MOVS     r0,#0xfd              ;367
0000b0  7220              STRB     r0,[r4,#8]            ;367
                  |L12.178|
0000b2  4640              MOV      r0,r8                 ;367
0000b4  f7fffffe          BL       sys_arch_unprotect
0000b8  bf00              NOP                            ;367
0000ba  f06f0002          MVN      r0,#2                 ;368
0000be  e7b4              B        |L12.42|
                  |L12.192|
0000c0  7820              LDRB     r0,[r4,#0]            ;376
0000c2  2810              CMP      r0,#0x10              ;376
0000c4  d132              BNE      |L12.300|
0000c6  f8940020          LDRB     r0,[r4,#0x20]         ;379
0000ca  f0000008          AND      r0,r0,#8              ;379
0000ce  b108              CBZ      r0,|L12.212|
0000d0  9807              LDR      r0,[sp,#0x1c]         ;379
0000d2  b968              CBNZ     r0,|L12.240|
                  |L12.212|
0000d4  4851              LDR      r0,|L12.540|
0000d6  9001              STR      r0,[sp,#4]            ;383
0000d8  9402              STR      r4,[sp,#8]            ;384
0000da  9807              LDR      r0,[sp,#0x1c]         ;385
0000dc  b118              CBZ      r0,|L12.230|
0000de  9807              LDR      r0,[sp,#0x1c]         ;386
0000e0  8901              LDRH     r1,[r0,#8]            ;386
0000e2  9104              STR      r1,[sp,#0x10]         ;386
0000e4  e001              B        |L12.234|
                  |L12.230|
0000e6  2101              MOVS     r1,#1                 ;388
0000e8  9104              STR      r1,[sp,#0x10]         ;388
                  |L12.234|
0000ea  a801              ADD      r0,sp,#4              ;391
0000ec  f7fffffe          BL       tcpip_apimsg
                  |L12.240|
0000f0  9807              LDR      r0,[sp,#0x1c]         ;395
0000f2  b9c0              CBNZ     r0,|L12.294|
0000f4  6ae0              LDR      r0,[r4,#0x2c]         ;396
0000f6  b120              CBZ      r0,|L12.258|
0000f8  2200              MOVS     r2,#0                 ;396
0000fa  2101              MOVS     r1,#1                 ;396
0000fc  4620              MOV      r0,r4                 ;396
0000fe  6ae3              LDR      r3,[r4,#0x2c]         ;396
000100  4798              BLX      r3                    ;396
                  |L12.258|
000102  bf00              NOP                            ;398
000104  f7fffffe          BL       sys_arch_protect
000108  4680              MOV      r8,r0                 ;398
00010a  f9940008          LDRSB    r0,[r4,#8]            ;398
00010e  f1100f09          CMN      r0,#9                 ;398
000112  db01              BLT      |L12.280|
000114  20f4              MOVS     r0,#0xf4              ;398
000116  7220              STRB     r0,[r4,#8]            ;398
                  |L12.280|
000118  4640              MOV      r0,r8                 ;398
00011a  f7fffffe          BL       sys_arch_unprotect
00011e  bf00              NOP                            ;398
000120  f06f000b          MVN      r0,#0xb               ;399
000124  e781              B        |L12.42|
                  |L12.294|
000126  9807              LDR      r0,[sp,#0x1c]         ;401
000128  8906              LDRH     r6,[r0,#8]            ;401
00012a  e00f              B        |L12.332|
                  |L12.300|
00012c  bf00              NOP                            ;409
00012e  9807              LDR      r0,[sp,#0x1c]         ;409
000130  b940              CBNZ     r0,|L12.324|
000132  bf00              NOP                            ;409
000134  a30c              ADR      r3,|L12.360|
000136  f2401299          MOV      r2,#0x199             ;409
00013a  a139              ADR      r1,|L12.544|
00013c  a01c              ADR      r0,|L12.432|
00013e  f7fffffe          BL       __2printf
000142  bf00              NOP                            ;409
                  |L12.324|
000144  bf00              NOP                            ;409
000146  9807              LDR      r0,[sp,#0x1c]         ;410
000148  6800              LDR      r0,[r0,#0]            ;410
00014a  8906              LDRH     r6,[r0,#8]            ;410
                  |L12.332|
00014c  6ae0              LDR      r0,[r4,#0x2c]         ;418
00014e  b120              CBZ      r0,|L12.346|
000150  4632              MOV      r2,r6                 ;418
000152  2101              MOVS     r1,#1                 ;418
000154  4620              MOV      r0,r4                 ;418
000156  6ae3              LDR      r3,[r4,#0x2c]         ;418
000158  4798              BLX      r3                    ;418
                  |L12.346|
00015a  bf00              NOP                            ;420
00015c  bf00              NOP                            ;420
00015e  9807              LDR      r0,[sp,#0x1c]         ;422
000160  6028              STR      r0,[r5,#0]            ;422
000162  2000              MOVS     r0,#0                 ;424
000164  e761              B        |L12.42|
;;;426    
                          ENDP

000166  0000              DCW      0x0000
                  |L12.360|
000168  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
00016c  5749505c
000170  6c776970
000174  2d312e34
000178  2e315c73
00017c  72635c61
000180  70695c61
000184  70695f6c
000188  69622e63
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L12.400|
000190  6e657463          DCB      "netconn_recv: invalid pointer",0
000194  6f6e6e5f
000198  72656376
00019c  3a20696e
0001a0  76616c69
0001a4  6420706f
0001a8  696e7465
0001ac  7200    
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L12.432|
0001b0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0001b4  7274696f
0001b8  6e202225
0001bc  73222066
0001c0  61696c65
0001c4  64206174
0001c8  206c696e
0001cc  65202564
0001d0  20696e20
0001d4  25730d0a
0001d8  00      
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
                  |L12.476|
0001dc  6e657463          DCB      "netconn_recv: invalid conn",0
0001e0  6f6e6e5f
0001e4  72656376
0001e8  3a20696e
0001ec  76616c69
0001f0  6420636f
0001f4  6e6e00  
0001f7  00                DCB      0
                  |L12.504|
0001f8  6e657463          DCB      "netconn_accept: invalid recvmbox",0
0001fc  6f6e6e5f
000200  61636365
000204  70743a20
000208  696e7661
00020c  6c696420
000210  72656376
000214  6d626f78
000218  00      
000219  00                DCB      0
00021a  00                DCB      0
00021b  00                DCB      0
                  |L12.540|
                          DCD      do_recv
                  |L12.544|
000220  62756620          DCB      "buf != NULL",0
000224  213d204e
000228  554c4c00

                          AREA ||i.netconn_recv_tcp_pbuf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_recv_tcp_pbuf PROC
;;;436    err_t
;;;437    netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
000000  b570              PUSH     {r4-r6,lr}
;;;438    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;439      LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
000006  bf00              NOP      
000008  b114              CBZ      r4,|L13.16|
00000a  7820              LDRB     r0,[r4,#0]
00000c  2810              CMP      r0,#0x10
00000e  d00b              BEQ      |L13.40|
                  |L13.16|
000010  bf00              NOP      
000012  a308              ADR      r3,|L13.52|
000014  f24012b7          MOV      r2,#0x1b7
000018  a110              ADR      r1,|L13.92|
00001a  a017              ADR      r0,|L13.120|
00001c  f7fffffe          BL       __2printf
000020  bf00              NOP      
000022  f06f000d          MVN      r0,#0xd
                  |L13.38|
;;;440                 netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);
;;;441    
;;;442      return netconn_recv_data(conn, (void **)new_buf);
;;;443    }
000026  bd70              POP      {r4-r6,pc}
                  |L13.40|
000028  bf00              NOP                            ;439
00002a  4629              MOV      r1,r5                 ;442
00002c  4620              MOV      r0,r4                 ;442
00002e  f7fffffe          BL       netconn_recv_data
000032  e7f8              B        |L13.38|
;;;444    
                          ENDP

                  |L13.52|
000034  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000038  5749505c
00003c  6c776970
000040  2d312e34
000044  2e315c73
000048  72635c61
00004c  70695c61
000050  70695f6c
000054  69622e63
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L13.92|
00005c  6e657463          DCB      "netconn_recv: invalid conn",0
000060  6f6e6e5f
000064  72656376
000068  3a20696e
00006c  76616c69
000070  6420636f
000074  6e6e00  
000077  00                DCB      0
                  |L13.120|
000078  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
00007c  7274696f
000080  6e202225
000084  73222066
000088  61696c65
00008c  64206174
000090  206c696e
000094  65202564
000098  20696e20
00009c  25730d0a
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.netconn_recved||, CODE, READONLY, ALIGN=2

                  netconn_recved PROC
;;;516    void
;;;517    netconn_recved(struct netconn *conn, u32_t length)
000000  b530              PUSH     {r4,r5,lr}
;;;518    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;519    #if LWIP_TCP
;;;520      if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
000008  b17c              CBZ      r4,|L14.42|
00000a  7820              LDRB     r0,[r4,#0]
00000c  2810              CMP      r0,#0x10
00000e  d10c              BNE      |L14.42|
;;;521          (netconn_get_noautorecved(conn))) {
000010  f8940020          LDRB     r0,[r4,#0x20]
000014  f0000008          AND      r0,r0,#8
000018  b138              CBZ      r0,|L14.42|
;;;522        struct api_msg msg;
;;;523        /* Let the stack know that we have taken the data. */
;;;524        /* TODO: Speedup: Don't block and wait for the answer here
;;;525           (to prevent multiple thread-switches). */
;;;526        msg.function = do_recv;
00001a  4805              LDR      r0,|L14.48|
00001c  9001              STR      r0,[sp,#4]
;;;527        msg.msg.conn = conn;
00001e  9402              STR      r4,[sp,#8]
;;;528        msg.msg.msg.r.len = length;
000020  9504              STR      r5,[sp,#0x10]
;;;529        /* don't care for the return value of do_recv */
;;;530        TCPIP_APIMSG(&msg);
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       tcpip_apimsg
;;;531      }
000028  bf00              NOP      
                  |L14.42|
;;;532    #else /* LWIP_TCP */
;;;533      LWIP_UNUSED_ARG(conn);
;;;534      LWIP_UNUSED_ARG(length);
;;;535    #endif /* LWIP_TCP */
;;;536    }
00002a  b007              ADD      sp,sp,#0x1c
00002c  bd30              POP      {r4,r5,pc}
;;;537    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      do_recv

                          AREA ||i.netconn_send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netconn_send PROC
;;;566    err_t
;;;567    netconn_send(struct netconn *conn, struct netbuf *buf)
000000  b5f0              PUSH     {r4-r7,lr}
;;;568    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;569      struct api_msg msg;
;;;570      err_t err;
;;;571    
;;;572      LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
000008  bf00              NOP      
00000a  2c00              CMP      r4,#0
00000c  d10c              BNE      |L15.40|
00000e  bf00              NOP      
000010  a313              ADR      r3,|L15.96|
000012  f44f720f          MOV      r2,#0x23c
000016  a11c              ADR      r1,|L15.136|
000018  a022              ADR      r0,|L15.164|
00001a  f7fffffe          BL       __2printf
00001e  bf00              NOP      
000020  f06f000d          MVN      r0,#0xd
                  |L15.36|
;;;573    
;;;574      LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
;;;575      msg.function = do_send;
;;;576      msg.msg.conn = conn;
;;;577      msg.msg.msg.b = buf;
;;;578      err = TCPIP_APIMSG(&msg);
;;;579    
;;;580      NETCONN_SET_SAFE_ERR(conn, err);
;;;581      return err;
;;;582    }
000024  b007              ADD      sp,sp,#0x1c
000026  bdf0              POP      {r4-r7,pc}
                  |L15.40|
000028  bf00              NOP                            ;572
00002a  bf00              NOP                            ;574
00002c  bf00              NOP                            ;574
00002e  4828              LDR      r0,|L15.208|
000030  9001              STR      r0,[sp,#4]            ;575
000032  9402              STR      r4,[sp,#8]            ;576
000034  9604              STR      r6,[sp,#0x10]         ;577
000036  a801              ADD      r0,sp,#4              ;578
000038  f7fffffe          BL       tcpip_apimsg
00003c  4605              MOV      r5,r0                 ;578
00003e  bf00              NOP                            ;580
000040  f7fffffe          BL       sys_arch_protect
000044  4607              MOV      r7,r0                 ;580
000046  f9940008          LDRSB    r0,[r4,#8]            ;580
00004a  f1100f09          CMN      r0,#9                 ;580
00004e  db00              BLT      |L15.82|
000050  7225              STRB     r5,[r4,#8]            ;580
                  |L15.82|
000052  4638              MOV      r0,r7                 ;580
000054  f7fffffe          BL       sys_arch_unprotect
000058  bf00              NOP                            ;580
00005a  4628              MOV      r0,r5                 ;581
00005c  e7e2              B        |L15.36|
;;;583    
                          ENDP

00005e  0000              DCW      0x0000
                  |L15.96|
000060  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
000064  5749505c
000068  6c776970
00006c  2d312e34
000070  2e315c73
000074  72635c61
000078  70695c61
00007c  70695f6c
000080  69622e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L15.136|
000088  6e657463          DCB      "netconn_send: invalid conn",0
00008c  6f6e6e5f
000090  73656e64
000094  3a20696e
000098  76616c69
00009c  6420636f
0000a0  6e6e00  
0000a3  00                DCB      0
                  |L15.164|
0000a4  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000a8  7274696f
0000ac  6e202225
0000b0  73222066
0000b4  61696c65
0000b8  64206174
0000bc  206c696e
0000c0  65202564
0000c4  20696e20
0000c8  25730d0a
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L15.208|
                          DCD      do_send

                          AREA ||i.netconn_sendto||, CODE, READONLY, ALIGN=1

                  netconn_sendto PROC
;;;548    err_t
;;;549    netconn_sendto(struct netconn *conn, struct netbuf *buf, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;550    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;551      if (buf != NULL) {
00000c  b15c              CBZ      r4,|L16.38|
;;;552        ip_addr_set(&buf->addr, addr);
00000e  b90d              CBNZ     r5,|L16.20|
000010  2000              MOVS     r0,#0
000012  e000              B        |L16.22|
                  |L16.20|
000014  6828              LDR      r0,[r5,#0]
                  |L16.22|
000016  60a0              STR      r0,[r4,#8]
;;;553        buf->port = port;
000018  81a6              STRH     r6,[r4,#0xc]
;;;554        return netconn_send(conn, buf);
00001a  4621              MOV      r1,r4
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       netconn_send
                  |L16.34|
;;;555      }
;;;556      return ERR_VAL;
;;;557    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L16.38|
000026  f06f0005          MVN      r0,#5                 ;556
00002a  e7fa              B        |L16.34|
;;;558    
                          ENDP


                          AREA ||i.netconn_shutdown||, CODE, READONLY, ALIGN=1

                  netconn_shutdown PROC
;;;701    err_t
;;;702    netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
000000  b570              PUSH     {r4-r6,lr}
;;;703    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;704      return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
000008  b10c              CBZ      r4,|L17.14|
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L17.16|
                  |L17.14|
00000e  2000              MOVS     r0,#0
                  |L17.16|
000010  b10d              CBZ      r5,|L17.22|
000012  2202              MOVS     r2,#2
000014  e000              B        |L17.24|
                  |L17.22|
000016  2200              MOVS     r2,#0
                  |L17.24|
000018  ea400102          ORR      r1,r0,r2
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       netconn_close_shutdown
;;;705    }
000022  bd70              POP      {r4-r6,pc}
;;;706    
                          ENDP


                          AREA ||i.netconn_write_partly||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  netconn_write_partly PROC
;;;597    err_t
;;;598    netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;599                         u8_t apiflags, size_t *bytes_written)
;;;600    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  4698              MOV      r8,r3
00000e  9e10              LDR      r6,[sp,#0x40]
;;;601      struct api_msg msg;
;;;602      err_t err;
;;;603      u8_t dontblock;
;;;604    
;;;605      LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
000010  bf00              NOP      
000012  2c00              CMP      r4,#0
000014  d10d              BNE      |L18.50|
000016  bf00              NOP      
000018  a32c              ADR      r3,|L18.204|
00001a  f240225d          MOV      r2,#0x25d
00001e  a135              ADR      r1,|L18.244|
000020  a03b              ADR      r0,|L18.272|
000022  f7fffffe          BL       __2printf
000026  bf00              NOP      
000028  f06f000d          MVN      r0,#0xd
                  |L18.44|
;;;606      LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
;;;607      if (size == 0) {
;;;608        return ERR_OK;
;;;609      }
;;;610      dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
;;;611      if (dontblock && !bytes_written) {
;;;612        /* This implies netconn_write() cannot be used for non-blocking send, since
;;;613           it has no way to return the number of bytes written. */
;;;614        return ERR_VAL;
;;;615      }
;;;616    
;;;617      /* non-blocking write sends as much  */
;;;618      msg.function = do_write;
;;;619      msg.msg.conn = conn;
;;;620      msg.msg.msg.w.dataptr = dataptr;
;;;621      msg.msg.msg.w.apiflags = apiflags;
;;;622      msg.msg.msg.w.len = size;
;;;623    #if LWIP_SO_SNDTIMEO
;;;624      if (conn->send_timeout != 0) {
;;;625        /* get the time we started, which is later compared to
;;;626            sys_now() + conn->send_timeout */
;;;627        msg.msg.msg.w.time_started = sys_now();
;;;628      } else {
;;;629        msg.msg.msg.w.time_started = 0;
;;;630      }
;;;631    #endif /* LWIP_SO_SNDTIMEO */
;;;632    
;;;633      /* For locking the core: this _can_ be delayed on low memory/low send buffer,
;;;634         but if it is, this is done inside api_msg.c:do_write(), so we can use the
;;;635         non-blocking version here. */
;;;636      err = TCPIP_APIMSG(&msg);
;;;637      if ((err == ERR_OK) && (bytes_written != NULL)) {
;;;638        if (dontblock
;;;639    #if LWIP_SO_SNDTIMEO
;;;640            || (conn->send_timeout != 0)
;;;641    #endif /* LWIP_SO_SNDTIMEO */
;;;642           ) {
;;;643          /* nonblocking write: maybe the data has been sent partly */
;;;644          *bytes_written = msg.msg.msg.w.len;
;;;645        } else {
;;;646          /* blocking call succeeded: all data has been sent if it */
;;;647          *bytes_written = size;
;;;648        }
;;;649      }
;;;650    
;;;651      NETCONN_SET_SAFE_ERR(conn, err);
;;;652      return err;
;;;653    }
00002c  b007              ADD      sp,sp,#0x1c
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.50|
000032  bf00              NOP                            ;605
000034  bf00              NOP                            ;606
000036  7820              LDRB     r0,[r4,#0]            ;606
000038  2810              CMP      r0,#0x10              ;606
00003a  d00b              BEQ      |L18.84|
00003c  bf00              NOP                            ;606
00003e  a323              ADR      r3,|L18.204|
000040  f240225e          MOV      r2,#0x25e             ;606
000044  a13d              ADR      r1,|L18.316|
000046  a032              ADR      r0,|L18.272|
000048  f7fffffe          BL       __2printf
00004c  bf00              NOP                            ;606
00004e  f06f0005          MVN      r0,#5                 ;606
000052  e7eb              B        |L18.44|
                  |L18.84|
000054  bf00              NOP                            ;606
000056  b90d              CBNZ     r5,|L18.92|
000058  2000              MOVS     r0,#0                 ;608
00005a  e7e7              B        |L18.44|
                  |L18.92|
00005c  f8940020          LDRB     r0,[r4,#0x20]         ;610
000060  f0000002          AND      r0,r0,#2              ;610
000064  b910              CBNZ     r0,|L18.108|
000066  f0080004          AND      r0,r8,#4              ;610
00006a  b108              CBZ      r0,|L18.112|
                  |L18.108|
00006c  2001              MOVS     r0,#1                 ;610
00006e  e000              B        |L18.114|
                  |L18.112|
000070  2000              MOVS     r0,#0                 ;610
                  |L18.114|
000072  4682              MOV      r10,r0                ;610
000074  f1ba0f00          CMP      r10,#0                ;611
000078  d003              BEQ      |L18.130|
00007a  b916              CBNZ     r6,|L18.130|
00007c  f06f0005          MVN      r0,#5                 ;614
000080  e7d4              B        |L18.44|
                  |L18.130|
000082  4837              LDR      r0,|L18.352|
000084  9001              STR      r0,[sp,#4]            ;618
000086  9402              STR      r4,[sp,#8]            ;619
000088  f8cd9010          STR      r9,[sp,#0x10]         ;620
00008c  f88d8018          STRB     r8,[sp,#0x18]         ;621
000090  9505              STR      r5,[sp,#0x14]         ;622
000092  a801              ADD      r0,sp,#4              ;636
000094  f7fffffe          BL       tcpip_apimsg
000098  4607              MOV      r7,r0                 ;636
00009a  b93f              CBNZ     r7,|L18.172|
00009c  b136              CBZ      r6,|L18.172|
00009e  f1ba0f00          CMP      r10,#0                ;638
0000a2  d002              BEQ      |L18.170|
0000a4  9805              LDR      r0,[sp,#0x14]         ;644
0000a6  6030              STR      r0,[r6,#0]            ;644
0000a8  e000              B        |L18.172|
                  |L18.170|
0000aa  6035              STR      r5,[r6,#0]            ;647
                  |L18.172|
0000ac  bf00              NOP                            ;651
0000ae  f7fffffe          BL       sys_arch_protect
0000b2  4683              MOV      r11,r0                ;651
0000b4  f9940008          LDRSB    r0,[r4,#8]            ;651
0000b8  f1100f09          CMN      r0,#9                 ;651
0000bc  db00              BLT      |L18.192|
0000be  7227              STRB     r7,[r4,#8]            ;651
                  |L18.192|
0000c0  4658              MOV      r0,r11                ;651
0000c2  f7fffffe          BL       sys_arch_unprotect
0000c6  bf00              NOP                            ;651
0000c8  4638              MOV      r0,r7                 ;652
0000ca  e7af              B        |L18.44|
;;;654    
                          ENDP

                  |L18.204|
0000cc  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\api\\api_lib.c",0
0000d0  5749505c
0000d4  6c776970
0000d8  2d312e34
0000dc  2e315c73
0000e0  72635c61
0000e4  70695c61
0000e8  70695f6c
0000ec  69622e63
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L18.244|
0000f4  6e657463          DCB      "netconn_write: invalid conn",0
0000f8  6f6e6e5f
0000fc  77726974
000100  653a2069
000104  6e76616c
000108  69642063
00010c  6f6e6e00
                  |L18.272|
000110  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
000114  7274696f
000118  6e202225
00011c  73222066
000120  61696c65
000124  64206174
000128  206c696e
00012c  65202564
000130  20696e20
000134  25730d0a
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L18.316|
00013c  6e657463          DCB      "netconn_write: invalid conn->type",0
000140  6f6e6e5f
000144  77726974
000148  653a2069
00014c  6e76616c
000150  69642063
000154  6f6e6e2d
000158  3e747970
00015c  6500    
00015e  00                DCB      0
00015f  00                DCB      0
                  |L18.352|
                          DCD      do_write
