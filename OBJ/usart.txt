; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\usart.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\usart.crf ..\SYSTEM\usart\usart.c]
                          THUMB

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;131    
;;;132    void USART1_IRQHandler(void)                	//串口1中断服务程序
000000  b510              PUSH     {r4,lr}
;;;133    {
;;;134    	u8 Res;
;;;135    	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)
000002  f2405125          MOV      r1,#0x525
000006  481d              LDR      r0,|L1.124|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b310              CBZ      r0,|L1.84|
;;;136    	{
;;;137    		Res =USART_ReceiveData(USART1);	//读取接收到的数据
00000e  481b              LDR      r0,|L1.124|
000010  f7fffffe          BL       USART_ReceiveData
000014  b2c4              UXTB     r4,r0
;;;138    		
;;;139    		if((USART_RX_STA&0x8000)==0)//接收未完成
000016  481a              LDR      r0,|L1.128|
000018  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00001a  f4004000          AND      r0,r0,#0x8000
00001e  b9c8              CBNZ     r0,|L1.84|
;;;140    			{
;;;141    			if(USART_RX_STA&0x4000)//接收到了0x0d
000020  4817              LDR      r0,|L1.128|
000022  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000024  f4004080          AND      r0,r0,#0x4000
000028  b160              CBZ      r0,|L1.68|
;;;142    				{
;;;143    				if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始
00002a  2c0a              CMP      r4,#0xa
00002c  d003              BEQ      |L1.54|
00002e  2000              MOVS     r0,#0
000030  4913              LDR      r1,|L1.128|
000032  8008              STRH     r0,[r1,#0]
000034  e020              B        |L1.120|
                  |L1.54|
;;;144    				else USART_RX_STA|=0x8000;	//接收完成了 
000036  4812              LDR      r0,|L1.128|
000038  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00003a  f4404000          ORR      r0,r0,#0x8000
00003e  4910              LDR      r1,|L1.128|
000040  8008              STRH     r0,[r1,#0]
000042  e019              B        |L1.120|
                  |L1.68|
;;;145    				}
;;;146    			else //还没收到0X0D
;;;147    				{	
;;;148    				if(Res==0x0d)USART_RX_STA|=0x4000;
000044  2c0d              CMP      r4,#0xd
000046  d106              BNE      |L1.86|
000048  480d              LDR      r0,|L1.128|
00004a  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00004c  f4404080          ORR      r0,r0,#0x4000
000050  490b              LDR      r1,|L1.128|
000052  8008              STRH     r0,[r1,#0]
                  |L1.84|
000054  e010              B        |L1.120|
                  |L1.86|
;;;149    				else
;;;150    					{
;;;151    					USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;
000056  480a              LDR      r0,|L1.128|
000058  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00005a  f3c0000d          UBFX     r0,r0,#0,#14
00005e  4909              LDR      r1,|L1.132|
000060  540c              STRB     r4,[r1,r0]
;;;152    					USART_RX_STA++;
000062  4807              LDR      r0,|L1.128|
000064  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000066  1c40              ADDS     r0,r0,#1
000068  4905              LDR      r1,|L1.128|
00006a  8008              STRH     r0,[r1,#0]
;;;153    					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收	  
00006c  4608              MOV      r0,r1
00006e  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000070  28c7              CMP      r0,#0xc7
000072  dd01              BLE      |L1.120|
000074  2000              MOVS     r0,#0
000076  8008              STRH     r0,[r1,#0]
                  |L1.120|
;;;154    					}		 
;;;155    				}
;;;156    			}   		 
;;;157         } 
;;;158    } 
000078  bd10              POP      {r4,pc}
;;;159    #endif	
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      0x40013800
                  |L1.128|
                          DCD      USART_RX_STA
                  |L1.132|
                          DCD      USART_RX_BUF

                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;50     //定义_sys_exit()以避免使用半主机模式    
;;;51     void _sys_exit(int x) 
000000  bf00              NOP      
;;;52     { 
;;;53     	x = x; 
;;;54     } 
000002  4770              BX       lr
;;;55     //重定义fputc函数 
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;55     //重定义fputc函数 
;;;56     int fputc(int ch, FILE *f)
000000  bf00              NOP      
                  |L3.2|
;;;57     {      
;;;58     	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
000002  4a05              LDR      r2,|L3.24|
000004  8812              LDRH     r2,[r2,#0]
000006  f0020240          AND      r2,r2,#0x40
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L3.2|
;;;59         USART1->DR = (u8) ch;      
00000e  b2c2              UXTB     r2,r0
000010  4b01              LDR      r3,|L3.24|
000012  1d1b              ADDS     r3,r3,#4
000014  801a              STRH     r2,[r3,#0]
;;;60     	return ch;
;;;61     }
000016  4770              BX       lr
;;;62     #endif 
                          ENDP

                  |L3.24|
                          DCD      0x40013800

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;91       
;;;92     void uart_init(u32 bound){
000000  b510              PUSH     {r4,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;93     	//GPIO端口设置
;;;94     	GPIO_InitTypeDef GPIO_InitStructure;
;;;95     	USART_InitTypeDef USART_InitStructure;
;;;96     	NVIC_InitTypeDef NVIC_InitStructure;
;;;97     	 
;;;98     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);	//使能USART1，GPIOA时钟
000006  2101              MOVS     r1,#1
000008  f2440004          MOV      r0,#0x4004
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;99       
;;;100    	//USART1_TX   GPIOA.9
;;;101    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; //PA.9
000010  f44f7000          MOV      r0,#0x200
000014  f8ad0014          STRH     r0,[sp,#0x14]
;;;102    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0016          STRB     r0,[sp,#0x16]
;;;103    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
00001e  2018              MOVS     r0,#0x18
000020  f88d0017          STRB     r0,[sp,#0x17]
;;;104    	GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.9
000024  a905              ADD      r1,sp,#0x14
000026  481d              LDR      r0,|L4.156|
000028  f7fffffe          BL       GPIO_Init
;;;105       
;;;106    	//USART1_RX	  GPIOA.10初始化
;;;107    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PA10
00002c  f44f6080          MOV      r0,#0x400
000030  f8ad0014          STRH     r0,[sp,#0x14]
;;;108    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入
000034  2004              MOVS     r0,#4
000036  f88d0017          STRB     r0,[sp,#0x17]
;;;109    	GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.10  
00003a  a905              ADD      r1,sp,#0x14
00003c  4817              LDR      r0,|L4.156|
00003e  f7fffffe          BL       GPIO_Init
;;;110    
;;;111    	//Usart1 NVIC 配置
;;;112    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000042  2025              MOVS     r0,#0x25
000044  f88d0000          STRB     r0,[sp,#0]
;;;113    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=7;//抢占优先级7
000048  2007              MOVS     r0,#7
00004a  f88d0001          STRB     r0,[sp,#1]
;;;114    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		//子优先级0
00004e  2000              MOVS     r0,#0
000050  f88d0002          STRB     r0,[sp,#2]
;;;115    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
000054  2001              MOVS     r0,#1
000056  f88d0003          STRB     r0,[sp,#3]
;;;116    	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
00005a  4668              MOV      r0,sp
00005c  f7fffffe          BL       NVIC_Init
;;;117      
;;;118    	//USART 初始化设置
;;;119    
;;;120    	USART_InitStructure.USART_BaudRate = bound;//串口波特率
000060  9401              STR      r4,[sp,#4]
;;;121    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
000062  2000              MOVS     r0,#0
000064  f8ad0008          STRH     r0,[sp,#8]
;;;122    	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000068  f8ad000a          STRH     r0,[sp,#0xa]
;;;123    	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
00006c  f8ad000c          STRH     r0,[sp,#0xc]
;;;124    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
000070  f8ad0010          STRH     r0,[sp,#0x10]
;;;125    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
000074  200c              MOVS     r0,#0xc
000076  f8ad000e          STRH     r0,[sp,#0xe]
;;;126    
;;;127    	USART_Init(USART1, &USART_InitStructure); //初始化串口1
00007a  a901              ADD      r1,sp,#4
00007c  4808              LDR      r0,|L4.160|
00007e  f7fffffe          BL       USART_Init
;;;128    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启串口接受中断
000082  2201              MOVS     r2,#1
000084  f2405125          MOV      r1,#0x525
000088  4805              LDR      r0,|L4.160|
00008a  f7fffffe          BL       USART_ITConfig
;;;129    	USART_Cmd(USART1, ENABLE);                    //使能串口1 
00008e  2101              MOVS     r1,#1
000090  4803              LDR      r0,|L4.160|
000092  f7fffffe          BL       USART_Cmd
;;;130    }
000096  b006              ADD      sp,sp,#0x18
000098  bd10              POP      {r4,pc}
;;;131    
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      0x40010800
                  |L4.160|
                          DCD      0x40013800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USART_RX_BUF
                          %        200

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  USART_RX_STA
000004  0000              DCW      0x0000
