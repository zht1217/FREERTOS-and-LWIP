; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.display_task||, CODE, READONLY, ALIGN=2

                  display_task PROC
;;;131    //显示地址等信息
;;;132    void display_task(void *pdata)
000000  e00a              B        |L1.24|
                  |L1.2|
;;;133    {
;;;134        while(1)
;;;135        { 
;;;136    #if LWIP_DHCP               //当开启DHCP的时候
;;;137            if(lwipdev.dhcpstatus != 0)     //开启DHCP
000002  4806              LDR      r0,|L1.28|
000004  7d80              LDRB     r0,[r0,#0x16]  ; lwipdev
000006  b118              CBZ      r0,|L1.16|
;;;138            {
;;;139               // show_address(lwipdev.dhcpstatus );	//显示地址信息
;;;140                vTaskSuspend(DisplayTask_Handler); 		//显示完地址信息后挂起自身任务
000008  4805              LDR      r0,|L1.32|
00000a  6800              LDR      r0,[r0,#0]  ; DisplayTask_Handler
00000c  f7fffffe          BL       vTaskSuspend
                  |L1.16|
;;;141            }
;;;142    #else
;;;143            show_address(0); 						//显示静态地址
;;;144            vTaskSuspend(DisplayTask_Handler);  	//显示完地址信息后挂起自身任务
;;;145    #endif //LWIP_DHCP
;;;146            vTaskDelay(1000);
000010  f44f707a          MOV      r0,#0x3e8
000014  f7fffffe          BL       vTaskDelay
                  |L1.24|
000018  e7f3              B        |L1.2|
;;;147        }
;;;148    }
;;;149    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      lwipdev
                  |L1.32|
                          DCD      DisplayTask_Handler

                          AREA ||i.led_task||, CODE, READONLY, ALIGN=2

                  led_task PROC
;;;150    //led任务
;;;151    void led_task(void *pdata)
000000  e018              B        |L2.52|
                  |L2.2|
;;;152    {
;;;153        while(1)
;;;154        {
;;;155            LED0 = !LED0;
000002  480d              LDR      r0,|L2.56|
000004  6800              LDR      r0,[r0,#0]
000006  b908              CBNZ     r0,|L2.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  2000              MOVS     r0,#0
                  |L2.14|
00000e  490a              LDR      r1,|L2.56|
000010  6008              STR      r0,[r1,#0]
;;;156            vTaskDelay(1000);
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       vTaskDelay
;;;157            LED1 =!LED1;
00001a  4808              LDR      r0,|L2.60|
00001c  f8d00194          LDR      r0,[r0,#0x194]
000020  b908              CBNZ     r0,|L2.38|
000022  2001              MOVS     r0,#1
000024  e000              B        |L2.40|
                  |L2.38|
000026  2000              MOVS     r0,#0
                  |L2.40|
000028  4905              LDR      r1,|L2.64|
00002a  6008              STR      r0,[r1,#0]
;;;158            vTaskDelay(1000);
00002c  f44f707a          MOV      r0,#0x3e8
000030  f7fffffe          BL       vTaskDelay
                  |L2.52|
000034  e7e5              B        |L2.2|
;;;159          
;;;160        }
;;;161    }
;;;162    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      0x42218194
                  |L2.60|
                          DCD      0x42230000
                  |L2.64|
                          DCD      0x42230194

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;73     }
;;;74     int main(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;75     { 
;;;76     
;;;77        delay_init();    //延时函数初始化	  
000002  f7fffffe          BL       delay_init
;;;78         NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4); 	//设置NVIC中断分组
000006  f44f7040          MOV      r0,#0x300
00000a  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;79         uart_init(115200);  //串口初始化为115200
00000e  f44f30e1          MOV      r0,#0x1c200
000012  f7fffffe          BL       uart_init
;;;80         LED_Init();     //LED端口初始化
000016  f7fffffe          BL       LED_Init
;;;81         LCD_Init(); //初始化LCD
00001a  f7fffffe          BL       LCD_Init
;;;82         KEY_Init(); //初始化按键
00001e  f7fffffe          BL       KEY_Init
;;;83        // usmart_dev.init(72);    //初始化USMART		
;;;84         FSMC_SRAM_Init();//初始化外部SRAM
000022  f7fffffe          BL       FSMC_SRAM_Init
;;;85         //DM9000_Init();
;;;86         my_mem_init(SRAMIN);        //初始化内部内存池
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       my_mem_init
;;;87         my_mem_init(SRAMEX);        //初始化外部内存池
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       my_mem_init
;;;88        
;;;89         //创建开始任务
;;;90         xTaskCreate((TaskFunction_t )start_task,            //任务函数
000032  4807              LDR      r0,|L3.80|
000034  2101              MOVS     r1,#1
000036  2300              MOVS     r3,#0
000038  2280              MOVS     r2,#0x80
00003a  e9cd1000          STRD     r1,r0,[sp,#0]
00003e  a105              ADR      r1,|L3.84|
000040  4807              LDR      r0,|L3.96|
000042  f7fffffe          BL       xTaskCreate
;;;91                     (const char*    )"start_task",          //任务名称
;;;92                     (uint16_t       )START_STK_SIZE,        //任务堆栈大小
;;;93                     (void*          )NULL,                  //传递给任务函数的参数
;;;94                     (UBaseType_t    )START_TASK_PRIO,       //任务优先级
;;;95                     (TaskHandle_t*  )&StartTask_Handler);   //任务句柄                
;;;96         vTaskStartScheduler();          //开启任务调度
000046  f7fffffe          BL       vTaskStartScheduler
;;;97     }
00004a  2000              MOVS     r0,#0
00004c  bd1c              POP      {r2-r4,pc}
;;;98     
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      StartTask_Handler
                  |L3.84|
000054  73746172          DCB      "start_task",0
000058  745f7461
00005c  736b00  
00005f  00                DCB      0
                  |L3.96|
                          DCD      start_task

                          AREA ||i.show_address||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  show_address PROC
;;;49     //	  其他 显示静态地址
;;;50     void show_address(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;51     {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;52         u8 buf[30];
;;;53         if(mode==2)
000006  2c02              CMP      r4,#2
000008  d127              BNE      |L4.90|
;;;54         {
;;;55             sprintf((char*)buf,"DHCP IP :%d.%d.%d.%d",lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);         //打印动态IP地址
00000a  4828              LDR      r0,|L4.172|
00000c  7b40              LDRB     r0,[r0,#0xd]
00000e  4927              LDR      r1,|L4.172|
000010  7b09              LDRB     r1,[r1,#0xc]
000012  e9cd1000          STRD     r1,r0,[sp,#0]
000016  4825              LDR      r0,|L4.172|
000018  7ac3              LDRB     r3,[r0,#0xb]
00001a  7a82              LDRB     r2,[r0,#0xa]  ; lwipdev
00001c  a124              ADR      r1,|L4.176|
00001e  a802              ADD      r0,sp,#8
000020  f7fffffe          BL       __2sprintf
;;;56             //LCD_ShowString(30,130,210,16,16,buf); 
;;;57             sprintf((char*)buf,"DHCP GW :%d.%d.%d.%d",lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]); //打印网关地址
000024  4821              LDR      r0,|L4.172|
000026  7d40              LDRB     r0,[r0,#0x15]
000028  4920              LDR      r1,|L4.172|
00002a  7d09              LDRB     r1,[r1,#0x14]
00002c  e9cd1000          STRD     r1,r0,[sp,#0]
000030  481e              LDR      r0,|L4.172|
000032  7cc3              LDRB     r3,[r0,#0x13]
000034  7c82              LDRB     r2,[r0,#0x12]  ; lwipdev
000036  a124              ADR      r1,|L4.200|
000038  a802              ADD      r0,sp,#8
00003a  f7fffffe          BL       __2sprintf
;;;58             //LCD_ShowString(30,150,210,16,16,buf); 
;;;59             sprintf((char*)buf,"NET MASK:%d.%d.%d.%d",lwipdev.netmask[0],lwipdev.netmask[1],lwipdev.netmask[2],lwipdev.netmask[3]); //打印子网掩码地址
00003e  481b              LDR      r0,|L4.172|
000040  7c40              LDRB     r0,[r0,#0x11]
000042  491a              LDR      r1,|L4.172|
000044  7c09              LDRB     r1,[r1,#0x10]
000046  e9cd1000          STRD     r1,r0,[sp,#0]
00004a  4818              LDR      r0,|L4.172|
00004c  7bc3              LDRB     r3,[r0,#0xf]
00004e  7b82              LDRB     r2,[r0,#0xe]  ; lwipdev
000050  a123              ADR      r1,|L4.224|
000052  a802              ADD      r0,sp,#8
000054  f7fffffe          BL       __2sprintf
000058  e026              B        |L4.168|
                  |L4.90|
;;;60             //LCD_ShowString(30,170,210,16,16,buf); 
;;;61             //LCD_ShowString(30,190,210,16,16,"Port:8089!"); 
;;;62         }
;;;63         else 
;;;64         {
;;;65             sprintf((char*)buf,"Static IP:%d.%d.%d.%d",lwipdev.ip[0],lwipdev.ip[1],lwipdev.ip[2],lwipdev.ip[3]);    //打印动态IP地址
00005a  4814              LDR      r0,|L4.172|
00005c  7b40              LDRB     r0,[r0,#0xd]
00005e  4913              LDR      r1,|L4.172|
000060  7b09              LDRB     r1,[r1,#0xc]
000062  e9cd1000          STRD     r1,r0,[sp,#0]
000066  4811              LDR      r0,|L4.172|
000068  7ac3              LDRB     r3,[r0,#0xb]
00006a  7a82              LDRB     r2,[r0,#0xa]  ; lwipdev
00006c  a122              ADR      r1,|L4.248|
00006e  a802              ADD      r0,sp,#8
000070  f7fffffe          BL       __2sprintf
;;;66             //LCD_ShowString(30,130,210,16,16,buf); 
;;;67             sprintf((char*)buf,"Static GW:%d.%d.%d.%d",lwipdev.gateway[0],lwipdev.gateway[1],lwipdev.gateway[2],lwipdev.gateway[3]);    //打印网关地址
000074  480d              LDR      r0,|L4.172|
000076  7d40              LDRB     r0,[r0,#0x15]
000078  490c              LDR      r1,|L4.172|
00007a  7d09              LDRB     r1,[r1,#0x14]
00007c  e9cd1000          STRD     r1,r0,[sp,#0]
000080  480a              LDR      r0,|L4.172|
000082  7cc3              LDRB     r3,[r0,#0x13]
000084  7c82              LDRB     r2,[r0,#0x12]  ; lwipdev
000086  a122              ADR      r1,|L4.272|
000088  a802              ADD      r0,sp,#8
00008a  f7fffffe          BL       __2sprintf
;;;68             //LCD_ShowString(30,150,210,16,16,buf); 
;;;69             sprintf((char*)buf,"NET MASK :%d.%d.%d.%d",lwipdev.netmask[0],lwipdev.netmask[1],lwipdev.netmask[2],lwipdev.netmask[3]);    //打印子网掩码地址
00008e  4807              LDR      r0,|L4.172|
000090  7c40              LDRB     r0,[r0,#0x11]
000092  4906              LDR      r1,|L4.172|
000094  7c09              LDRB     r1,[r1,#0x10]
000096  e9cd1000          STRD     r1,r0,[sp,#0]
00009a  4804              LDR      r0,|L4.172|
00009c  7bc3              LDRB     r3,[r0,#0xf]
00009e  7b82              LDRB     r2,[r0,#0xe]  ; lwipdev
0000a0  a121              ADR      r1,|L4.296|
0000a2  a802              ADD      r0,sp,#8
0000a4  f7fffffe          BL       __2sprintf
                  |L4.168|
;;;70             //LCD_ShowString(30,170,210,16,16,buf); 
;;;71             //LCD_ShowString(30,190,210,16,16,"Port:8089!"); 
;;;72         }
;;;73     }
0000a8  b00a              ADD      sp,sp,#0x28
0000aa  bd10              POP      {r4,pc}
;;;74     int main(void)
                          ENDP

                  |L4.172|
                          DCD      lwipdev
                  |L4.176|
0000b0  44484350          DCB      "DHCP IP :%d.%d.%d.%d",0
0000b4  20495020
0000b8  3a25642e
0000bc  25642e25
0000c0  642e2564
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L4.200|
0000c8  44484350          DCB      "DHCP GW :%d.%d.%d.%d",0
0000cc  20475720
0000d0  3a25642e
0000d4  25642e25
0000d8  642e2564
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L4.224|
0000e0  4e455420          DCB      "NET MASK:%d.%d.%d.%d",0
0000e4  4d41534b
0000e8  3a25642e
0000ec  25642e25
0000f0  642e2564
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L4.248|
0000f8  53746174          DCB      "Static IP:%d.%d.%d.%d",0
0000fc  69632049
000100  503a2564
000104  2e25642e
000108  25642e25
00010c  6400    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L4.272|
000110  53746174          DCB      "Static GW:%d.%d.%d.%d",0
000114  69632047
000118  573a2564
00011c  2e25642e
000120  25642e25
000124  6400    
000126  00                DCB      0
000127  00                DCB      0
                  |L4.296|
000128  4e455420          DCB      "NET MASK :%d.%d.%d.%d",0
00012c  4d41534b
000130  203a2564
000134  2e25642e
000138  25642e25
00013c  6400    
00013e  00                DCB      0
00013f  00                DCB      0

                          AREA ||i.start_task||, CODE, READONLY, ALIGN=2

                  start_task PROC
;;;99     //开始任务任务函数
;;;100    void start_task(void *pvParameters)
000000  b51c              PUSH     {r2-r4,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102         lwip_comm_init();    //lwip初始化
000004  f7fffffe          BL       lwip_comm_init
;;;103        
;;;104        taskENTER_CRITICAL();           //进入临界区
000008  f7fffffe          BL       vPortEnterCritical
;;;105    
;;;106        #if LWIP_DHCP
;;;107        lwip_comm_dhcp_creat(); //创建DHCP任务
00000c  f7fffffe          BL       lwip_comm_dhcp_creat
;;;108        #endif
;;;109                  //创建led任务
;;;110        xTaskCreate((TaskFunction_t )led_task,             
000010  480d              LDR      r0,|L5.72|
000012  2103              MOVS     r1,#3
000014  2300              MOVS     r3,#0
000016  2240              MOVS     r2,#0x40
000018  e9cd1000          STRD     r1,r0,[sp,#0]
00001c  a10b              ADR      r1,|L5.76|
00001e  480e              LDR      r0,|L5.88|
000020  f7fffffe          BL       xTaskCreate
;;;111                    (const char*    )"led_task",           
;;;112                    (uint16_t       )LED_STK_SIZE,        
;;;113                    (void*          )NULL,                  
;;;114                    (UBaseType_t    )LED_TASK_PRIO,        
;;;115                    (TaskHandle_t*  )&LedTask_Handler); 
;;;116        //创建display任务
;;;117        xTaskCreate((TaskFunction_t )display_task,             
000024  480d              LDR      r0,|L5.92|
000026  2102              MOVS     r1,#2
000028  2300              MOVS     r3,#0
00002a  2280              MOVS     r2,#0x80
00002c  e9cd1000          STRD     r1,r0,[sp,#0]
000030  a10b              ADR      r1,|L5.96|
000032  480f              LDR      r0,|L5.112|
000034  f7fffffe          BL       xTaskCreate
;;;118                    (const char*    )"display_task",           
;;;119                    (uint16_t       )DISPALY_STK_SIZE,        
;;;120                    (void*          )NULL,                  
;;;121                    (UBaseType_t    )DISPALY_TASK_PRIO,        
;;;122                    (TaskHandle_t*  )&DisplayTask_Handler);   
;;;123    
;;;124          
;;;125        vTaskDelete(StartTask_Handler); //删除开始任务
000038  480e              LDR      r0,|L5.116|
00003a  6800              LDR      r0,[r0,#0]  ; StartTask_Handler
00003c  f7fffffe          BL       vTaskDelete
;;;126        taskEXIT_CRITICAL();            //退出临界区
000040  f7fffffe          BL       vPortExitCritical
;;;127                   
;;;128    }
000044  bd1c              POP      {r2-r4,pc}
;;;129     
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      LedTask_Handler
                  |L5.76|
00004c  6c65645f          DCB      "led_task",0
000050  7461736b
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L5.88|
                          DCD      led_task
                  |L5.92|
                          DCD      DisplayTask_Handler
                  |L5.96|
000060  64697370          DCB      "display_task",0
000064  6c61795f
000068  7461736b
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L5.112|
                          DCD      display_task
                  |L5.116|
                          DCD      StartTask_Handler

                          AREA ||.data||, DATA, ALIGN=2

                  StartTask_Handler
                          DCD      0x00000000
                  DispalyTask_Handler
                          DCD      0x00000000
                  LedTask_Handler
                          DCD      0x00000000
                  DisplayTask_Handler
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
