; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\netif.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\netif.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\netif.crf ..\LWIP\lwip-1.4.1\src\core\netif.c]
                          THUMB

                          AREA ||i.netif_add||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  netif_add PROC
;;;137     */
;;;138    struct netif *netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;139      ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
;;;140    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd5a09          LDRD     r5,r10,[sp,#0x24]
000010  f8dd9020          LDR      r9,[sp,#0x20]
;;;141    
;;;142      LWIP_ASSERT("No init function given", init != NULL);
000014  bf00              NOP      
000016  b93d              CBNZ     r5,|L1.40|
000018  bf00              NOP      
00001a  a31e              ADR      r3,|L1.148|
00001c  228e              MOVS     r2,#0x8e
00001e  a126              ADR      r1,|L1.184|
000020  a02b              ADR      r0,|L1.208|
000022  f7fffffe          BL       __2printf
000026  bf00              NOP      
                  |L1.40|
000028  bf00              NOP      
;;;143    
;;;144      /* reset new interface configuration state */
;;;145      ip_addr_set_zero(&netif->ip_addr);
00002a  2000              MOVS     r0,#0
00002c  6060              STR      r0,[r4,#4]
;;;146      ip_addr_set_zero(&netif->netmask);
00002e  60a0              STR      r0,[r4,#8]
;;;147      ip_addr_set_zero(&netif->gw);
000030  60e0              STR      r0,[r4,#0xc]
;;;148      netif->flags = 0;
000032  f884002d          STRB     r0,[r4,#0x2d]
;;;149    #if LWIP_DHCP
;;;150      /* netif not under DHCP control by default */
;;;151      netif->dhcp = NULL;
000036  6220              STR      r0,[r4,#0x20]
;;;152    #endif /* LWIP_DHCP */
;;;153    #if LWIP_AUTOIP
;;;154      /* netif not under AutoIP control by default */
;;;155      netif->autoip = NULL;
;;;156    #endif /* LWIP_AUTOIP */
;;;157    #if LWIP_NETIF_STATUS_CALLBACK
;;;158      netif->status_callback = NULL;
;;;159    #endif /* LWIP_NETIF_STATUS_CALLBACK */
;;;160    #if LWIP_NETIF_LINK_CALLBACK
;;;161      netif->link_callback = NULL;
;;;162    #endif /* LWIP_NETIF_LINK_CALLBACK */
;;;163    #if LWIP_IGMP
;;;164      netif->igmp_mac_filter = NULL;
;;;165    #endif /* LWIP_IGMP */
;;;166    #if ENABLE_LOOPBACK
;;;167      netif->loop_first = NULL;
;;;168      netif->loop_last = NULL;
;;;169    #endif /* ENABLE_LOOPBACK */
;;;170    
;;;171      /* remember netif specific state information data */
;;;172      netif->state = state;
000038  f8c4901c          STR      r9,[r4,#0x1c]
;;;173      netif->num = netif_num++;
00003c  482f              LDR      r0,|L1.252|
00003e  7800              LDRB     r0,[r0,#0]  ; netif_num
000040  f8840030          STRB     r0,[r4,#0x30]
000044  482d              LDR      r0,|L1.252|
000046  7800              LDRB     r0,[r0,#0]  ; netif_num
000048  1c40              ADDS     r0,r0,#1
00004a  492c              LDR      r1,|L1.252|
00004c  7008              STRB     r0,[r1,#0]
;;;174      netif->input = input;
00004e  f8c4a010          STR      r10,[r4,#0x10]
;;;175      NETIF_SET_HWADDRHINT(netif, NULL);
;;;176    #if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
;;;177      netif->loop_cnt_current = 0;
;;;178    #endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
;;;179    
;;;180      netif_set_addr(netif, ipaddr, netmask, gw);
000052  4643              MOV      r3,r8
000054  463a              MOV      r2,r7
000056  4631              MOV      r1,r6
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       netif_set_addr
;;;181    
;;;182      /* call user specified initialization function for netif */
;;;183      if (init(netif) != ERR_OK) {
00005e  4620              MOV      r0,r4
000060  47a8              BLX      r5
000062  b110              CBZ      r0,|L1.106|
;;;184        return NULL;
000064  2000              MOVS     r0,#0
                  |L1.102|
;;;185      }
;;;186    
;;;187      /* add this netif to the list */
;;;188      netif->next = netif_list;
;;;189      netif_list = netif;
;;;190      snmp_inc_iflist();
;;;191    
;;;192    #if LWIP_IGMP
;;;193      /* start IGMP processing */
;;;194      if (netif->flags & NETIF_FLAG_IGMP) {
;;;195        igmp_start(netif);
;;;196      }
;;;197    #endif /* LWIP_IGMP */
;;;198    
;;;199      LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP addr ",
;;;200        netif->name[0], netif->name[1]));
;;;201      ip_addr_debug_print(NETIF_DEBUG, ipaddr);
;;;202      LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
;;;203      ip_addr_debug_print(NETIF_DEBUG, netmask);
;;;204      LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
;;;205      ip_addr_debug_print(NETIF_DEBUG, gw);
;;;206      LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
;;;207      return netif;
;;;208    }
000066  e8bd87f0          POP      {r4-r10,pc}
                  |L1.106|
00006a  4825              LDR      r0,|L1.256|
00006c  6800              LDR      r0,[r0,#0]            ;188  ; netif_list
00006e  6020              STR      r0,[r4,#0]            ;188
000070  4823              LDR      r0,|L1.256|
000072  6004              STR      r4,[r0,#0]            ;189  ; netif_list
000074  bf00              NOP                            ;199
000076  bf00              NOP                            ;199
000078  bf00              NOP                            ;201
00007a  bf00              NOP                            ;201
00007c  bf00              NOP                            ;202
00007e  bf00              NOP                            ;202
000080  bf00              NOP                            ;203
000082  bf00              NOP                            ;203
000084  bf00              NOP                            ;204
000086  bf00              NOP                            ;204
000088  bf00              NOP                            ;205
00008a  bf00              NOP                            ;205
00008c  bf00              NOP                            ;206
00008e  bf00              NOP                            ;206
000090  4620              MOV      r0,r4                 ;207
000092  e7e8              B        |L1.102|
;;;209    
                          ENDP

                  |L1.148|
000094  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\netif.c",0
000098  5749505c
00009c  6c776970
0000a0  2d312e34
0000a4  2e315c73
0000a8  72635c63
0000ac  6f72655c
0000b0  6e657469
0000b4  662e6300
                  |L1.184|
0000b8  4e6f2069          DCB      "No init function given",0
0000bc  6e697420
0000c0  66756e63
0000c4  74696f6e
0000c8  20676976
0000cc  656e00  
0000cf  00                DCB      0
                  |L1.208|
0000d0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0000d4  7274696f
0000d8  6e202225
0000dc  73222066
0000e0  61696c65
0000e4  64206174
0000e8  206c696e
0000ec  65202564
0000f0  20696e20
0000f4  25730d0a
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L1.252|
                          DCD      netif_num
                  |L1.256|
                          DCD      netif_list

                          AREA ||i.netif_find||, CODE, READONLY, ALIGN=2

                  netif_find PROC
;;;288    struct netif *
;;;289    netif_find(char *name)
000000  b510              PUSH     {r4,lr}
;;;290    {
000002  4602              MOV      r2,r0
;;;291      struct netif *netif;
;;;292      u8_t num;
;;;293    
;;;294      if (name == NULL) {
000004  b90a              CBNZ     r2,|L2.10|
;;;295        return NULL;
000006  2000              MOVS     r0,#0
                  |L2.8|
;;;296      }
;;;297    
;;;298      num = name[2] - '0';
;;;299    
;;;300      for(netif = netif_list; netif != NULL; netif = netif->next) {
;;;301        if (num == netif->num &&
;;;302           name[0] == netif->name[0] &&
;;;303           name[1] == netif->name[1]) {
;;;304          LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
;;;305          return netif;
;;;306        }
;;;307      }
;;;308      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
;;;309      return NULL;
;;;310    }
000008  bd10              POP      {r4,pc}
                  |L2.10|
00000a  7890              LDRB     r0,[r2,#2]            ;298
00000c  3830              SUBS     r0,r0,#0x30           ;298
00000e  b2c3              UXTB     r3,r0                 ;298
000010  480d              LDR      r0,|L2.72|
000012  6801              LDR      r1,[r0,#0]            ;300  ; netif_list
000014  e012              B        |L2.60|
                  |L2.22|
000016  f8910030          LDRB     r0,[r1,#0x30]         ;301
00001a  4298              CMP      r0,r3                 ;301
00001c  d10d              BNE      |L2.58|
00001e  7810              LDRB     r0,[r2,#0]            ;302
000020  f891402e          LDRB     r4,[r1,#0x2e]         ;302
000024  42a0              CMP      r0,r4                 ;302
000026  d108              BNE      |L2.58|
000028  7854              LDRB     r4,[r2,#1]            ;303
00002a  202f              MOVS     r0,#0x2f              ;303
00002c  5c40              LDRB     r0,[r0,r1]            ;303
00002e  4284              CMP      r4,r0                 ;303
000030  d103              BNE      |L2.58|
000032  bf00              NOP                            ;304
000034  bf00              NOP                            ;304
000036  4608              MOV      r0,r1                 ;305
000038  e7e6              B        |L2.8|
                  |L2.58|
00003a  6809              LDR      r1,[r1,#0]            ;300
                  |L2.60|
00003c  2900              CMP      r1,#0                 ;300
00003e  d1ea              BNE      |L2.22|
000040  bf00              NOP                            ;308
000042  bf00              NOP                            ;308
000044  2000              MOVS     r0,#0                 ;309
000046  e7df              B        |L2.8|
;;;311    
                          ENDP

                  |L2.72|
                          DCD      netif_list

                          AREA ||i.netif_init||, CODE, READONLY, ALIGN=1

                  netif_init PROC
;;;105    void
;;;106    netif_init(void)
000000  4770              BX       lr
;;;107    {
;;;108    #if LWIP_HAVE_LOOPIF
;;;109      ip_addr_t loop_ipaddr, loop_netmask, loop_gw;
;;;110      IP4_ADDR(&loop_gw, 127,0,0,1);
;;;111      IP4_ADDR(&loop_ipaddr, 127,0,0,1);
;;;112      IP4_ADDR(&loop_netmask, 255,0,0,0);
;;;113    
;;;114    #if NO_SYS
;;;115      netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, ip_input);
;;;116    #else  /* NO_SYS */
;;;117      netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
;;;118    #endif /* NO_SYS */
;;;119      netif_set_up(&loop_netif);
;;;120    
;;;121    #endif /* LWIP_HAVE_LOOPIF */
;;;122    }
;;;123    
                          ENDP


                          AREA ||i.netif_remove||, CODE, READONLY, ALIGN=2

                  netif_remove PROC
;;;233    void
;;;234    netif_remove(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236      if (netif == NULL) {
000004  b904              CBNZ     r4,|L4.8|
                  |L4.6|
;;;237        return;
;;;238      }
;;;239    
;;;240    #if LWIP_IGMP
;;;241      /* stop IGMP processing */
;;;242      if (netif->flags & NETIF_FLAG_IGMP) {
;;;243        igmp_stop(netif);
;;;244      }
;;;245    #endif /* LWIP_IGMP */
;;;246      if (netif_is_up(netif)) {
;;;247        /* set netif down before removing (call callback function) */
;;;248        netif_set_down(netif);
;;;249      }
;;;250    
;;;251      snmp_delete_ipaddridx_tree(netif);
;;;252    
;;;253      /*  is it the first netif? */
;;;254      if (netif_list == netif) {
;;;255        netif_list = netif->next;
;;;256      } else {
;;;257        /*  look for netif further down the list */
;;;258        struct netif * tmpNetif;
;;;259        for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
;;;260          if (tmpNetif->next == netif) {
;;;261            tmpNetif->next = netif->next;
;;;262            break;
;;;263          }
;;;264        }
;;;265        if (tmpNetif == NULL)
;;;266          return; /*  we didn't find any netif today */
;;;267      }
;;;268      snmp_dec_iflist();
;;;269      /* this netif is default? */
;;;270      if (netif_default == netif) {
;;;271        /* reset default netif */
;;;272        netif_set_default(NULL);
;;;273      }
;;;274    #if LWIP_NETIF_REMOVE_CALLBACK
;;;275      if (netif->remove_callback) {
;;;276        netif->remove_callback(netif);
;;;277      }
;;;278    #endif /* LWIP_NETIF_REMOVE_CALLBACK */
;;;279      LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
;;;280    }
000006  bd10              POP      {r4,pc}
                  |L4.8|
000008  f894002d          LDRB     r0,[r4,#0x2d]         ;246
00000c  f0000001          AND      r0,r0,#1              ;246
000010  b110              CBZ      r0,|L4.24|
000012  4620              MOV      r0,r4                 ;248
000014  f7fffffe          BL       netif_set_down
                  |L4.24|
000018  4811              LDR      r0,|L4.96|
00001a  6800              LDR      r0,[r0,#0]            ;254  ; netif_list
00001c  42a0              CMP      r0,r4                 ;254
00001e  d103              BNE      |L4.40|
000020  490f              LDR      r1,|L4.96|
000022  6820              LDR      r0,[r4,#0]            ;255
000024  6008              STR      r0,[r1,#0]            ;255  ; netif_list
000026  e00f              B        |L4.72|
                  |L4.40|
000028  490d              LDR      r1,|L4.96|
00002a  6808              LDR      r0,[r1,#0]            ;259  ; netif_list
00002c  e006              B        |L4.60|
                  |L4.46|
00002e  6801              LDR      r1,[r0,#0]            ;260
000030  42a1              CMP      r1,r4                 ;260
000032  d102              BNE      |L4.58|
000034  6821              LDR      r1,[r4,#0]            ;261
000036  6001              STR      r1,[r0,#0]            ;261
000038  e002              B        |L4.64|
                  |L4.58|
00003a  6800              LDR      r0,[r0,#0]            ;259
                  |L4.60|
00003c  2800              CMP      r0,#0                 ;259
00003e  d1f6              BNE      |L4.46|
                  |L4.64|
000040  bf00              NOP                            ;262
000042  b900              CBNZ     r0,|L4.70|
000044  e7df              B        |L4.6|
                  |L4.70|
000046  bf00              NOP                            ;267
                  |L4.72|
000048  4806              LDR      r0,|L4.100|
00004a  6800              LDR      r0,[r0,#0]            ;270  ; netif_default
00004c  42a0              CMP      r0,r4                 ;270
00004e  d102              BNE      |L4.86|
000050  2000              MOVS     r0,#0                 ;272
000052  f7fffffe          BL       netif_set_default
                  |L4.86|
000056  bf00              NOP                            ;279
000058  bf00              NOP                            ;279
00005a  bf00              NOP      
00005c  e7d3              B        |L4.6|
;;;281    
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
                          DCD      netif_list
                  |L4.100|
                          DCD      netif_default

                          AREA ||i.netif_set_addr||, CODE, READONLY, ALIGN=1

                  netif_set_addr PROC
;;;219    void
;;;220    netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;221        ip_addr_t *gw)
;;;222    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;223      netif_set_ipaddr(netif, ipaddr);
00000c  4639              MOV      r1,r7
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       netif_set_ipaddr
;;;224      netif_set_netmask(netif, netmask);
000014  4621              MOV      r1,r4
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       netif_set_netmask
;;;225      netif_set_gw(netif, gw);
00001c  4629              MOV      r1,r5
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       netif_set_gw
;;;226    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;227    
                          ENDP


                          AREA ||i.netif_set_default||, CODE, READONLY, ALIGN=2

                  netif_set_default PROC
;;;428    void
;;;429    netif_set_default(struct netif *netif)
000000  4902              LDR      r1,|L6.12|
;;;430    {
;;;431      if (netif == NULL) {
;;;432        /* remove default route */
;;;433        snmp_delete_iprteidx_tree(1, netif);
;;;434      } else {
;;;435        /* install default route */
;;;436        snmp_insert_iprteidx_tree(1, netif);
;;;437      }
;;;438      netif_default = netif;
000002  6008              STR      r0,[r1,#0]  ; netif_default
;;;439      LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
000004  bf00              NOP      
000006  bf00              NOP      
;;;440               netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
;;;441    }
000008  4770              BX       lr
;;;442    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      netif_default

                          AREA ||i.netif_set_down||, CODE, READONLY, ALIGN=1

                  netif_set_down PROC
;;;488     */ 
;;;489    void netif_set_down(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;490    {
000002  4604              MOV      r4,r0
;;;491      if (netif->flags & NETIF_FLAG_UP) {
000004  f894002d          LDRB     r0,[r4,#0x2d]
000008  f0000001          AND      r0,r0,#1
00000c  b160              CBZ      r0,|L7.40|
;;;492        netif->flags &= ~NETIF_FLAG_UP;
00000e  f8140f2d          LDRB     r0,[r4,#0x2d]!
000012  f0200001          BIC      r0,r0,#1
000016  7020              STRB     r0,[r4,#0]
;;;493    #if LWIP_SNMP
;;;494        snmp_get_sysuptime(&netif->ts);
;;;495    #endif
;;;496    
;;;497    #if LWIP_ARP
;;;498        if (netif->flags & NETIF_FLAG_ETHARP) {
000018  f814092d          LDRB     r0,[r4],#-0x2d
00001c  f0000020          AND      r0,r0,#0x20
000020  b110              CBZ      r0,|L7.40|
;;;499          etharp_cleanup_netif(netif);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       etharp_cleanup_netif
                  |L7.40|
;;;500        }
;;;501    #endif /* LWIP_ARP */
;;;502        NETIF_STATUS_CALLBACK(netif);
;;;503      }
;;;504    }
000028  bd10              POP      {r4,pc}
;;;505    
                          ENDP


                          AREA ||i.netif_set_gw||, CODE, READONLY, ALIGN=1

                  netif_set_gw PROC
;;;386    void
;;;387    netif_set_gw(struct netif *netif, ip_addr_t *gw)
000000  b909              CBNZ     r1,|L8.6|
;;;388    {
;;;389      ip_addr_set(&(netif->gw), gw);
000002  2200              MOVS     r2,#0
000004  e000              B        |L8.8|
                  |L8.6|
000006  680a              LDR      r2,[r1,#0]
                  |L8.8|
000008  60c2              STR      r2,[r0,#0xc]
;;;390      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
00000a  bf00              NOP      
00000c  bf00              NOP      
;;;391        netif->name[0], netif->name[1],
;;;392        ip4_addr1_16(&netif->gw),
;;;393        ip4_addr2_16(&netif->gw),
;;;394        ip4_addr3_16(&netif->gw),
;;;395        ip4_addr4_16(&netif->gw)));
;;;396    }
00000e  4770              BX       lr
;;;397    
                          ENDP


                          AREA ||i.netif_set_ipaddr||, CODE, READONLY, ALIGN=2

                  netif_set_ipaddr PROC
;;;321    void
;;;322    netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;323    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;324      /* TODO: Handling of obsolete pcbs */
;;;325      /* See:  http://mail.gnu.org/archive/html/lwip-users/2003-03/msg00118.html */
;;;326    #if LWIP_TCP
;;;327      struct tcp_pcb *pcb;
;;;328      struct tcp_pcb_listen *lpcb;
;;;329    
;;;330      /* address is actually being changed? */
;;;331      if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
000008  2c00              CMP      r4,#0
00000a  d02e              BEQ      |L9.106|
00000c  6820              LDR      r0,[r4,#0]
00000e  6879              LDR      r1,[r7,#4]
000010  4288              CMP      r0,r1
000012  d101              BNE      |L9.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L9.26|
                  |L9.24|
000018  2000              MOVS     r0,#0
                  |L9.26|
00001a  bb30              CBNZ     r0,|L9.106|
;;;332        /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
;;;333        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;334        pcb = tcp_active_pcbs;
000020  4816              LDR      r0,|L9.124|
000022  6806              LDR      r6,[r0,#0]  ; tcp_active_pcbs
;;;335        while (pcb != NULL) {
000024  e00d              B        |L9.66|
                  |L9.38|
;;;336          /* PCB bound to current local interface address? */
;;;337          if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
000026  6830              LDR      r0,[r6,#0]
000028  6879              LDR      r1,[r7,#4]
00002a  4288              CMP      r0,r1
00002c  d108              BNE      |L9.64|
;;;338    #if LWIP_AUTOIP
;;;339            /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
;;;340            && !ip_addr_islinklocal(&(pcb->local_ip))
;;;341    #endif /* LWIP_AUTOIP */
;;;342            ) {
;;;343            /* this connection must be aborted */
;;;344            struct tcp_pcb *next = pcb->next;
00002e  f8d6800c          LDR      r8,[r6,#0xc]
;;;345            LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
000032  bf00              NOP      
000034  bf00              NOP      
;;;346            tcp_abort(pcb);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       tcp_abort
;;;347            pcb = next;
00003c  4646              MOV      r6,r8
;;;348          } else {
00003e  e000              B        |L9.66|
                  |L9.64|
;;;349            pcb = pcb->next;
000040  68f6              LDR      r6,[r6,#0xc]
                  |L9.66|
000042  2e00              CMP      r6,#0                 ;335
000044  d1ef              BNE      |L9.38|
;;;350          }
;;;351        }
;;;352        for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
000046  480e              LDR      r0,|L9.128|
000048  6805              LDR      r5,[r0,#0]  ; tcp_listen_pcbs
00004a  e00c              B        |L9.102|
                  |L9.76|
;;;353          /* PCB bound to current local interface address? */
;;;354          if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
00004c  b155              CBZ      r5,|L9.100|
00004e  6828              LDR      r0,[r5,#0]
000050  b140              CBZ      r0,|L9.100|
;;;355              (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
000052  6828              LDR      r0,[r5,#0]
000054  6879              LDR      r1,[r7,#4]
000056  4288              CMP      r0,r1
000058  d104              BNE      |L9.100|
;;;356            /* The PCB is listening to the old ipaddr and
;;;357             * is set to listen to the new one instead */
;;;358            ip_addr_set(&(lpcb->local_ip), ipaddr);
00005a  b90c              CBNZ     r4,|L9.96|
00005c  2000              MOVS     r0,#0
00005e  e000              B        |L9.98|
                  |L9.96|
000060  6820              LDR      r0,[r4,#0]
                  |L9.98|
000062  6028              STR      r0,[r5,#0]
                  |L9.100|
000064  68ed              LDR      r5,[r5,#0xc]          ;352
                  |L9.102|
000066  2d00              CMP      r5,#0                 ;352
000068  d1f0              BNE      |L9.76|
                  |L9.106|
;;;359          }
;;;360        }
;;;361      }
;;;362    #endif
;;;363      snmp_delete_ipaddridx_tree(netif);
;;;364      snmp_delete_iprteidx_tree(0,netif);
;;;365      /* set new IP address to netif */
;;;366      ip_addr_set(&(netif->ip_addr), ipaddr);
00006a  b90c              CBNZ     r4,|L9.112|
00006c  2000              MOVS     r0,#0
00006e  e000              B        |L9.114|
                  |L9.112|
000070  6820              LDR      r0,[r4,#0]
                  |L9.114|
000072  6078              STR      r0,[r7,#4]
;;;367      snmp_insert_ipaddridx_tree(netif);
;;;368      snmp_insert_iprteidx_tree(0,netif);
;;;369    
;;;370      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: IP address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
000074  bf00              NOP      
000076  bf00              NOP      
;;;371        netif->name[0], netif->name[1],
;;;372        ip4_addr1_16(&netif->ip_addr),
;;;373        ip4_addr2_16(&netif->ip_addr),
;;;374        ip4_addr3_16(&netif->ip_addr),
;;;375        ip4_addr4_16(&netif->ip_addr)));
;;;376    }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;377    
                          ENDP

                  |L9.124|
                          DCD      tcp_active_pcbs
                  |L9.128|
                          DCD      tcp_listen_pcbs

                          AREA ||i.netif_set_link_down||, CODE, READONLY, ALIGN=1

                  netif_set_link_down PROC
;;;572     */
;;;573    void netif_set_link_down(struct netif *netif )
000000  f890102d          LDRB     r1,[r0,#0x2d]
;;;574    {
;;;575      if (netif->flags & NETIF_FLAG_LINK_UP) {
000004  f0010110          AND      r1,r1,#0x10
000008  b129              CBZ      r1,|L10.22|
;;;576        netif->flags &= ~NETIF_FLAG_LINK_UP;
00000a  f890102d          LDRB     r1,[r0,#0x2d]
00000e  f0210110          BIC      r1,r1,#0x10
000012  f880102d          STRB     r1,[r0,#0x2d]
                  |L10.22|
;;;577        NETIF_LINK_CALLBACK(netif);
;;;578      }
;;;579    }
000016  4770              BX       lr
;;;580    
                          ENDP


                          AREA ||i.netif_set_link_up||, CODE, READONLY, ALIGN=1

                  netif_set_link_up PROC
;;;533     */
;;;534    void netif_set_link_up(struct netif *netif )
000000  b510              PUSH     {r4,lr}
;;;535    {
000002  4604              MOV      r4,r0
;;;536      if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
000004  f894002d          LDRB     r0,[r4,#0x2d]
000008  f0000010          AND      r0,r0,#0x10
00000c  b9c0              CBNZ     r0,|L11.64|
;;;537        netif->flags |= NETIF_FLAG_LINK_UP;
00000e  f894002d          LDRB     r0,[r4,#0x2d]
000012  f0400010          ORR      r0,r0,#0x10
000016  f884002d          STRB     r0,[r4,#0x2d]
;;;538    
;;;539    #if LWIP_DHCP
;;;540        if (netif->dhcp) {
00001a  6a20              LDR      r0,[r4,#0x20]
00001c  b110              CBZ      r0,|L11.36|
;;;541          dhcp_network_changed(netif);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       dhcp_network_changed
                  |L11.36|
;;;542        }
;;;543    #endif /* LWIP_DHCP */
;;;544    
;;;545    #if LWIP_AUTOIP
;;;546        if (netif->autoip) {
;;;547          autoip_network_changed(netif);
;;;548        }
;;;549    #endif /* LWIP_AUTOIP */
;;;550    
;;;551        if (netif->flags & NETIF_FLAG_UP) {
000024  f894002d          LDRB     r0,[r4,#0x2d]
000028  f0000001          AND      r0,r0,#1
00002c  b140              CBZ      r0,|L11.64|
;;;552    #if LWIP_ARP
;;;553          /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
;;;554          if (netif->flags & NETIF_FLAG_ETHARP) {
00002e  f894002d          LDRB     r0,[r4,#0x2d]
000032  f0000020          AND      r0,r0,#0x20
000036  b118              CBZ      r0,|L11.64|
;;;555            etharp_gratuitous(netif);
000038  1d21              ADDS     r1,r4,#4
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       etharp_request
                  |L11.64|
;;;556          }
;;;557    #endif /* LWIP_ARP */
;;;558    
;;;559    #if LWIP_IGMP
;;;560          /* resend IGMP memberships */
;;;561          if (netif->flags & NETIF_FLAG_IGMP) {
;;;562            igmp_report_groups( netif);
;;;563          }
;;;564    #endif /* LWIP_IGMP */
;;;565        }
;;;566        NETIF_LINK_CALLBACK(netif);
;;;567      }
;;;568    }
000040  bd10              POP      {r4,pc}
;;;569    
                          ENDP


                          AREA ||i.netif_set_netmask||, CODE, READONLY, ALIGN=1

                  netif_set_netmask PROC
;;;407    void
;;;408    netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
000000  b909              CBNZ     r1,|L12.6|
;;;409    {
;;;410      snmp_delete_iprteidx_tree(0, netif);
;;;411      /* set new netmask to netif */
;;;412      ip_addr_set(&(netif->netmask), netmask);
000002  2200              MOVS     r2,#0
000004  e000              B        |L12.8|
                  |L12.6|
000006  680a              LDR      r2,[r1,#0]
                  |L12.8|
000008  6082              STR      r2,[r0,#8]
;;;413      snmp_insert_iprteidx_tree(0, netif);
;;;414      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
00000a  bf00              NOP      
00000c  bf00              NOP      
;;;415        netif->name[0], netif->name[1],
;;;416        ip4_addr1_16(&netif->netmask),
;;;417        ip4_addr2_16(&netif->netmask),
;;;418        ip4_addr3_16(&netif->netmask),
;;;419        ip4_addr4_16(&netif->netmask)));
;;;420    }
00000e  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||i.netif_set_up||, CODE, READONLY, ALIGN=1

                  netif_set_up PROC
;;;451     */ 
;;;452    void netif_set_up(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;453    {
000002  4604              MOV      r4,r0
;;;454      if (!(netif->flags & NETIF_FLAG_UP)) {
000004  f894002d          LDRB     r0,[r4,#0x2d]
000008  f0000001          AND      r0,r0,#1
00000c  b990              CBNZ     r0,|L13.52|
;;;455        netif->flags |= NETIF_FLAG_UP;
00000e  f8140f2d          LDRB     r0,[r4,#0x2d]!
000012  f0400001          ORR      r0,r0,#1
000016  7020              STRB     r0,[r4,#0]
;;;456        
;;;457    #if LWIP_SNMP
;;;458        snmp_get_sysuptime(&netif->ts);
;;;459    #endif /* LWIP_SNMP */
;;;460    
;;;461        NETIF_STATUS_CALLBACK(netif);
;;;462    
;;;463        if (netif->flags & NETIF_FLAG_LINK_UP) {
000018  f814092d          LDRB     r0,[r4],#-0x2d
00001c  f0000010          AND      r0,r0,#0x10
000020  b140              CBZ      r0,|L13.52|
;;;464    #if LWIP_ARP
;;;465          /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
;;;466          if (netif->flags & (NETIF_FLAG_ETHARP)) {
000022  f894002d          LDRB     r0,[r4,#0x2d]
000026  f0000020          AND      r0,r0,#0x20
00002a  b118              CBZ      r0,|L13.52|
;;;467            etharp_gratuitous(netif);
00002c  1d21              ADDS     r1,r4,#4
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       etharp_request
                  |L13.52|
;;;468          }
;;;469    #endif /* LWIP_ARP */
;;;470    
;;;471    #if LWIP_IGMP
;;;472          /* resend IGMP memberships */
;;;473          if (netif->flags & NETIF_FLAG_IGMP) {
;;;474            igmp_report_groups( netif);
;;;475          }
;;;476    #endif /* LWIP_IGMP */
;;;477        }
;;;478      }
;;;479    }
000034  bd10              POP      {r4,pc}
;;;480    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  netif_list
                          DCD      0x00000000
                  netif_default
                          DCD      0x00000000
                  netif_num
000008  00                DCB      0x00
