; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\ip_addr.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\ip_addr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I..\LWIP\lwip-1.4.1\src\include -I..\LWIP\lwip-1.4.1\src\include\ipv4 -I..\LWIP\lwip-1.4.1\src\include\netif -I..\LWIP -I..\LWIP\arch -I..\LWIP\lwip_app\lwip_comm -I..\HARDWARE\DM9000 -I..\HARDWARE\SRAM -I..\LWIP\lwip-1.4.1\src\api -I.\RTE\_FreeRTOS -ID:\MDK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=530 -DSTM32F10X_HD -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\ip_addr.crf ..\LWIP\lwip-1.4.1\src\core\ipv4\ip_addr.c]
                          THUMB

                          AREA ||i.ip4_addr_isbroadcast||, CODE, READONLY, ALIGN=1

                  ip4_addr_isbroadcast PROC
;;;54     u8_t
;;;55     ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
000000  b518              PUSH     {r3,r4,lr}
;;;56     {
000002  4602              MOV      r2,r0
;;;57       ip_addr_t ipaddr;
;;;58       ip4_addr_set_u32(&ipaddr, addr);
000004  9200              STR      r2,[sp,#0]
;;;59     
;;;60       /* all ones (broadcast) or all zeroes (old skool broadcast) */
;;;61       if ((~addr == IPADDR_ANY) ||
000006  43d0              MVNS     r0,r2
000008  b100              CBZ      r0,|L1.12|
;;;62           (addr == IPADDR_ANY)) {
00000a  b90a              CBNZ     r2,|L1.16|
                  |L1.12|
;;;63         return 1;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;64       /* no broadcast support on this network interface? */
;;;65       } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
;;;66         /* the given address cannot be a broadcast address
;;;67          * nor can we check against any broadcast addresses */
;;;68         return 0;
;;;69       /* address matches network interface address exactly? => no broadcast */
;;;70       } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
;;;71         return 0;
;;;72       /*  on the same (sub) network... */
;;;73       } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
;;;74              /* ...and host identifier bits are all ones? =>... */
;;;75               && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
;;;76                (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
;;;77         /* => network broadcast address */
;;;78         return 1;
;;;79       } else {
;;;80         return 0;
;;;81       }
;;;82     }
00000e  bd18              POP      {r3,r4,pc}
                  |L1.16|
000010  f891002d          LDRB     r0,[r1,#0x2d]         ;65
000014  f0000002          AND      r0,r0,#2              ;65
000018  b908              CBNZ     r0,|L1.30|
00001a  2000              MOVS     r0,#0                 ;68
00001c  e7f7              B        |L1.14|
                  |L1.30|
00001e  6848              LDR      r0,[r1,#4]            ;70
000020  4290              CMP      r0,r2                 ;70
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;71
000026  e7f2              B        |L1.14|
                  |L1.40|
000028  9800              LDR      r0,[sp,#0]            ;73
00002a  688b              LDR      r3,[r1,#8]            ;73
00002c  4018              ANDS     r0,r0,r3              ;73
00002e  e9d13401          LDRD     r3,r4,[r1,#4]         ;73
000032  4023              ANDS     r3,r3,r4              ;73
000034  4298              CMP      r0,r3                 ;73
000036  d108              BNE      |L1.74|
000038  6888              LDR      r0,[r1,#8]            ;75
00003a  ea220000          BIC      r0,r2,r0              ;75
00003e  688c              LDR      r4,[r1,#8]            ;75
000040  43e3              MVNS     r3,r4                 ;75
000042  4298              CMP      r0,r3                 ;75
000044  d101              BNE      |L1.74|
000046  2001              MOVS     r0,#1                 ;78
000048  e7e1              B        |L1.14|
                  |L1.74|
00004a  2000              MOVS     r0,#0                 ;80
00004c  e7df              B        |L1.14|
;;;83     
                          ENDP


                          AREA ||i.ip4_addr_netmask_valid||, CODE, READONLY, ALIGN=1

                  ip4_addr_netmask_valid PROC
;;;89     u8_t
;;;90     ip4_addr_netmask_valid(u32_t netmask)
000000  b570              PUSH     {r4-r6,lr}
;;;91     {
000002  4606              MOV      r6,r0
;;;92       u32_t mask;
;;;93       u32_t nm_hostorder = lwip_htonl(netmask);
000004  4630              MOV      r0,r6
000006  f7fffffe          BL       lwip_htonl
00000a  4605              MOV      r5,r0
;;;94     
;;;95       /* first, check for the first zero */
;;;96       for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
00000c  f04f4400          MOV      r4,#0x80000000
000010  e004              B        |L2.28|
                  |L2.18|
;;;97         if ((nm_hostorder & mask) == 0) {
000012  ea050004          AND      r0,r5,r4
000016  b900              CBNZ     r0,|L2.26|
;;;98           break;
000018  e002              B        |L2.32|
                  |L2.26|
00001a  0864              LSRS     r4,r4,#1              ;96
                  |L2.28|
00001c  2c00              CMP      r4,#0                 ;96
00001e  d1f8              BNE      |L2.18|
                  |L2.32|
000020  bf00              NOP      
;;;99         }
;;;100      }
;;;101      /* then check that there is no one */
;;;102      for (; mask != 0; mask >>= 1) {
000022  e005              B        |L2.48|
                  |L2.36|
;;;103        if ((nm_hostorder & mask) != 0) {
000024  ea050004          AND      r0,r5,r4
000028  b108              CBZ      r0,|L2.46|
;;;104          /* there is a one after the first zero -> invalid */
;;;105          return 0;
00002a  2000              MOVS     r0,#0
                  |L2.44|
;;;106        }
;;;107      }
;;;108      /* no one after the first zero -> valid */
;;;109      return 1;
;;;110    }
00002c  bd70              POP      {r4-r6,pc}
                  |L2.46|
00002e  0864              LSRS     r4,r4,#1              ;102
                  |L2.48|
000030  2c00              CMP      r4,#0                 ;102
000032  d1f7              BNE      |L2.36|
000034  2001              MOVS     r0,#1                 ;109
000036  e7f9              B        |L2.44|
;;;111    
                          ENDP


                          AREA ||i.ipaddr_addr||, CODE, READONLY, ALIGN=1

                  ipaddr_addr PROC
;;;129    u32_t
;;;130    ipaddr_addr(const char *cp)
000000  b538              PUSH     {r3-r5,lr}
;;;131    {
000002  4604              MOV      r4,r0
;;;132      ip_addr_t val;
;;;133    
;;;134      if (ipaddr_aton(cp, &val)) {
000004  4669              MOV      r1,sp
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       ipaddr_aton
00000c  b108              CBZ      r0,|L3.18|
;;;135        return ip4_addr_get_u32(&val);
00000e  9800              LDR      r0,[sp,#0]
                  |L3.16|
;;;136      }
;;;137      return (IPADDR_NONE);
;;;138    }
000010  bd38              POP      {r3-r5,pc}
                  |L3.18|
000012  f04f30ff          MOV      r0,#0xffffffff        ;137
000016  e7fb              B        |L3.16|
;;;139    
                          ENDP


                          AREA ||i.ipaddr_aton||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  ipaddr_aton PROC
;;;151    int
;;;152    ipaddr_aton(const char *cp, ip_addr_t *addr)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;153    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
;;;154      u32_t val;
;;;155      u8_t base;
;;;156      char c;
;;;157      u32_t parts[4];
;;;158      u32_t *pp = parts;
000008  466f              MOV      r7,sp
;;;159    
;;;160      c = *cp;
00000a  7834              LDRB     r4,[r6,#0]
;;;161      for (;;) {
00000c  bf00              NOP      
                  |L4.14|
;;;162        /*
;;;163         * Collect number up to ``.''.
;;;164         * Values are specified as for C:
;;;165         * 0x=hex, 0=octal, 1-9=decimal.
;;;166         */
;;;167        if (!isdigit(c))
00000e  2c30              CMP      r4,#0x30
000010  db01              BLT      |L4.22|
000012  2c39              CMP      r4,#0x39
000014  dd03              BLE      |L4.30|
                  |L4.22|
;;;168          return (0);
000016  2000              MOVS     r0,#0
                  |L4.24|
;;;169        val = 0;
;;;170        base = 10;
;;;171        if (c == '0') {
;;;172          c = *++cp;
;;;173          if (c == 'x' || c == 'X') {
;;;174            base = 16;
;;;175            c = *++cp;
;;;176          } else
;;;177            base = 8;
;;;178        }
;;;179        for (;;) {
;;;180          if (isdigit(c)) {
;;;181            val = (val * base) + (int)(c - '0');
;;;182            c = *++cp;
;;;183          } else if (base == 16 && isxdigit(c)) {
;;;184            val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
;;;185            c = *++cp;
;;;186          } else
;;;187            break;
;;;188        }
;;;189        if (c == '.') {
;;;190          /*
;;;191           * Internet format:
;;;192           *  a.b.c.d
;;;193           *  a.b.c   (with c treated as 16 bits)
;;;194           *  a.b (with b treated as 24 bits)
;;;195           */
;;;196          if (pp >= parts + 3) {
;;;197            return (0);
;;;198          }
;;;199          *pp++ = val;
;;;200          c = *++cp;
;;;201        } else
;;;202          break;
;;;203      }
;;;204      /*
;;;205       * Check for trailing characters.
;;;206       */
;;;207      if (c != '\0' && !isspace(c)) {
;;;208        return (0);
;;;209      }
;;;210      /*
;;;211       * Concoct the address according to
;;;212       * the number of parts specified.
;;;213       */
;;;214      switch (pp - parts + 1) {
;;;215    
;;;216      case 0:
;;;217        return (0);       /* initial nondigit */
;;;218    
;;;219      case 1:             /* a -- 32 bits */
;;;220        break;
;;;221    
;;;222      case 2:             /* a.b -- 8.24 bits */
;;;223        if (val > 0xffffffUL) {
;;;224          return (0);
;;;225        }
;;;226        val |= parts[0] << 24;
;;;227        break;
;;;228    
;;;229      case 3:             /* a.b.c -- 8.8.16 bits */
;;;230        if (val > 0xffff) {
;;;231          return (0);
;;;232        }
;;;233        val |= (parts[0] << 24) | (parts[1] << 16);
;;;234        break;
;;;235    
;;;236      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
;;;237        if (val > 0xff) {
;;;238          return (0);
;;;239        }
;;;240        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
;;;241        break;
;;;242      default:
;;;243        LWIP_ASSERT("unhandled", 0);
;;;244        break;
;;;245      }
;;;246      if (addr) {
;;;247        ip4_addr_set_u32(addr, htonl(val));
;;;248      }
;;;249      return (1);
;;;250    }
000018  b004              ADD      sp,sp,#0x10
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L4.30|
00001e  2500              MOVS     r5,#0                 ;169
000020  f04f090a          MOV      r9,#0xa               ;170
000024  2c30              CMP      r4,#0x30              ;171
000026  d10e              BNE      |L4.70|
000028  1c70              ADDS     r0,r6,#1              ;172
00002a  4606              MOV      r6,r0                 ;172
00002c  7804              LDRB     r4,[r0,#0]            ;172
00002e  2c78              CMP      r4,#0x78              ;173
000030  d001              BEQ      |L4.54|
000032  2c58              CMP      r4,#0x58              ;173
000034  d105              BNE      |L4.66|
                  |L4.54|
000036  f04f0910          MOV      r9,#0x10              ;174
00003a  1c70              ADDS     r0,r6,#1              ;175
00003c  4606              MOV      r6,r0                 ;175
00003e  7804              LDRB     r4,[r0,#0]            ;175
000040  e001              B        |L4.70|
                  |L4.66|
000042  f04f0908          MOV      r9,#8                 ;177
                  |L4.70|
000046  bf00              NOP                            ;179
                  |L4.72|
000048  2c30              CMP      r4,#0x30              ;180
00004a  db09              BLT      |L4.96|
00004c  2c39              CMP      r4,#0x39              ;180
00004e  dc07              BGT      |L4.96|
000050  f1a40030          SUB      r0,r4,#0x30           ;181
000054  fb050509          MLA      r5,r5,r9,r0           ;181
000058  1c70              ADDS     r0,r6,#1              ;182
00005a  4606              MOV      r6,r0                 ;182
00005c  7804              LDRB     r4,[r0,#0]            ;182
00005e  e7f3              B        |L4.72|
                  |L4.96|
000060  f1b90f10          CMP      r9,#0x10              ;183
000064  d11b              BNE      |L4.158|
000066  2c30              CMP      r4,#0x30              ;183
000068  db01              BLT      |L4.110|
00006a  2c39              CMP      r4,#0x39              ;183
00006c  dd07              BLE      |L4.126|
                  |L4.110|
00006e  2c61              CMP      r4,#0x61              ;183
000070  db01              BLT      |L4.118|
000072  2c66              CMP      r4,#0x66              ;183
000074  dd03              BLE      |L4.126|
                  |L4.118|
000076  2c41              CMP      r4,#0x41              ;183
000078  db11              BLT      |L4.158|
00007a  2c46              CMP      r4,#0x46              ;183
00007c  dc0f              BGT      |L4.158|
                  |L4.126|
00007e  2c61              CMP      r4,#0x61              ;184
000080  db03              BLT      |L4.138|
000082  2c7a              CMP      r4,#0x7a              ;184
000084  dc01              BGT      |L4.138|
000086  2161              MOVS     r1,#0x61              ;184
000088  e000              B        |L4.140|
                  |L4.138|
00008a  2141              MOVS     r1,#0x41              ;184
                  |L4.140|
00008c  f104000a          ADD      r0,r4,#0xa            ;184
000090  1a40              SUBS     r0,r0,r1              ;184
000092  ea401505          ORR      r5,r0,r5,LSL #4       ;184
000096  1c70              ADDS     r0,r6,#1              ;185
000098  4606              MOV      r6,r0                 ;185
00009a  7804              LDRB     r4,[r0,#0]            ;185
00009c  e7d4              B        |L4.72|
                  |L4.158|
00009e  bf00              NOP                            ;187
0000a0  bf00              NOP                            ;187
0000a2  2c2e              CMP      r4,#0x2e              ;189
0000a4  d109              BNE      |L4.186|
0000a6  a803              ADD      r0,sp,#0xc            ;196
0000a8  4287              CMP      r7,r0                 ;196
0000aa  d301              BCC      |L4.176|
0000ac  2000              MOVS     r0,#0                 ;197
0000ae  e7b3              B        |L4.24|
                  |L4.176|
0000b0  c720              STM      r7!,{r5}              ;199
0000b2  1c70              ADDS     r0,r6,#1              ;200
0000b4  4606              MOV      r6,r0                 ;200
0000b6  7804              LDRB     r4,[r0,#0]            ;200
0000b8  e7a9              B        |L4.14|
                  |L4.186|
0000ba  bf00              NOP                            ;202
0000bc  bf00              NOP                            ;202
0000be  b16c              CBZ      r4,|L4.220|
0000c0  2c20              CMP      r4,#0x20              ;207
0000c2  d00b              BEQ      |L4.220|
0000c4  2c0c              CMP      r4,#0xc               ;207
0000c6  d009              BEQ      |L4.220|
0000c8  2c0a              CMP      r4,#0xa               ;207
0000ca  d007              BEQ      |L4.220|
0000cc  2c0d              CMP      r4,#0xd               ;207
0000ce  d005              BEQ      |L4.220|
0000d0  2c09              CMP      r4,#9                 ;207
0000d2  d003              BEQ      |L4.220|
0000d4  2c0b              CMP      r4,#0xb               ;207
0000d6  d001              BEQ      |L4.220|
0000d8  2000              MOVS     r0,#0                 ;208
0000da  e79d              B        |L4.24|
                  |L4.220|
0000dc  4668              MOV      r0,sp                 ;214
0000de  1a38              SUBS     r0,r7,r0              ;214
0000e0  2101              MOVS     r1,#1                 ;214
0000e2  eb0100a0          ADD      r0,r1,r0,ASR #2       ;214
0000e6  2805              CMP      r0,#5                 ;214
0000e8  d22a              BCS      |L4.320|
0000ea  e8dff000          TBB      [pc,r0]               ;214
0000ee  0305              DCB      0x03,0x05
0000f0  060f1b00          DCB      0x06,0x0f,0x1b,0x00
0000f4  2000              MOVS     r0,#0                 ;217
0000f6  e78f              B        |L4.24|
0000f8  e02d              B        |L4.342|
0000fa  f1b57f80          CMP      r5,#0x1000000         ;223
0000fe  d301              BCC      |L4.260|
000100  2000              MOVS     r0,#0                 ;224
000102  e789              B        |L4.24|
                  |L4.260|
000104  9800              LDR      r0,[sp,#0]            ;226
000106  ea456500          ORR      r5,r5,r0,LSL #24      ;226
00010a  e024              B        |L4.342|
00010c  f5b53f80          CMP      r5,#0x10000           ;230
000110  d301              BCC      |L4.278|
000112  2000              MOVS     r0,#0                 ;231
000114  e780              B        |L4.24|
                  |L4.278|
000116  9800              LDR      r0,[sp,#0]            ;233
000118  0600              LSLS     r0,r0,#24             ;233
00011a  9901              LDR      r1,[sp,#4]            ;233
00011c  ea404001          ORR      r0,r0,r1,LSL #16      ;233
000120  4305              ORRS     r5,r5,r0              ;233
000122  e018              B        |L4.342|
000124  2dff              CMP      r5,#0xff              ;237
000126  d901              BLS      |L4.300|
000128  2000              MOVS     r0,#0                 ;238
00012a  e775              B        |L4.24|
                  |L4.300|
00012c  9800              LDR      r0,[sp,#0]            ;240
00012e  0600              LSLS     r0,r0,#24             ;240
000130  9901              LDR      r1,[sp,#4]            ;240
000132  ea404001          ORR      r0,r0,r1,LSL #16      ;240
000136  9902              LDR      r1,[sp,#8]            ;240
000138  ea402001          ORR      r0,r0,r1,LSL #8       ;240
00013c  4305              ORRS     r5,r5,r0              ;240
00013e  e00a              B        |L4.342|
                  |L4.320|
000140  bf00              NOP                            ;243
000142  bf00              NOP                            ;243
000144  a309              ADR      r3,|L4.364|
000146  22f3              MOVS     r2,#0xf3              ;243
000148  a113              ADR      r1,|L4.408|
00014a  a016              ADR      r0,|L4.420|
00014c  f7fffffe          BL       __2printf
000150  bf00              NOP                            ;243
000152  bf00              NOP                            ;243
000154  bf00              NOP                            ;244
                  |L4.342|
000156  bf00              NOP                            ;220
000158  f1b80f00          CMP      r8,#0                 ;246
00015c  d004              BEQ      |L4.360|
00015e  4628              MOV      r0,r5                 ;247
000160  f7fffffe          BL       lwip_htonl
000164  f8c80000          STR      r0,[r8,#0]            ;247
                  |L4.360|
000168  2001              MOVS     r0,#1                 ;249
00016a  e755              B        |L4.24|
;;;251    
                          ENDP

                  |L4.364|
00016c  2e2e5c4c          DCB      "..\\LWIP\\lwip-1.4.1\\src\\core\\ipv4\\ip_addr.c",0
000170  5749505c
000174  6c776970
000178  2d312e34
00017c  2e315c73
000180  72635c63
000184  6f72655c
000188  69707634
00018c  5c69705f
000190  61646472
000194  2e6300  
000197  00                DCB      0
                  |L4.408|
000198  756e6861          DCB      "unhandled",0
00019c  6e646c65
0001a0  6400    
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L4.420|
0001a4  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\r\n",0
0001a8  7274696f
0001ac  6e202225
0001b0  73222066
0001b4  61696c65
0001b8  64206174
0001bc  206c696e
0001c0  65202564
0001c4  20696e20
0001c8  25730d0a
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0

                          AREA ||i.ipaddr_ntoa||, CODE, READONLY, ALIGN=2

                  ipaddr_ntoa PROC
;;;260    char *
;;;261    ipaddr_ntoa(const ip_addr_t *addr)
000000  b510              PUSH     {r4,lr}
;;;262    {
000002  4604              MOV      r4,r0
;;;263      static char str[16];
;;;264      return ipaddr_ntoa_r(addr, str, 16);
000004  2210              MOVS     r2,#0x10
000006  4902              LDR      r1,|L5.16|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ipaddr_ntoa_r
;;;265    }
00000e  bd10              POP      {r4,pc}
;;;266    
                          ENDP

                  |L5.16|
                          DCD      ||str||

                          AREA ||i.ipaddr_ntoa_r||, CODE, READONLY, ALIGN=1

                  ipaddr_ntoa_r PROC
;;;275     */
;;;276    char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;277    {
000004  4606              MOV      r6,r0
000006  460b              MOV      r3,r1
000008  4614              MOV      r4,r2
;;;278      u32_t s_addr;
;;;279      char inv[3];
;;;280      char *rp;
;;;281      u8_t *ap;
;;;282      u8_t rem;
;;;283      u8_t n;
;;;284      u8_t i;
;;;285      int len = 0;
00000a  f04f0c00          MOV      r12,#0
;;;286    
;;;287      s_addr = ip4_addr_get_u32(addr);
00000e  6830              LDR      r0,[r6,#0]
000010  9001              STR      r0,[sp,#4]
;;;288    
;;;289      rp = buf;
000012  4619              MOV      r1,r3
;;;290      ap = (u8_t *)&s_addr;
000014  aa01              ADD      r2,sp,#4
;;;291      for(n = 0; n < 4; n++) {
000016  2700              MOVS     r7,#0
000018  e03c              B        |L6.148|
                  |L6.26|
;;;292        i = 0;
00001a  2500              MOVS     r5,#0
;;;293        do {
00001c  bf00              NOP      
                  |L6.30|
;;;294          rem = *ap % (u8_t)10;
00001e  7810              LDRB     r0,[r2,#0]
000020  f04f090a          MOV      r9,#0xa
000024  fb90faf9          SDIV     r10,r0,r9
000028  fb09001a          MLS      r0,r9,r10,r0
00002c  f00008ff          AND      r8,r0,#0xff
;;;295          *ap /= (u8_t)10;
000030  7810              LDRB     r0,[r2,#0]
000032  fb90f0f9          SDIV     r0,r0,r9
000036  7010              STRB     r0,[r2,#0]
;;;296          inv[i++] = '0' + rem;
000038  f1080030          ADD      r0,r8,#0x30
00003c  f0000aff          AND      r10,r0,#0xff
000040  4628              MOV      r0,r5
000042  f1050901          ADD      r9,r5,#1
000046  f00905ff          AND      r5,r9,#0xff
00004a  f80da000          STRB     r10,[sp,r0]
;;;297        } while(*ap);
00004e  7810              LDRB     r0,[r2,#0]
000050  2800              CMP      r0,#0
000052  d1e4              BNE      |L6.30|
;;;298        while(i--) {
000054  e00b              B        |L6.110|
                  |L6.86|
;;;299          if (len++ >= buflen) {
000056  4660              MOV      r0,r12
000058  f10c0c01          ADD      r12,r12,#1
00005c  42a0              CMP      r0,r4
00005e  db02              BLT      |L6.102|
;;;300            return NULL;
000060  2000              MOVS     r0,#0
                  |L6.98|
;;;301          }
;;;302          *rp++ = inv[i];
;;;303        }
;;;304        if (len++ >= buflen) {
;;;305          return NULL;
;;;306        }
;;;307        *rp++ = '.';
;;;308        ap++;
;;;309      }
;;;310      *--rp = 0;
;;;311      return buf;
;;;312    }
000062  e8bd87fc          POP      {r2-r10,pc}
                  |L6.102|
000066  f81d0005          LDRB     r0,[sp,r5]            ;302
00006a  f8010b01          STRB     r0,[r1],#1            ;302
                  |L6.110|
00006e  1e28              SUBS     r0,r5,#0              ;298
000070  f1a50901          SUB      r9,r5,#1              ;298
000074  f00905ff          AND      r5,r9,#0xff           ;298
000078  d1ed              BNE      |L6.86|
00007a  4660              MOV      r0,r12                ;304
00007c  f10c0c01          ADD      r12,r12,#1            ;304
000080  42a0              CMP      r0,r4                 ;304
000082  db01              BLT      |L6.136|
000084  2000              MOVS     r0,#0                 ;305
000086  e7ec              B        |L6.98|
                  |L6.136|
000088  202e              MOVS     r0,#0x2e              ;307
00008a  f8010b01          STRB     r0,[r1],#1            ;307
00008e  1c52              ADDS     r2,r2,#1              ;308
000090  1c78              ADDS     r0,r7,#1              ;291
000092  b2c7              UXTB     r7,r0                 ;291
                  |L6.148|
000094  2f04              CMP      r7,#4                 ;291
000096  dbc0              BLT      |L6.26|
000098  f04f0900          MOV      r9,#0                 ;310
00009c  1e48              SUBS     r0,r1,#1              ;310
00009e  4601              MOV      r1,r0                 ;310
0000a0  f8809000          STRB     r9,[r0,#0]            ;310
0000a4  4618              MOV      r0,r3                 ;311
0000a6  e7dc              B        |L6.98|
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||str||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ip_addr_any
                          DCD      0x00000000
                  ip_addr_broadcast
                          DCD      0xffffffff
